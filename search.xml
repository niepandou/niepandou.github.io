<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++中期：深入namespace</title>
    <url>/2023/11/16/C++%E4%B8%AD%E6%9C%9F%EF%BC%9A%E6%B7%B1%E5%85%A5namespace/</url>
    <content><![CDATA[<blockquote>
<h1 id="namespace深入研究"><a href="#namespace深入研究" class="headerlink" title="namespace深入研究"></a>namespace深入研究</h1></blockquote>
<h2 id="1-为什么会出现namespace"><a href="#1-为什么会出现namespace" class="headerlink" title="1.为什么会出现namespace"></a>1.为什么会出现namespace</h2><p>主要原因：如果两个公司想要互相交流代码，使用的是c语言，会产生代码量复杂冗余的情况</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//google公司的某变量</span></span><br><span class="line"><span class="type">int</span> Google_class1_Liu number;</span><br><span class="line"><span class="comment">//虎牙公司的某变量</span></span><br><span class="line"><span class="type">int</span> Huya_class1_Liu number;</span><br></pre></td></tr></table></figure>
<p>由此可知，这样导致的结果是，为了防止变量重复多出来了一堆不必要的前缀名，因此，C++就有了namespace这一概念</p>
<h2 id="2-常见的namespace"><a href="#2-常见的namespace" class="headerlink" title="2.常见的namespace"></a>2.常见的namespace</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>
<p>与iostream模板密不可分，std命名空间内存在cin，cout，scanf，printf，endl等变量或者函数</p>
<h2 id="3-如何定义一个自己的namespace"><a href="#3-如何定义一个自己的namespace" class="headerlink" title="3.如何定义一个自己的namespace"></a>3.如何定义一个自己的namespace</h2><p>(1).像函数一样可以直接定义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;print()&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2)也可以定义匿名空间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>匿名空间所定义的变量或函数可以直接使用，不需要作用域限定符</p>
</blockquote>
<p>(3)更可以像函数或者循环一样嵌套定义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">	<span class="keyword">namespace</span> lr</span><br><span class="line">	&#123;</span><br><span class="line">	 <span class="type">int</span> num;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中::被称为作用域限定符</p>
</blockquote>
<h2 id="3-对namespace的一些操作"><a href="#3-对namespace的一些操作" class="headerlink" title="3.对namespace的一些操作"></a>3.对namespace的一些操作</h2><p>（1）使用已定义好的命名空间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;wd::num&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2)使用自带的命名空间<br>(1)方法一</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	</span><br><span class="line">	cin&gt;&gt;a;</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）方法二</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	</span><br><span class="line">	cin&gt;&gt;a;</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>(3)方法三</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	</span><br><span class="line">	std::cin&gt;&gt;a;</span><br><span class="line">	std::cout&lt;&lt;a&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>三种方法各有各的好处，方法二一般是刚入门或者是为了方便而直接使用整个命名空间，这样调用会直接把命名空间内的所有实体全部调出来，方法一和方法三是单独调用命名空间内的某个实体，虽然复杂一些但也降低了占用空间</p>
</blockquote>
<blockquote>
<p>如果想用stl内的容器，也是可以直接调用的，比如调用vector就写using std::vector,vector所具有的函数也是同时调用出来了</p>
</blockquote>
<h2 id="4-命名空间与函数上的一些联系"><a href="#4-命名空间与函数上的一些联系" class="headerlink" title="4.命名空间与函数上的一些联系"></a>4.命名空间与函数上的一些联系</h2><blockquote>
<p>就像函数可以先声明再定义一样（可以声明多次但只能定义一次），命名空间内部的函数也可以先声明再定义,这使得命名空间就像容器一样可以无限定义实体</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;print()&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h1 id="总结及注意事项"><a href="#总结及注意事项" class="headerlink" title="总结及注意事项"></a>总结及注意事项</h1></blockquote>
<p>1.细心的你应该注意到了，命名空间和我们日常编程的习惯不一样，是不允许缩进的（当然你想缩进也没啥大的影响），可能你会觉得这样会降低可读性，实则相反，因为namespace是专为大型项目而出现的，当代码量足够大，命名空间内足足上万个代码时，他的可读性反而很不错<br>2.匿名空间所定义的变量无法跨模块调用，即一个项目内某个源文件内定义的匿名空间内的一个变量无法被另一个源文件所调用,与c语言的static有异曲同工之处<br>源文件1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> num;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>源文件2</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">namespace</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果将这两项代码放在一个项目内，你会发现编译无法通过，这是因为源文件2里cnt属于匿名空间，无法跨模块调用，如果删去cnt的调用及他的输出，代码就成功编译了<br>3.为了防止我们所定义的变量或函数与std内部的实体重复，建议非必要不去写using namespace std,而是去调用内部的某个实体<br>4.一种特殊情况：实体三重名</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	wd::<span class="built_in">print</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此时输出的结果是3，输出的是形参，如果不选择传参，输出的则是命名空间内部的实体2，再其次就是全局变量1</p>
</blockquote>
<p>如果我们想让三个num都能输出</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt; ::num&lt;&lt;endl;<span class="comment">//全局变量就是一种另类的匿名空间实体</span></span><br><span class="line">	cout&lt;&lt;wd::num&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时输出1 2 3</p>
<p>由此可以得知命名空间内部的函数对重名实体的操作是就近原则，有重名的就去使用最近的重名实体，通过作用域限定符可以避免该情况的发生</p>
]]></content>
  </entry>
  <entry>
    <title>C++中的三种IO形式</title>
    <url>/2023/11/16/C++%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8DIO%E5%BD%A2%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><p>流的概念<br>流就是流动，从某一处流向另一处的过程<br>在C++中，流的基本单位是字节，因此也称为字节流</p>
</blockquote>
<p>流的四种状态</p>
<blockquote>
<p>goodbit 有效状态<br>badbit 系统级别的错误，不可恢复<br>failbit 可恢复的错误<br>eofbit 到达了流的末尾</p>
</blockquote>
<blockquote>
<h1 id="标准IO"><a href="#标准IO" class="headerlink" title="标准IO"></a>标准IO</h1></blockquote>
<h2 id="标准IO四种状态和重置忽略函数的使用"><a href="#标准IO四种状态和重置忽略函数的使用" class="headerlink" title="标准IO四种状态和重置忽略函数的使用"></a>标准IO四种状态和重置忽略函数的使用</h2><p>io标准库,与IO常用函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::istream;</span><br></pre></td></tr></table></figure>

<p>标准IO使用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::istream;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStreamStatus</span><span class="params">(istream&amp; is)</span><span class="comment">//istream为自定义类型，表示输入函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//输入函数cin本质上是一个对象，内部也有相应的成员函数可以调用</span></span><br><span class="line">	<span class="comment">//good bad fail eof 与其上意义相同，为1为真，0为假</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;is goodbit:&quot;</span> &lt;&lt; is.<span class="built_in">good</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;is badbit:&quot;</span> &lt;&lt; is.<span class="built_in">bad</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;is failbit&quot;</span> &lt;&lt; is.<span class="built_in">fail</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;is eofbit&quot;</span> &lt;&lt; is.<span class="built_in">eof</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> number = <span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printStreamStatus</span>(cin);<span class="comment">//去检查一下输入流当前的状态</span></span><br><span class="line">	</span><br><span class="line">	cin&gt;&gt;number;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;number:&quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printStreamStatus</span>(cin);</span><br><span class="line">	</span><br><span class="line">	string line;</span><br><span class="line">	cin &gt;&gt; line;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;line:&quot;</span> &lt;&lt; line &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printStreamStatus</span>(cin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码，当输入正确格式（先输入int类型，再输入string类型），则输出结果</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">is</span> goodbi<span class="variable">t:1</span></span><br><span class="line"><span class="keyword">is</span> badbi<span class="variable">t:0</span></span><br><span class="line"><span class="keyword">is</span> failbit0</span><br><span class="line"><span class="keyword">is</span> eofbit0</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="keyword">number</span>:<span class="number">123</span></span><br><span class="line"><span class="keyword">is</span> goodbi<span class="variable">t:1</span></span><br><span class="line"><span class="keyword">is</span> badbi<span class="variable">t:0</span></span><br><span class="line"><span class="keyword">is</span> failbit0</span><br><span class="line"><span class="keyword">is</span> eofbit0</span><br><span class="line"><span class="keyword">abc</span></span><br><span class="line"><span class="built_in">line</span>:<span class="keyword">abc</span></span><br><span class="line"><span class="keyword">is</span> goodbi<span class="variable">t:1</span></span><br><span class="line"><span class="keyword">is</span> badbi<span class="variable">t:0</span></span><br><span class="line"><span class="keyword">is</span> failbit0</span><br><span class="line"><span class="keyword">is</span> eofbit0</span><br></pre></td></tr></table></figure>
<p>可以看到除goodbit以外其余皆为假，则流的状态是正常的<br>但当格式输入有误时,比如输入了string</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">is</span> goodbi<span class="variable">t:1</span></span><br><span class="line"><span class="keyword">is</span> badbi<span class="variable">t:0</span></span><br><span class="line"><span class="keyword">is</span> failbit0</span><br><span class="line"><span class="keyword">is</span> eofbit0</span><br><span class="line"><span class="keyword">abc</span></span><br><span class="line"><span class="keyword">number</span>:<span class="number">0</span></span><br><span class="line"><span class="keyword">is</span> goodbi<span class="variable">t:0</span></span><br><span class="line"><span class="keyword">is</span> badbi<span class="variable">t:0</span></span><br><span class="line"><span class="keyword">is</span> failbit1</span><br><span class="line"><span class="keyword">is</span> eofbit0</span><br><span class="line"><span class="built_in">line</span>:</span><br><span class="line"><span class="keyword">is</span> goodbi<span class="variable">t:0</span></span><br><span class="line"><span class="keyword">is</span> badbi<span class="variable">t:0</span></span><br><span class="line"><span class="keyword">is</span> failbit1</span><br><span class="line"><span class="keyword">is</span> eofbit0</span><br></pre></td></tr></table></figure>
<p>number的值因为输入有误成了0（如果是输入了比int还大的数字，会打印越界后的数字而不是0），goodbit也成了假，输入stirng的时刻直接没有执行，goodbit也为假，但我们发现failbit为真，所以在第一次输入有误时我们可以弥补错误</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> number = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printStreamStatus</span>(cin);<span class="comment">//去检查一下输入流当前的状态</span></span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; number;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;number:&quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">printStreamStatus</span>(cin);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//重置流的状态</span></span><br><span class="line">	cin.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="comment">//清空缓冲区</span></span><br><span class="line">	cin.<span class="built_in">ignore</span>(<span class="number">1024</span>,<span class="string">&#x27;\n&#x27;</span>);<span class="comment">//表示最多跳过1024个字节，直到遇到换行符</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	string line;</span><br><span class="line">	cin &gt;&gt; line;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;line:&quot;</span> &lt;&lt; line &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printStreamStatus</span>(cin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时我们发现无论第一次输入是否有误，都不会影响输入string的过程</p>
<blockquote>
<p>假设我们在对cin重置后没有清空缓冲区，那么输入的数据会保留到下一次输入，也同样会取消string的输入，第一次输入的数据就是line的值</p>
</blockquote>
<p>输出结果</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">is</span> goodbi<span class="variable">t:1</span></span><br><span class="line"><span class="keyword">is</span> badbi<span class="variable">t:0</span></span><br><span class="line"><span class="keyword">is</span> failbit0</span><br><span class="line"><span class="keyword">is</span> eofbit0</span><br><span class="line"><span class="keyword">abc</span></span><br><span class="line"><span class="keyword">number</span>:<span class="number">0</span></span><br><span class="line"><span class="keyword">is</span> goodbi<span class="variable">t:0</span></span><br><span class="line"><span class="keyword">is</span> badbi<span class="variable">t:0</span></span><br><span class="line"><span class="keyword">is</span> failbit1</span><br><span class="line"><span class="keyword">is</span> eofbit0</span><br><span class="line"><span class="keyword">abc</span></span><br><span class="line"><span class="built_in">line</span>:<span class="keyword">abc</span></span><br><span class="line"><span class="keyword">is</span> goodbi<span class="variable">t:1</span></span><br><span class="line"><span class="keyword">is</span> badbi<span class="variable">t:0</span></span><br><span class="line"><span class="keyword">is</span> failbit0</span><br><span class="line"><span class="keyword">is</span> eofbit0</span><br></pre></td></tr></table></figure>
<h2 id="自定义安全输入"><a href="#自定义安全输入" class="headerlink" title="自定义安全输入"></a>自定义安全输入</h2><blockquote>
<p>既然已经掌握了四种状态表示和如何重置流与清空缓冲区<br>那么可以试着写一个专门用于输入的函数</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::istream;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">readIntergerNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> number = <span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;&gt;:Please Input an interger number&quot;</span>&lt;&lt;endl;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(cin&gt;&gt;number &amp;&amp; !cin.<span class="built_in">eof</span>())<span class="comment">//直到输入结束</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(cin.<span class="built_in">bad</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;&gt;:cin stream has broken&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(cin.<span class="built_in">fail</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;&gt;:Please reInput a vaild interger number&quot;</span>&lt;&lt;endl;</span><br><span class="line">			cin.<span class="built_in">clear</span>();</span><br><span class="line">			cin.<span class="built_in">ignore</span>(<span class="number">1024</span>,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;&gt;:Number:&quot;</span>&lt;&lt;number&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">return</span> number;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="built_in">readIntergerNumber</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><p>注：当前代码在Linux系统中执行，其他编译器可能情况有所不同</p>
<p>三种缓冲区</p>
<blockquote>
<p>全缓冲区：只有缓冲区满时才会输出&#x2F;刷新<br>行缓冲区:只有缓冲区满&#x2F;遇到换行时才会输出&#x2F;刷新<br>非缓冲区:不带缓冲区，有多少数据就输出&#x2F;刷新多少数据，类似于word编辑</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::istream;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;	</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Hello&lt;&lt;endl;//可以认为endl就是换行符，也就表明cout使用的就是行缓冲区</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	for(int i = 0;i &lt; 512;++i)</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		cout&lt;&lt;&#x27;a&#x27;;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	Sleep(3000);//睡眠三秒</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>此时我们发现，当Hello打印后，过了三秒之后512个a才被打印出来<br>而当i循环改为1025时，可以发现打印完a之后才进行休眠<br>可知cout的默认缓冲区大小为1024字节</p>
<h1 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h1><h1 id="三种输出函数"><a href="#三种输出函数" class="headerlink" title="三种输出函数"></a>三种输出函数</h1><blockquote>
<p>cout打印缓冲区内的数据<br>cerr打印错误信息<br>clog打印日志信息</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cerr; </span><br><span class="line"><span class="keyword">using</span> std::clog;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;cout&quot;</span>&lt;&lt;endl;</span><br><span class="line">	cerr&lt;&lt;<span class="string">&quot;cerr&quot;</span><span class="string">&quot;&lt;endl;</span></span><br><span class="line"><span class="string">	clog&lt;&lt;&quot;</span>clog<span class="string">&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">int main()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">	test0();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>文件打印结果</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cout</span></span><br></pre></td></tr></table></figure>
<p>错误文件打印结果</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cerr</span></span><br><span class="line"><span class="attribute">clog</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当将编译执行后的打印放进文件中，会发现文件中仅有cout输出<br>    当指定编译执行后的打印以标准错误2放进文件中，会发现文件中有cerr，clog</p>
</blockquote>
<h2 id="ifstream"><a href="#ifstream" class="headerlink" title="ifstream"></a>ifstream</h2><p>用于文件的读功能,属于文件IO内的一种自定义类型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cerr; </span><br><span class="line"><span class="keyword">using</span> std::clog;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::ifstream;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;namespace.cpp&quot;</span>)</span></span>;<span class="comment">//打开当前目录下的namespace.cpp文件</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(!ifs.<span class="built_in">good</span>())<span class="comment">//文件不存在或其他问题</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;ifstream open failed&quot;</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	string word;</span><br><span class="line">	<span class="keyword">while</span>(ifs&gt;&gt;word) <span class="comment">//ifstream类型读入默认以空格和制表符分隔</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;word&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//记得关闭文件</span></span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注：namespace.cpp是我之前已经写过的一个cpp文件，你们可以选择一个txt类型的文件打开，也是可以的</p>
<p>输出结果</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt; //using namespace <span class="built_in">std</span>以后可以禁掉了 using <span class="built_in">std</span>::cin;// :: 作用域限定符 using <span class="built_in">std</span>::cout; //using <span class="built_in">std</span>::endl; extern int number2;//跨模块调用 //匿名空间内定义的变量无法跨模块调用，与static相同 namespace wd &#123; int <span class="built_in">num</span> = <span class="number">1</span>; void <span class="built_in">print</span>() &#123; cout &lt;&lt; <span class="string">&quot;print()&quot;</span> &lt;&lt; <span class="built_in">std</span>::endl; &#125; namespace lr &#123; int <span class="built_in">num</span>; void <span class="built_in">display</span>() &#123; cout &lt;&lt; <span class="string">&quot;display&quot;</span> &lt;&lt; <span class="built_in">std</span>::endl; &#125; &#125;//end of namespace lr &#125;//end of namespace wd namespace//匿名空间直接使用 &#123; int <span class="built_in">num</span> = <span class="number">2</span>; &#125; namespace wd2 &#123; void <span class="built_in">print</span>(); &#125;//命名空间内部函数可以像函数一样声明再定义,可以多次定义命名空间 //不同的是，一般函数声明可以多次，但定义只有一次 //命名空间就像容器，可以无限定义实体 //如果函数调用的形参与之前定义的变量重名，所调用的变量的值遵循就近原则 //如果有形参，值就是形参，如果没有，就找最近的之前相应变量的值 int main() &#123; wd::<span class="built_in">print</span>(); cout &lt;&lt; wd::<span class="built_in">num</span> &lt;&lt; <span class="built_in">std</span> :: endl; wd::lr::<span class="built_in">display</span>(); cout &lt;&lt; <span class="built_in">num</span> &lt;&lt; <span class="built_in">std</span>::endl; using namespace wd; <span class="built_in">print</span>(); cout &lt;&lt; number2 &lt;&lt; <span class="built_in">std</span>::endl; wd2::<span class="built_in">print</span>(); <span class="built_in">return</span> <span class="number">0</span>; &#125; namespace wd2 &#123; int abc = <span class="number">1</span>; void <span class="built_in">print</span>() &#123; cout &lt;&lt; abc &lt;&lt; <span class="built_in">std</span>::endl; &#125; &#125;</span><br></pre></td></tr></table></figure>
<p>可以发现，这样输出的结果不是给人看的，需要一样东西来让他能够一行一行输出出来</p>
<p>在之前C++入门阶段我们接触到一个函数为getline，参数只能传字符数组而不能传string对象，但这也够用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::clog;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::ifstream;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">string <span class="title">filename</span><span class="params">(<span class="string">&quot;namespace.cpp&quot;</span>)</span></span>;</span><br><span class="line">	<span class="function">ifstream <span class="title">ifs</span><span class="params">(filename)</span></span>;<span class="comment">//用字符串也可以简便ifstream的传参过程</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(!ifs.<span class="built_in">good</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;ifstream open file failed&quot;</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> buff[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//创建buff数组存储一行数据</span></span><br><span class="line">	<span class="keyword">while</span>(ifs.<span class="built_in">getline</span>(buff,<span class="number">1000</span>))<span class="comment">//ifstream类中有getline成员函数，可直接调用</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;buff&lt;&lt;endl;</span><br><span class="line">		<span class="built_in">memset</span>(buff,<span class="number">0</span>,<span class="keyword">sizeof</span> buff);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//using namespace std以后可以禁掉了</span></span><br><span class="line"><span class="keyword">using</span> std::cin;<span class="comment">// :: 作用域限定符</span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="comment">//using std::endl;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> number2;<span class="comment">//跨模块调用</span></span><br><span class="line"><span class="comment">//匿名空间内定义的变量无法跨模块调用，与static相同</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;print()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">namespace</span> lr</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;display&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="comment">//end of namespace lr</span></span><br><span class="line">&#125;<span class="comment">//end of namespace wd</span></span><br><span class="line"><span class="keyword">namespace</span><span class="comment">//匿名空间直接使用</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> wd2</span><br><span class="line">&#123;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;<span class="comment">//命名空间内部函数可以像函数一样声明再定义,可以多次定义命名空间</span></span><br><span class="line"><span class="comment">//不同的是，一般函数声明可以多次，但定义只有一次</span></span><br><span class="line"><span class="comment">//命名空间就像容器，可以无限定义实体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果函数调用的形参与之前定义的变量重名，所调用的变量的值遵循就近原则</span></span><br><span class="line"><span class="comment">//如果有形参，值就是形参，如果没有，就找最近的之前相应变量的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        wd::<span class="built_in">print</span>();</span><br><span class="line">        cout &lt;&lt; wd::num &lt;&lt; std :: endl;</span><br><span class="line">        wd::lr::<span class="built_in">display</span>();</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">namespace</span> wd;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; number2 &lt;&lt; std::endl;</span><br><span class="line">        wd2::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> wd2</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> abc = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; abc &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时打印的代码就非常可观了</p>
<h2 id="ostream"><a href="#ostream" class="headerlink" title="ostream"></a>ostream</h2><p>ostream对象用于文件写入</p>
<p>成员函数</p>
<blockquote>
<p>ofs,open(string);打开当前目录下的string文件<br>ofs.write(string,len);&#x2F;&#x2F;第一个参数为要写入的字符串，第二个参数指定写入到多少长度为止<br>ofs.tellp();&#x2F;&#x2F;返回当前流游标位置<br>ofs.seekp(n);流回到指定位置，0表示起始位置</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::clog;</span><br><span class="line"><span class="keyword">using</span> std::ifstream;</span><br><span class="line"><span class="keyword">using</span> std::ofstream;</span><br><span class="line"><span class="keyword">using</span> std::fstream;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">otest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, std::ios::out | std::ios::app);</span><br><span class="line">	<span class="comment">//out为open函数默认参数，表示不要求文件存在，</span></span><br><span class="line">	<span class="comment">//如果文件存在则进行重定向</span></span><br><span class="line">	<span class="comment">//如果文件不存在则创建文件并写入</span></span><br><span class="line">	<span class="comment">//app即append追加模式</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!ofs)<span class="comment">//简便操作，可以不用调用good</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;ofstream file open failed&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//对文件开始写入</span></span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;this is a test&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="type">size_t</span> pos = ofs.<span class="built_in">tellp</span>();</span><br><span class="line"></span><br><span class="line">	ofs.<span class="built_in">write</span>(<span class="string">&quot;this is a new test\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;this is a new test\n&quot;</span>)) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//记得关闭文件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">otest</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="fstream"><a href="#fstream" class="headerlink" title="fstream"></a>fstream</h2><p>fstream能进行读写操作,存在于fstream模板中<br>既包含ifstream的成员函数，也包含ofstream的成员函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::fstream;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ftest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//fstream默认规定打开的文件必须存在，且要从文件的开头读写</span></span><br><span class="line">	<span class="function">fstream <span class="title">fs</span><span class="params">(<span class="string">&quot;test.txt&quot;</span>, std::ios::in | std::ios::out | std::ios::app)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!fs)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;fstream file open failed &quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> number = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; number;</span><br><span class="line">		fs &lt;&lt; number &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//当使用tell查找游标位置时，tellg是输入流，tellp是输出流</span></span><br><span class="line"></span><br><span class="line">	fs.<span class="built_in">seekp</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> buff[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (fs.<span class="built_in">getline</span>(buff, <span class="keyword">sizeof</span> buff))</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; buff;</span><br><span class="line">			<span class="built_in">memset</span>(buff, <span class="number">0</span>, <span class="keyword">sizeof</span> buff);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	fs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ftest</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="字符串IO"><a href="#字符串IO" class="headerlink" title="字符串IO"></a>字符串IO</h1><p>模板库<sstream></sstream></p>
<p>自定义类型<br>istringstream将字符串转换为其他类型<br>ostringstream将缓冲区内数据转化为字符串<br>stringstream</p>
<h2 id="istringstream"><a href="#istringstream" class="headerlink" title="istringstream"></a>istringstream</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#incldue <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std:;cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">istringstream <span class="title">iss</span><span class="params">(<span class="string">&quot;1 2 3 4 5 6&quot;</span>)</span></span>;</span><br><span class="line">	</span><br><span class="line">	string word;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(iss&gt;&gt;word)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;word&lt;&lt;endl;</span><br><span class="line">		<span class="comment">//当读入到的是缓冲区中，可以以其他类型读入</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ostringstream"><a href="#ostringstream" class="headerlink" title="ostringstream"></a>ostringstream</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::istringstream;</span><br><span class="line"><span class="keyword">using</span> std::ostringstream;</span><br><span class="line"><span class="keyword">using</span> std::stringstream;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> number = <span class="number">-1</span>;</span><br><span class="line">	<span class="type">int</span> id = <span class="number">101</span>;</span><br><span class="line">	</span><br><span class="line">	ostringstream oss;</span><br><span class="line">	</span><br><span class="line">	oss &lt;&lt; <span class="string">&quot;number:&quot;</span>&lt;&lt;number&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="string">&quot;id:&quot;</span>&lt;&lt;id&lt;&lt;endl;</span><br><span class="line">	</span><br><span class="line">	string str = oss.<span class="built_in">str</span>();<span class="comment">//获取oss流中字符串数据</span></span><br><span class="line">	</span><br><span class="line">	cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">number</span>:-<span class="number">1</span> id:<span class="number">101</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>C++中期：程序内存布局以及对象入门</title>
    <url>/2023/11/16/C++%E4%B8%AD%E6%9C%9F%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%BB%A5%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<blockquote>
<h1 id="程序内存布局"><a href="#程序内存布局" class="headerlink" title="程序内存布局"></a>程序内存布局</h1></blockquote>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>以32位系统为例，最大支持内存为2^32，即2 ^ 30 * 4 &#x3D; 4G<br>内存分为内核态和用户态</p>
<h2 id="内核态"><a href="#内核态" class="headerlink" title="内核态"></a>内核态</h2><p>其中1G内存可分给系统应用，即内核态</p>
<h2 id="用户态"><a href="#用户态" class="headerlink" title="用户态"></a>用户态</h2><p>另外3G内存分配给用户态<br>用户态<strong>由高地址到低地址</strong>又可划分为几个层次</p>
<blockquote>
<h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h3><p>栈区内存的占用是由高地址（0x3f3f3f3f）到低地址(0x00000000)进行分配的，由操作系统进行控制，定义变量时地址是由系统分配的</p>
<h3 id="共享库"><a href="#共享库" class="headerlink" title="共享库"></a>共享库</h3><p> 如果栈发生了溢出，一些变量可能会放到此处</p>
<h3 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h3></blockquote>
<p>内存由低地址（0x00000000）往高地址(0x3f3f3f3f)分配，由程序员控制，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>, *(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>)));</span><br><span class="line"><span class="comment">//打印为00000001</span></span><br></pre></td></tr></table></figure>
<p>由输出结果可以看出只有程序员使用了堆，堆区才能被内存分配</p>
<blockquote>
<h3 id="全局-静态区"><a href="#全局-静态区" class="headerlink" title="全局&#x2F;静态区"></a>全局&#x2F;静态区</h3><p>存放静态（static）变量和全局变量</p>
<h3 id="文字常量区（只读段）"><a href="#文字常量区（只读段）" class="headerlink" title="文字常量区（只读段）"></a>文字常量区（只读段）</h3><p>只读段就是指类似const一样只允许调用而不允许修改<br>文字常量区存放的是const修饰的变量和字符串常量</p>
<h3 id="程序代码区（只读段）"><a href="#程序代码区（只读段）" class="headerlink" title="程序代码区（只读段）"></a>程序代码区（只读段）</h3><p>存放定义的函数，仅仅是存放函数而不是函数内部实现过程</p>
</blockquote>
<h2 id="值得注意的细节"><a href="#值得注意的细节" class="headerlink" title="值得注意的细节"></a>值得注意的细节</h2><blockquote>
<p>假设有数组arr1，和数组arr2<br>对数组arr1 + 1得到的就是arr[1]的地址，偏移了一个单位长度，而对&amp;arr1+1则是偏移了整个数组的长度</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr1[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr1 + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr1 + <span class="number">1</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">000000A18070F8C8</span></span><br><span class="line"><span class="comment">000000A18070F8CC</span></span><br><span class="line"><span class="comment">000000A18070F8F0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>因为是int类型数组，所以每次偏移一个单位长度移动4个字节，可以看到arr1 到arr1 + 1刚好一个单位长度，而&amp;arr1 + 1则有10个单位长度</p>
<blockquote>
<p>由const修饰的局部变量还是放在了栈区，因为局部变量的生命周期比const所在的常量区要短，const的生命周期被限制，只能放在栈区</p>
</blockquote>
<blockquote>
<p>生命周期是指一个变量在执行时存在的时间，局部变量因为是在函数中定义，在函数调用完成后就会销毁，因此局部变量的生命周期很短</p>
</blockquote>
<blockquote>
<p>比较特殊的<br>例如static修饰的变量无论是全局变量还是局部变量都是放在静态区<br>int *pint &#x3D; new int(1);&#x2F;&#x2F;由new或malloc分配的空间必定放在堆区，而pint还是根据全局还是局部来判断在哪个区</p>
</blockquote>
<h1 id="对象入门"><a href="#对象入门" class="headerlink" title="对象入门"></a>对象入门</h1><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><blockquote>
<p>&#x2F;按照事物发展的过程逐步进行<br>为了一个程序的执行，可能需要调用一个已经实现的函数<br>这个函数内部还会调用其他的函数，新调用的函数还会调用其他的函数<br>在调用函数（算法）的过程中，会进行传参，这个参数就是一个数据结构<br>面向过程的程序就是由算法与数据结构结合使用的</p>
</blockquote>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><blockquote>
<p>N个对象之间的交互，是客观现实世界正常的运行方式<br>A对象发出动作产生消息，B对象接受消息再发出对应动作<br>A对象在产生消息时，可能也存在C，D等对象也收到消息并发出动作<br>这一过程就像现实世界中各种生物之间的交互，具有多样性，也就是多态<br>面向对象的精髓就是消息传递</p>
</blockquote>
<h3 id="对象的创建关键–抽象"><a href="#对象的创建关键–抽象" class="headerlink" title="对象的创建关键–抽象"></a>对象的创建关键–抽象</h3><blockquote>
<p>对某一整体共同的特征属性和行为，将其划分为同一类，这一类就是一个对象<br>共同的特征属性就可以认为是类的数据成员，行为就是类的函数成员</p>
</blockquote>
<h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//默认为public，类之外可直接访问 </span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pay</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//protected://保护的访问权限，交给子类（派生类）访问</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span>:<span class="comment">//不允许类之外访问</span></span><br><span class="line">	string id;</span><br><span class="line">	<span class="type">int</span> money;</span><br><span class="line">	</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一般来说特征属性都是放在private内，行为都是放在public内</p>
</blockquote>
<h3 id="类的使用"><a href="#类的使用" class="headerlink" title="类的使用"></a>类的使用</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">computer</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setbrand</span><span class="params">(<span class="type">const</span> string &amp; brand)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		_brand = brand;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setprice</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp; price)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		_price = price;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;_brand&lt;&lt;endl;</span><br><span class="line">		cout&lt;&lt;_price&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	computer c1;</span><br><span class="line">	<span class="comment">//类的调用可以像结构体一样</span></span><br><span class="line">	c1.<span class="built_in">setbrand</span>(<span class="string">&quot;HUAWEI&quot;</span>);</span><br><span class="line">	c1.<span class="built_in">setprice</span>(<span class="string">&quot;10999&quot;</span>);</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为了代码规范，数据成员一般以 ‘ _ ‘ 开头</p>
</blockquote>
<blockquote>
<p>可以看到，在对象定义完成后，主函数主要是在调用对象</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>KMP算法</title>
    <url>/2023/11/16/KMP%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p>如何选择算法的关键就在于先看暴力法如何做，再去想哪种算法能够优化他</p>
<h3 id="KMP是什么"><a href="#KMP是什么" class="headerlink" title="KMP是什么"></a>KMP是什么</h3><p>一种字符串匹配算法，用于查找一个模板字符串在一串长文本里每次出现的起始下标，类似于crtl+f的功能</p>
<p>假设有数组长文本K[N],模板P[M]</p>
<p>暴力法对字符串匹配：设i作为K的下标，j作为p的下标，当K[i]与 P[0]相等时，开始匹配下个字符，否则让i++，如果连续匹配到很多个字符，但突然有一个不匹配，那么i与j都会回溯，比如K[i]和P[0]相等了，一直匹配到K[i + random],P[j + random]时匹配失败，那么i，与j都会回溯，K的下标i + random回溯到i++，j + random回溯到j &#x3D; 0</p>
<p>KMP算法就是针对这一暴力法进行优化，使得i无需回溯。通过修改j 的位置，让模式串P尽量地移动到有效的位置。</p>
<p>因此需要一个next数组使模式串能够快速移动，如果P[j]时失配了，那么就根据j对应的next[j] 使模式串跳跃，如果next[j] 为0 或 - 1，那么就跳到模式串开头位置，反之，则跳过next[j]个字符，继续匹配</p>
<p>对于如何求出next对应的值，可以看<a href="https://blog.csdn.net/v_JULY_v/article/details/7041827?ops_request_misc=%7B%22request_id%22:%22167368006216782425113096%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167368006216782425113096&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-7041827-null-null.142%5Ev71%5Econtrol_1,201%5Ev4%5Eadd_ask&utm_term=KMP&spm=1018.2226.3001.4187"> 从头到尾彻底理解KMP，串的next数组怎么算</a></p>
<p>可得到基本实现代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMPsearch</span><span class="params">(<span class="type">char</span>* s, <span class="type">char</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> slen = <span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="type">int</span> plen = <span class="built_in">strlen</span>(p);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (i slen &amp;&amp; j &lt; plen)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == p[j]) i++, j++;</span><br><span class="line">		<span class="keyword">else</span> j = next[j];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (j == plen) <span class="keyword">return</span> i - l;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以及求得next数组代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetNext</span><span class="params">(<span class="type">char</span>* p, <span class="type">int</span> ne[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> plen = <span class="built_in">strlen</span>(p);</span><br><span class="line">	ne[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">	<span class="type">int</span> k = <span class="number">-1</span>;</span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (j &lt; plen - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">-1</span> || p[j] == p[k])</span><br><span class="line">		&#123;</span><br><span class="line">			++k, ++j;</span><br><span class="line">			<span class="keyword">if</span> (p[j] != p[k])</span><br><span class="line">				ne[j] = k;</span><br><span class="line">			<span class="keyword">else</span> ne[j] = ne[k];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> k = ne[k];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体的模式串跳跃展示"><a href="#具体的模式串跳跃展示" class="headerlink" title="具体的模式串跳跃展示"></a>具体的模式串跳跃展示</h3><p><img src="https://img-blog.csdnimg.cn/6b179271c3214aaeb4f08230d298bfab.png#pic_center" alt="在这里插入图片描述"></p>
<p>开始匹配时</p>
<p>s[0] &#x3D;&#x3D; p[0],s[1] &#x3D;&#x3D; p[1], 但是s[2] !&#x3D; p[2]</p>
<p>此时j &#x3D; 2，看next[2]为多少，将模式串跳跃过next[2]个字符</p>
<p>例题代码(yxc做法)</p>
<p><img src="https://img-blog.csdnimg.cn/b8f3f2757c0243b481c7d2041657bf07.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> p[N], s[M];</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; p + <span class="number">1</span> &gt;&gt; m &gt;&gt; s + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>;i &lt;= n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">		<span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">		ne[i] = j;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//kmp匹配</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;i &lt;= m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];<span class="comment">//失配移动模式串</span></span><br><span class="line">		<span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (j == n) <span class="comment">// 匹配成功</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i - n + <span class="number">1</span>);<span class="comment">//n或j都可以</span></span><br><span class="line">				j = ne[j];</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
  </entry>
  <entry>
    <title>CSS学习</title>
    <url>/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h1><h2 id="css定义"><a href="#css定义" class="headerlink" title="css定义"></a>css定义</h2><blockquote>
<p>层叠样式表.是一种样式表语言,用来描述html文档的呈现(美化内容)</p>
<p>书写位置: title标签下方,添加style双标签,style标签内书写css代码</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/*选择器 &#123;*/</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/*css属性*/</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>体验css<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240203231125741.png" alt="image-20240203231125741"></p>
<ul>
<li>键值对:属性名和属性值成对出现,比如上述的color和font-size</li>
</ul>
<h2 id="css引入方式"><a href="#css引入方式" class="headerlink" title="css引入方式"></a>css引入方式</h2><p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240203232107220.png" alt="image-20240203232107220"></p>
<p>link<strong>引入外部样式表</strong>,stylesheet即css样式表,href为路径,和内部样式表一样放在title下引用</p>
<p>外部样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*此文件存放css代码*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;my.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>测试css<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: green;font-size: 25px;&quot;</span>&gt;</span>这是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240203232226649.png" alt="image-20240203232226649"></p>
<h2 id="标签和类"><a href="#标签和类" class="headerlink" title="标签和类"></a>标签和类</h2><blockquote>
<p>查找标签,设置样式</p>
</blockquote>
<p>基础选择器:</p>
<ul>
<li>标签选择器</li>
<li>类选择器</li>
<li>id选择器</li>
<li>通配符选择器</li>
</ul>
<h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><blockquote>
<p>使用标签名作为选择器-&gt;选中同名标签设置相同的样式</p>
</blockquote>
<p>例如:p,h1,div等等</p>
<p><strong>无法差异化同名标签的样式</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>11231<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>332314<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240203232819669.png" alt="image-20240203232819669"></p>
<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><blockquote>
<p>查找标签,差异化设置标签的显示效果</p>
</blockquote>
<p>步骤:</p>
<ul>
<li>定义类的选择器-&gt;.类名</li>
<li>使用类选择器 -&gt; 标签添加class&#x3D;”类名”</li>
</ul>
<p><strong>类选择器可以同时使用多个</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.size</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red size&quot;</span>&gt;</span>这是一个div小盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>这是一个p段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240203235208720.png" alt="image-20240203235208720"></p>
<p>类名见名知义,如果需要多个单词,可以用-连接,比如news-hd</p>
<h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><blockquote>
<p>查找标签,差异化设置标签的显示效果</p>
</blockquote>
<p><strong>id选择器一般配合JavaScript使用</strong></p>
<p>步骤:</p>
<ul>
<li>定义id选择器:#id&#x3D;”id名”</li>
<li>使用id选择器:标签添加id&#x3D;”id名 “</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span>这是一个div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204000058828.png" alt="image-20240204000058828"></p>
<h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><blockquote>
<p>查找页面所有标签,设置相同样式</p>
</blockquote>
<p>*,不需要调用,浏览器自动查找页面所有标签,设置相同的样式</p>
<p>一般用于设计初期清除标签的默认样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204000343094.png" alt="image-20240204000343094"></p>
<h2 id="画盒子"><a href="#画盒子" class="headerlink" title="画盒子"></a>画盒子</h2><blockquote>
<p>选择合适的选择器画盒子</p>
</blockquote>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204001520392.png" alt="image-20240204001520392"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.div2</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204001939340.png" alt="image-20240204001939340"></p>
<h2 id="文字控制属性"><a href="#文字控制属性" class="headerlink" title="文字控制属性"></a>文字控制属性</h2><p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204002059415.png" alt="image-20240204002059415"></p>
<h3 id="font-weight取值范围"><a href="#font-weight取值范围" class="headerlink" title="font-weight取值范围"></a>font-weight取值范围</h3><p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204002917257.png" alt="image-20240204002917257"></p>
<h3 id="font-style取值效果"><a href="#font-style取值效果" class="headerlink" title="font-style取值效果"></a>font-style取值效果</h3><p>normal 正常</p>
<p>italic 倾斜</p>
<h3 id="line-height行高"><a href="#line-height行高" class="headerlink" title="line-height行高"></a>line-height行高</h3><blockquote>
<p>设置多行文本的间距</p>
</blockquote>
<p>行高:上间距+文本高度+下间距</p>
<p>属性值:</p>
<ul>
<li><p>数字+px</p>
</li>
<li><p>数字,当前标签font-size的倍数</p>
</li>
</ul>
<p>设置行高垂直居中:让行高属性值等于盒子高度属性值,<strong>此方法只适用于单行文字</strong></p>
<h3 id="font-family字体族"><a href="#font-family字体族" class="headerlink" title="font-family字体族"></a>font-family字体族</h3><blockquote>
<p>设置文字字体</p>
</blockquote>
<p>当字体名有多个,各个字体名用逗号隔开执行顺序是从左到右依次查找可生效字体</p>
<ul>
<li>font-family属性最后设置一个字体族名,网页开发建议使用无衬线字体</li>
</ul>
<h3 id="font复合属性"><a href="#font复合属性" class="headerlink" title="font复合属性"></a>font复合属性</h3><blockquote>
<p>一次性设置多个属性</p>
</blockquote>
<p>font: font-style font-weight font-size&#x2F;line-height font-family</p>
<ul>
<li>是否倾斜 是否加粗 字号&#x2F;行高 字体(必须按顺序依次写)</li>
<li>字号和字体值必须书写</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">font: italic 700 100px/2 楷体;</span><br></pre></td></tr></table></figure>

<p>一般用于设置网络公共样式</p>
<h3 id="text-indent文本缩进"><a href="#text-indent文本缩进" class="headerlink" title="text-indent文本缩进"></a>text-indent文本缩进</h3><p>属性值:</p>
<ul>
<li>数字+px</li>
<li>数字+em(1em&#x3D;当前标签字号大小)</li>
</ul>
<h3 id="text-align对齐方式"><a href="#text-align对齐方式" class="headerlink" title="text-align对齐方式"></a>text-align对齐方式</h3><p>left,center,right分别为左对齐,居中对齐,右对齐</p>
<h3 id="图片居中"><a href="#图片居中" class="headerlink" title="图片居中"></a>图片居中</h3><p>将图片放进居中的盒子里即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://tse4-mm.cn.bing.net/th/id/OIP-C.AfnOT_AV4IS_HCpz-I4WmQHaJQ?w=180&amp;h=220&amp;c=7&amp;r=0&amp;o=5&amp;dpr=1.2&amp;pid=1.7&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">alt</span>=<span class="string">&quot;耳机图片&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">title</span>=<span class="string">&quot;air&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Xiaomi Buds 4 Pro<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: darkgray;line-height: 8px;&quot;</span>&gt;</span>48dB只能动态降噪 | 骨声纹通话降噪<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: orange;text-align: center&quot;</span>&gt;</span>999元<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: line-through;color: darkgray&quot;</span>&gt;</span>1099元<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204015351019.png" alt="image-20240204015351019"></p>
<h3 id="text-decoration文本修饰线"><a href="#text-decoration文本修饰线" class="headerlink" title="text-decoration文本修饰线"></a>text-decoration文本修饰线</h3><p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204015502531.png" alt="image-20240204015502531"></p>
<h3 id="color文字颜色"><a href="#color文字颜色" class="headerlink" title="color文字颜色"></a>color文字颜色</h3><p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204015747834.png" alt="image-20240204015747834"></p>
<h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><ul>
<li><p>f12打开调试工具</p>
</li>
<li><p>使用调试工具</p>
<p>出现相应面板</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204020624828.png" alt="image-20240204020624828">点击左上角箭头自由选择网页元素,代码中会自动强调相应部分,如果代码出现问题,会有红色的删除线标注在html或css代码中</p>
<p>点击可能出现的元素也可以查看问题</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/*浏览器默认大小为16px*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/*font-size数值必须有单位,否则不生效*/</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">line-height</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-family</span>: 华文宋体;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: cornsilk;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-family</span>: 华文新魏;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">100px</span>/<span class="number">2</span> 楷体;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>测试文字属性<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  近日，韩国现代汽车集团向美国提交意见书，指出将“受关注外国实体”从电动汽车电池供应链中剔除不现实。现代汽车针对的是1月起生效的美国《通胀削减法案》电动汽车补贴细则，不满的是细则欲将中国企业排除在电池供应链外。此项歧视性贸易保护主义措施目的很明显，就是想把电动汽车产业链拉回美国，与美国政府当前实施的半导体“脱钩”政策如出一辙。不同之处在于，美国这次“脱钩”更加困难重重，因为在电动汽车电池领域，中国企业处于绝对主导地位。也正因此，上述措施一推行就引起日韩甚至美国本国车企的阵痛和反对。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>垂直居中<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>水平居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>font属性设置<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204021317038.png" alt="image-20240204021317038"></p>
<h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><blockquote>
<p>思路</p>
<ol>
<li>从上到下,先整体再局部</li>
<li>先标签,再css美化</li>
</ol>
</blockquote>
<h3 id="新闻详情"><a href="#新闻详情" class="headerlink" title="新闻详情"></a>新闻详情</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: <span class="number">#333333</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.center</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>《中国记者》：大象新闻“豫头条”重塑地方党媒时政报道新方式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>来源: 2024-02-01 10:18:29发布于河南河南广电集团《大象新闻》官方账号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>央视网消息:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  新传播形势下，如何做出受众愿意看、看得懂、主动转的时政报道？面对愈加年轻的新生代读者群体，如何站稳百姓视角，解读好一省发展大计？对于地方党媒来说，在移动传播场景下，保持年轻态，这是一个事关未来发展的核心命题。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://inews.gtimg.com/om_bt/OJtA49qys9Klrjed-kHUxi5xESpOGyRuR_K5PDOrK8L4IAA/641&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;新闻报&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">title</span>=<span class="string">&quot;中国记者报导&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://inews.gtimg.com/om_bt/OkHcMrQmp56ob5bmegjCcrf5gvw6X3Ngk5ZZua8PEm7UMAA/641&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;新闻报&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">title</span>=<span class="string">&quot;中国记者报导&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2022年9月，河南广播电视台大象新闻集合优势兵力，面向移动端，创立了时政品牌栏目“豫头条”，重塑地方党媒时政报道方式。作为主打“年轻”的时政新媒体栏目，一年多来，“豫头条”以“河南新闻联播”为基础，以新视角、新思考探寻时政新闻新表达，更深一度观察河南政经大势。在众声喧哗的舆论场上，“豫头条”以角度赢得流量、以深度彰显质量、以温度成就分量，更以态度让出彩成为常量，在新媒体端收获了大批年轻粉丝。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在各类新闻类型中，时政新闻天然与网民有距离，若在做新媒体时还是一副长者相、满是说教腔，势必不会受到年轻网友的关注。如何让时政新闻年轻起来，也像民生新闻那样成为频频刷屏的爆款？这是地方党媒共同面对的问题，也是大象新闻在打造“豫头条”栏目过程中，所探寻的方向。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://inews.gtimg.com/om_bt/OpucN7vjYi9jDkHjn4vwpLlUklq2DlJFzQGxDxhDlV7_IAA/641&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204022537600.png" alt="image-20240204022537600"></p>
<h3 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#333333</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#444</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#0069c2</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#444</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS：(层叠样式表)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>层叠样式表（Cascading Style Sheets，缩写为 CSS）是一种<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>样式表<span class="tag">&lt;/<span class="name">a</span>&gt;</span>语言，用来描述 HTML 或 XML（包括如 SVG、MathML 或 XHTML 之类的 XML 分支语言）文档的呈现方式。CSS 描述了在屏幕、纸质、音频等其他媒体上的元素应该如何被渲染的问题。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>CSS 是开放 Web 的核心语言之一<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>，并根据 W3C 规范在 Web 浏览器中进行了标准化。以前，CSS 规范的各个部分的开发是同步进行的，这种方式允许对最新推荐的 CSS 版本进行控制。你可能已经听说过 CSS1、CSS2.1 甚至 CSS3。但是以后将不会再有 CSS3 或者 CSS4；相反，现在的一切都是没有版本号的 CSS。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS 介绍:如果你是 Web 开发的新手，请务必阅读我们的 CSS 基础文章以学习 CSS 的含义和用法。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS 教程:我们的 CSS 学习区包含了丰富的教程，它们覆盖了全部基础知识，能使你在 CSS 之路上从初出茅庐到游刃有余。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS 参考:我们针对资深 Web 开发者编写的<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>详细参考手册<span class="tag">&lt;/<span class="name">a</span>&gt;</span>，描述了 CSS 的各个属性与概念。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204023422841.png" alt="image-20240204023422841"></p>
<h1 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h1><blockquote>
<p>由两个或多个基础选择器,通过不同的方式组合而成</p>
</blockquote>
<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><blockquote>
<p>选中某元素的后代元素</p>
</blockquote>
<p>写法: 父选择器 子选择器{属性},父子选择器用空格隔开</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  这是div儿子<span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是孙子span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204181256954.png" alt="image-20240204181256954"></p>
<h2 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h2><blockquote>
<p>选择某元素的子代元素</p>
</blockquote>
<p>写法:父选择器 &gt; 子选择器,父子选择器用&gt;隔开</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span>&gt;<span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  这是div儿子<span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是孙子span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204181501029.png" alt="image-20240204181501029"></p>
<h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><blockquote>
<p>选择多种标签设置相同的样式</p>
</blockquote>
<p>写法:选择器1,选择器2,…,选择器n{选择器属性},选择器之间用,隔开</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        ;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204191319169.png" alt="image-20240204191319169"></p>
<h2 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h2><blockquote>
<p>选中同时满足多个条件的元素</p>
</blockquote>
<p>写法:选择器1选择器2{css属性},选择器之间连写 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#0076ce</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用p标签的同时使用box类选择器生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>p标签,使用box类选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>div,标签,使用box类选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204191837644.png" alt="image-20240204191837644"></p>
<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><blockquote>
<p>伪类表示元素状态,选中元素的某个状态设置样式</p>
</blockquote>
<p>鼠标悬停状态: 选择器:hover{CSS属性}</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>鼠标悬停测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>鼠标悬停测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204192702380.png" alt="image-20240204192702380"></p>
<h3 id="伪类超链接"><a href="#伪类超链接" class="headerlink" title="伪类超链接"></a>伪类超链接</h3><p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204193147009.png" alt="image-20240204193147009"></p>
<p>如果要给超链接设置以上四个状态,要按照LVHA的顺序书写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#0076ce</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a标签,测试伪类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204193542794.png" alt="image-20240204193542794"></p>
<h2 id="CSS特性"><a href="#CSS特性" class="headerlink" title="CSS特性"></a>CSS特性</h2><ul>
<li><p>继承性</p>
<blockquote>
<p>子级默认继承父级的文字控制属性</p>
</blockquote>
<p>如果标签有自己的相应属性,则不继承对应的属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是h1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>这是a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204195340806.png" alt="image-20240204195340806"></p>
</li>
<li><p>层叠性</p>
<ul>
<li><p>相同的属性会覆盖:后面的CSS属性覆盖前面的CSS属性</p>
</li>
<li><p>不同的属性会叠加:不同的CSS属性都生效</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204195135203.png" alt="image-20240204195135203"></p>
</li>
</ul>
</li>
<li><p>优先级</p>
<blockquote>
<p>权重,当一个标签使用了多种选择器时,	基于不同种类的选择器的匹配规则</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>这是div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>规则:<img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204195858740.png" alt="image-20240204195858740"></p>
<p>选择器标签选中的范围越大,优先级越低</p>
</li>
</ul>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204195815241.png" alt="image-20240204195815241"></p>
<h3 id="优先级叠加计算规则"><a href="#优先级叠加计算规则" class="headerlink" title="优先级叠加计算规则"></a>优先级叠加计算规则</h3><blockquote>
<p>如果是复合选择器,则需要权重叠加计算</p>
</blockquote>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204200620699.png" alt="image-20240204200620699"></p>
<h2 id="Emmet写法"><a href="#Emmet写法" class="headerlink" title="Emmet写法"></a>Emmet写法</h2><blockquote>
<p>vscode代码的简写方法,输入缩写会自动生成相应代码</p>
<p>webstorm下载emmet everywhere插件,通过tab键生成对应代码</p>
</blockquote>
<ul>
<li><p>html</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204202609522.png" alt="image-20240204202609522"></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--.box--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--span.box--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--span#box--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--span+p--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--span&gt;p--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--span*3--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--span&#123;111&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>111<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>css</p>
<blockquote>
<p>css一般以属性首字母生成对应代码</p>
</blockquote>
</li>
</ul>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/*    w*/</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="comment">/*    h30*/</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="comment">/*    bgc*/</span></span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="comment">/*    w500+h300+bgc*/</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><h3 id="拆分写法"><a href="#拆分写法" class="headerlink" title="拆分写法"></a>拆分写法</h3><p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204204640207.png" alt="image-20240204204640207"></p>
<ul>
<li><p>background-repeat</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204205201962.png" alt="image-20240204205201962"></p>
</li>
<li><p>background-position</p>
<ul>
<li><p>关键字</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204205839520.png" alt="image-20240204205839520"></p>
</li>
<li><p>坐标(数字+px,正负都可以)</p>
</li>
</ul>
</li>
<li><p>background-size</p>
<ul>
<li><p>关键字</p>
<p>cover:等比例缩放直到完全覆盖背景区,可能图片部分看不见</p>
<p>contain:等比例缩放直到完全装入背景区,可能背景区部分空白</p>
</li>
<li><p>百分比;根据盒子尺寸计算大小</p>
<p>100%时图片的宽度与盒子宽度相等</p>
</li>
<li><p>数字+单位:px</p>
</li>
</ul>
</li>
<li><p>background-attachment</p>
<p>背景不会随着元素内容滚动(拖拽滚动条,背景不动)</p>
</li>
</ul>
<h3 id="复合属性"><a href="#复合属性" class="headerlink" title="复合属性"></a>复合属性</h3><p>属性值:背景色 背景图 背景平铺 背景位置&#x2F;背景缩放 背景固定(空格隔开,不区分顺序)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*背景图默认平铺效果,即图片过小不足以达到尺寸时自动复制几张填充*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://lupic.cdn.bcebos.com/20200412/3059475153_14_747_533.jpg</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*如果只写一个关键字,另一个默认居中*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*关键字可以颠倒顺序*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-position</span>: center center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204211939279.png" alt="image-20240204211939279"></p>
<h2 id="显示模式"><a href="#显示模式" class="headerlink" title="显示模式"></a>显示模式</h2><blockquote>
<p>布局网页的时候,根据标签的显示模式选择合适的标签摆放内容</p>
</blockquote>
<ul>
<li>块级元素<ul>
<li>独占一行</li>
<li>宽度默认是父级的100%</li>
<li>添加宽高属性生效</li>
</ul>
</li>
<li>行内元素<ul>
<li>一行共存多个</li>
<li>由内容撑开尺寸</li>
<li>宽高不生效</li>
</ul>
</li>
<li>行内块元素<ul>
<li>一行共存多个</li>
<li>尺寸由内容撑开</li>
<li>宽高生效</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.div2</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.span1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.span2</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--块元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div标签2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--行内元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>span标签1111<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span2&quot;</span>&gt;</span>span标签2222<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--行内块元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ts1.cn.mm.bing.net/th?id=ORMS.be86f8b8e006d658c5f6051b1a506622&amp;pid=Wdp&amp;w=300&amp;h=156&amp;qlt=90&amp;c=1&amp;rs=1&amp;dpr=1.2187498807907104&amp;p=0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ts1.cn.mm.bing.net/th?id=ORMS.be86f8b8e006d658c5f6051b1a506622&amp;pid=Wdp&amp;w=300&amp;h=156&amp;qlt=90&amp;c=1&amp;rs=1&amp;dpr=1.2187498807907104&amp;p=0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="转换显示模式"><a href="#转换显示模式" class="headerlink" title="转换显示模式"></a>转换显示模式</h3><p>属性名 display</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204214404783.png" alt="image-20240204214404783"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.div2</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.span1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.span2</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--块元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div标签2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--行内元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>span标签1111<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span2&quot;</span>&gt;</span>span标签2222<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--行内块元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ts1.cn.mm.bing.net/th?id=ORMS.be86f8b8e006d658c5f6051b1a506622&amp;pid=Wdp&amp;w=300&amp;h=156&amp;qlt=90&amp;c=1&amp;rs=1&amp;dpr=1.2187498807907104&amp;p=0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ts1.cn.mm.bing.net/th?id=ORMS.be86f8b8e006d658c5f6051b1a506622&amp;pid=Wdp&amp;w=300&amp;h=156&amp;qlt=90&amp;c=1&amp;rs=1&amp;dpr=1.2187498807907104&amp;p=0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204214710850.png" alt="image-20240204214710850"></p>
<h2 id="综合案例-1"><a href="#综合案例-1" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="热词"><a href="#热词" class="headerlink" title="热词"></a>热词</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">	<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#3064bb</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#608dd9</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>React<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204221008288.png" alt="image-20240204221008288"></p>
<h3 id="banner效果"><a href="#banner效果" class="headerlink" title="banner效果"></a>banner效果</h3> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: <span class="number">#f3f3f4</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://upload.shejihz.com/2020/02/dc3f75d941d12dafa7a3a9f2f7e13b29.jpg</span>);</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-position</span>: left bottom;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-size</span>: contain;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*继承给子级*/</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">125px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: orangered;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>让创造产生价值<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我们希望小游戏平台可以提供无限的可能性,让每一个创造者都可以将他们的才华和创意传递给用户.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我要报名<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240204222851589.png" alt="image-20240204222851589"></p>
<h1 id="选择器拓展"><a href="#选择器拓展" class="headerlink" title="选择器拓展"></a>选择器拓展</h1><h2 id="结构伪类效果"><a href="#结构伪类效果" class="headerlink" title="结构伪类效果"></a>结构伪类效果</h2><blockquote>
<p>根据元素的结构关系查找元素</p>
</blockquote>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207184310933.png" alt="image-20240207184310933"></p>
<ul>
<li><p>nth-child公式</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207184842879.png" alt="image-20240207184842879"></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: mediumspringgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: beige;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n+<span class="number">5</span>)<span class="selector-pseudo">:nth-child</span>(-n+<span class="number">8</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207185554491.png" alt="image-20240207185554491"></p>
<h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><blockquote>
<p>创建虚拟元素(伪元素),用来摆放装饰性内容</p>
</blockquote>
<p>​	<img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207185808100.png" alt="image-20240207185808100"></p>
<ul>
<li>必须设置content:””属性,用来设置伪元素的内容,如果没有内容,引号留空</li>
<li>伪元素默认是行内显示模式</li>
<li>权重和标签选择器相同</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: brown;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;老鼠&quot;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;大米&quot;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>爱<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="PxCook"><a href="#PxCook" class="headerlink" title="PxCook"></a>PxCook</h1><p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207195129582.png" alt="image-20240207195129582"></p>
<p>相关操作请查阅视频</p>
<h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><blockquote>
<p>布局网页,摆放盒子和内容</p>
</blockquote>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207201542022.png" alt="image-20240207201542022"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">	  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207204025019.png" alt="image-20240207204025019"></p>
<h2 id="边框线"><a href="#边框线" class="headerlink" title="边框线"></a>边框线</h2><p>属性:</p>
<p>像素大小 线条 颜色</p>
<p>线条</p>
<ul>
<li>实线solid</li>
<li>虚线dashed</li>
<li>点线dotted\</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> dotted red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div 标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207205442281.png" alt="image-20240207205442281"></p>
<h3 id="单方向边框线"><a href="#单方向边框线" class="headerlink" title="单方向边框线"></a>单方向边框线</h3><p>属性名:border-方位名top,bottom,right,left</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom</span>: <span class="number">5px</span> dotted green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-right</span>: <span class="number">2px</span> dashed red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left</span>: <span class="number">10px</span> solid orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div 标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207205758547.png" alt="image-20240207205758547"></p>
<h2 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h2><blockquote>
<p>设置内容与盒子之间的距离</p>
</blockquote>
<p>属性名:padding&#x2F;padding-方位名词</p>
<p><strong>多值写法</strong>: 	<img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207210653504.png" alt="image-20240207210653504"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*padding: 20px;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*padding-top: 10px;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*padding-right: 20px;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*padding-bottom: 40px;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*padding-left: 80px;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div 标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207210957011.png" alt="image-20240207210957011"></p>
<h2 id="尺寸计算"><a href="#尺寸计算" class="headerlink" title="尺寸计算"></a>尺寸计算</h2><blockquote>
<p> 盒子尺寸&#x3D;内容尺寸+border尺寸+内边距尺寸</p>
</blockquote>
<p>给盒子加border或者padding属性会增大盒子尺寸</p>
<p>方法:</p>
<ol>
<li>手动做减法</li>
<li>内减模式:box-sizing: border-box</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207212800116.png" alt="image-20240207212800116"></p>
<h2 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h2><blockquote>
<p>拉开两个盒子之间的距离</p>
</blockquote>
<p>属性名:margin</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*margin: 50px;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*margin: 10px 20px 30px 40px;*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*版心居中*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>版心内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207214353726.png" alt="image-20240207214353726"></p>
<p><strong>版心居中需要盒子具有宽度属性</strong></p>
<h2 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h2><blockquote>
<p>清除标签默认样式,比如:默认的内外间距</p>
</blockquote>
<p>方法:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">/* 去掉列表符号 */</span><br><span class="line">li &#123;</span><br><span class="line">	list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="overflow属性"><a href="#overflow属性" class="headerlink" title="overflow属性"></a>overflow属性</h2><blockquote>
<p>控制溢出元素的内容显示方式</p>
</blockquote>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207215752036.png" alt="image-20240207215752036"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出 内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出 内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出内容溢出</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207220044891.png" alt="image-20240207220044891"></p>
<h2 id="外边距合并-塌陷现象"><a href="#外边距合并-塌陷现象" class="headerlink" title="外边距合并,塌陷现象"></a>外边距合并,塌陷现象</h2><h3 id="合并现象"><a href="#合并现象" class="headerlink" title="合并现象"></a>合并现象</h3><blockquote>
<p>垂直排列的兄弟元素,上下margin会合并</p>
<p>最后会选择margin中最大的那一个生效</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207220645993.png" alt="image-20240207220645993"></p>
<h3 id="塌陷现象"><a href="#塌陷现象" class="headerlink" title="塌陷现象"></a>塌陷现象</h3><blockquote>
<p>父子级的标签,子级添加上外边距会产生塌陷问题</p>
<p>导致父级一起向下移动</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207221350692.png" alt="image-20240207221350692"></p>
<p><strong>解决方法</strong>:</p>
<ul>
<li>取消子级margin,父级设置padding</li>
<li>父级设置overflow:hidden</li>
<li>父级设置border-top</li>
</ul>
<p>overflow和bdt都是让浏览器找到父级的正确边缘位置,从来改正</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*padding-top: 50px;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*overflow: hidden;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207222114586.png" alt="image-20240207222114586"></p>
<h2 id="行内元素内外边距问题"><a href="#行内元素内外边距问题" class="headerlink" title="行内元素内外边距问题"></a>行内元素内外边距问题</h2><blockquote>
<p>行内元素添加margin和padding,无法改变元素垂直位置</p>
<p>解决方法:给行内元素添加line-height	可以改变垂直位置</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>仅改变了水平的margin,垂直没有变化</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207222448681.png" alt="image-20240207222448681"></p>
<p><strong>解决</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207222606876.png" alt="image-20240207222606876"></p>
<h2 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h2><blockquote>
<p>设置元素的外边框为圆角</p>
</blockquote>
<p>属性名:border-radius</p>
<p>属性值:数字+px &#x2F; 百分比,数值意为圆角半径</p>
<p>和padding一样可以多值赋值:二角或三角赋值时,对角相等赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207223810339.png" alt="image-20240207223810339"></p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>​	<img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207224414638.png" alt="image-20240207224414638"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#7fffd4</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://8.140.253.116/img/avatar.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>直达github<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207225336190.png" alt="image-20240207225336190"></p>
<h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><blockquote>
<p>给元素设置阴影效果</p>
</blockquote>
<p>属性名: box-shadow</p>
<p>属性值:x轴偏移量 y轴偏移量 模糊半径 扩散半径 颜色 内外阴影</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240207225629185.png" alt="image-20240207225629185"></p>
<h2 id="综合案例-2"><a href="#综合案例-2" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="CSS书写顺序-加快访问速度"><a href="#CSS书写顺序-加快访问速度" class="headerlink" title="CSS书写顺序(加快访问速度)"></a><strong>CSS书写顺序</strong>(加快访问速度)</h3><ol>
<li>盒子模型属性</li>
<li>文字样式</li>
<li>圆角,阴影等修饰属性</li>
</ol>
<h3 id="产品卡片-个人卡片"><a href="#产品卡片-个人卡片" class="headerlink" title="产品卡片    个人卡片"></a><del>产品卡片</del>    个人卡片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>个人卡片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.personal</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">354px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">424px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">box-shadow</span>: -<span class="number">2px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.avatar</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">136px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">136px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span><span class="selector-class">.personal</span> &gt; <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-top</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-bottom</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span><span class="selector-class">.personal</span> &gt; <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: auto <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.github</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">90px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background</span>: <span class="number">#7fffd4</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.icon</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: auto <span class="number">11px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span><span class="selector-class">.github</span> &gt; <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;personal&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://8.140.253.116/img/avatar.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;这是头像&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是头像&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>niepandou<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>42<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>13<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;github&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ts1.cn.mm.bing.net/th?id=ODLS.05ef88bd-5ada-40d4-892e-a7718a9bf1ce&amp;w=32&amp;h=32&amp;qlt=90&amp;pcl=fffffa&amp;o=6&amp;pid=1.2&quot;</span>&gt;</span>直达github<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://ts1.cn.mm.bing.net/th?id=ODLS.05ef88bd-5ada-40d4-892e-a7718a9bf1ce&amp;w=32&amp;h=32&amp;qlt=90&amp;pcl=fffffa&amp;o=6&amp;pid=1.2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://ts2.cn.mm.bing.net/th?id=OIP-C.3Vfua3wP9IgKLmBLpiflnAD8D3&amp;w=252&amp;h=247&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.2&amp;pid=3.1&amp;rm=2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://ts1.cn.mm.bing.net/th?id=OIP.AQhGsZG10tN_YgvsGDxR6gHaHa&amp;w=298&amp;h=204&amp;c=12&amp;rs=1&amp;qlt=99&amp;pcl=faf9f7&amp;o=6&amp;dpr=1.2&amp;pid=MultiSMRSV2Source&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://tse3-mm.cn.bing.net/th/id/OIP-C.ELDLtNxcwkvZp3qkNJG2GgAAAA?w=211&amp;h=211&amp;c=7&amp;r=0&amp;o=5&amp;dpr=1.2&amp;pid=1.7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208002208837.png" alt="image-20240208002208837"></p>
<h3 id="新浪新闻"><a href="#新浪新闻" class="headerlink" title="新浪新闻"></a>新浪新闻</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.news</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">360px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*background-color: pink;*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.news</span> <span class="selector-class">.hd</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">34px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bdbee1</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-left</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.hd</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-top</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">34px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-top</span>: <span class="number">3px</span> solid <span class="number">#ff8400</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#bdbee1</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">line-height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.news</span> <span class="selector-class">.bd</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.news</span> <span class="selector-class">.bd</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;#&quot;</span>);</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-position</span>: <span class="number">0</span> center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.news</span> <span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;#&quot;</span>) no-repeat <span class="number">0</span> center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">line-height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.news</span> <span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: <span class="number">#ff8400</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  标题--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  内容--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>北京招聘网页设计，平面设计，php<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>体验javascript的魅力<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>jquery世界来临<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>网页设计师的梦想<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>jquery中的链式编程是什么<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208005247536.png" alt="image-20240208005247536"></p>
<h1 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h1><blockquote>
<p>标准流也叫文档流,指的是标签在页面中默认的排布规则,例如:块元素独占一行,	行内元素可以一行显示多个</p>
</blockquote>
<h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><blockquote>
<p>让块元素水平排列</p>
</blockquote>
<p>属性名: float</p>
<p>属性值:left左对齐</p>
<p>​			right右对齐</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: brown;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于添加了float属性的块元素,脱离了标准流的控制,在其他标准盒子中,浮动元素并不存在</p>
<p>因此可能发生两个盒子合并覆盖的情况</p>
</blockquote>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208183111680.png" alt="image-20240208183111680"></p>
<ul>
<li>浮动盒子特点<ul>
<li>顶对齐</li>
<li>具备行内块特点</li>
<li>脱标</li>
</ul>
</li>
</ul>
<h2 id="产品区域布局"><a href="#产品区域布局" class="headerlink" title="产品区域布局"></a>产品区域布局</h2><p>​	</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.product</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">1226px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">628px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">          </span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">234px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">628px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">978px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">628px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: brown;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-right</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-bottom</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/*li和盒子右边距有一定边距,不能够放下,超出导致每行只有三个*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">234px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/*单独拿出去掉li右边距*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>n) &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--版心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208183039390.png" alt="image-20240208183039390"></p>
<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><blockquote>
<p>浮动元素会脱标,如果父级没有高度,子级无法撑开父级高度</p>
<p>解决办法: 清除浮动</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.top</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/*height: 300px;*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: brown;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">950px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208185111224.png" alt="image-20240208185111224"></p>
<p>解决方案:</p>
<ul>
<li><p>额外标签法: 在父元素内容的最后添加一个块级元素,设置CSS属性clear: both</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.top</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/*height: 300px;*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: brown;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">950px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>单伪元素法:在父元素内容最后添加一个块级元素</p>
</li>
</ul>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>双伪元素法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line">      <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">          <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">          <span class="attribute">display</span>: table;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">          <span class="attribute">clear</span>: both;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">/* before伪元素解决外边距塌陷问题 */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>overflow</p>
<p>父元素添加overflow:hidden</p>
</li>
</ul>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208192419291.png" alt="image-20240208192419291"></p>
<h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208192658061.png" alt="image-20240208192658061"></p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208200500101.png" alt="image-20240208200500101"></p>
<p>浮动网页(产生脱标问题)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*display: flex;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*justify-content: space-between;*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*height: 300px;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208193505185.png" alt="image-20240208193505185"></p>
<p>flex网页布局</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*height: 300px;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*float: left;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*margin: 50px;*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208193418937.png" alt="image-20240208193418937"></p>
<h2 id="flex组成"><a href="#flex组成" class="headerlink" title="flex组成"></a>flex组成</h2><blockquote>
<p>设置方式: 给父元素设置display:flex,子元素可以自动挤压或拉伸</p>
</blockquote>
<p><strong>组成部分</strong></p>
<ul>
<li>弹性容器</li>
<li>弹性盒子</li>
<li>主轴: 默认在水平方向</li>
<li>侧轴&#x2F;交叉轴: 默认在垂直方向</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*主轴水平方向,因此水平放置*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208194854909.png" alt="image-20240208194854909"></p>
<p>当div盒子足够多时</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>盒子大小与设置不符,自动进行了挤压</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208194947228.png" alt="image-20240208194947228"></p>
<p>当没有高度限制时</p>
<p>盒子拉伸到父级大小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="comment">/*height: 100px;*/</span></span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208195045201.png" alt="image-20240208195045201"></p>
<h2 id="主轴对齐方式"><a href="#主轴对齐方式" class="headerlink" title="主轴对齐方式"></a>主轴对齐方式</h2><p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208200807779.png" alt="image-20240208200807779"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/*justify-content: flex-start;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*justify-content: flex-end;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*justify-content: center;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*弹性盒子之间间距相等*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*justify-content: space-between;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*空白区域均分在盒子两侧*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*justify-content: space-around;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*空白区域均分*/</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">justify-content</span>: space-evenly;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208202800549.png" alt="image-20240208202800549"></p>
<h2 id="侧轴对齐方式"><a href="#侧轴对齐方式" class="headerlink" title="侧轴对齐方式"></a>侧轴对齐方式</h2><ul>
<li>align-items: 控制所有弹性盒子侧轴对齐方式(给弹性容器设置)</li>
<li>align-self: 控制单个弹性盒子侧轴对齐方式(给弹性盒子设置)</li>
</ul>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208202943490.png" alt="image-20240208202943490"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/*align-items: stretch;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*align-items: center;  */</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*align-items: flex-start;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">align-items</span>: flex-end;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208203530003.png" alt="image-20240208203530003"></p>
<h2 id="修改主轴方向"><a href="#修改主轴方向" class="headerlink" title="修改主轴方向"></a>修改主轴方向</h2><p>属性名:flex-direction</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208203707891.png" alt="image-20240208203707891"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://tse2-mm.cn.bing.net/th/id/OIP-C.ldEoLaoDu5Y1LjGmn5e15gHaH-?w=169&amp;h=182&amp;c=7&amp;r=0&amp;o=5&amp;dpr=1.2&amp;pid=1.7&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>媒体<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208204341065.png" alt="image-20240208204341065"></p>
<h2 id="弹性伸缩比"><a href="#弹性伸缩比" class="headerlink" title="弹性伸缩比"></a>弹性伸缩比</h2><blockquote>
<p>控制弹性盒子的主轴方向的尺寸</p>
</blockquote>
<p>属性名: flex</p>
<p>属性值: 整数,表示占用父级剩余尺寸的分数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">flex</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2号和3号形成1:2的比例</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208205433164.png" alt="image-20240208205433164"></p>
<h2 id="弹性换行"><a href="#弹性换行" class="headerlink" title="弹性换行"></a>弹性换行</h2><blockquote>
<p>弹性盒子可以自动挤压或拉伸,默认情况下,	所有弹性盒子在一行显示</p>
</blockquote>
<p>属性名:flex-wrap</p>
<p>属性值:</p>
<ul>
<li>wrap换行</li>
<li>nowrap 不换行(默认)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">          </span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>wrap</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208205902089.png" alt="image-20240208205902089"></p>
<p>nowrap</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208212152383.png" alt="image-20240208212152383">	</p>
<h2 id="行对齐方式"><a href="#行对齐方式" class="headerlink" title="行对齐方式"></a>行对齐方式</h2><blockquote>
<p>设置每一行的排列方式</p>
<p>前提: wrap值生效</p>
</blockquote>
<p>属性名: align-content</p>
<p>和主轴对齐方式的属性值相同</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/*align-content: flex-start;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*align-content: flex-end;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*align-content: center;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*align-content: space-between;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*align-content: space-around;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">align-content</span>: space-evenly;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208213025122.png" alt="image-20240208213025122"></p>
<h2 id="综合案例-3"><a href="#综合案例-3" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="抖音解决方案"><a href="#抖音解决方案" class="headerlink" title="抖音解决方案"></a>抖音解决方案</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">418px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-content</span>: space-between;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">90px</span> <span class="number">40px</span> <span class="number">90px</span> <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">418px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">88px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*background-color: pink;*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.pic</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">88px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">88px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.text</span> <span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.text</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://bpic.588ku.com/element_origin_min_pic/19/06/25/842fd9385dff9b43e99b183d0d165b5b.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>python将word文件转换成pdf文件<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>此方法适用于linux和Windows环境，方法一只适用于Windows环境。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://bpic.588ku.com/element_origin_min_pic/19/06/25/842fd9385dff9b43e99b183d0d165b5b.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>数据结构与算法：图论<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>图的难点主要在于图的表达形式非常多，即数据结构实现的形式很多。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://bpic.588ku.com/element_origin_min_pic/19/06/25/842fd9385dff9b43e99b183d0d165b5b.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>JavaScript 设计模式之单例模式<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>单例模式我们在日常使用中还是非常多的，比如常见的 jQuery，prototype，vue等都是属于单例模式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://bpic.588ku.com/element_origin_min_pic/19/06/25/842fd9385dff9b43e99b183d0d165b5b.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>23种设计模式之单例模式<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>单例模式是一种创建型设计模式，它的核心思想是保证一个类只有一个实例，并提供一个全局访问点来访问这个实例。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240208221454677.png" alt="image-20240208221454677"></p>
<h1 id="学成在线项目"><a href="#学成在线项目" class="headerlink" title="学成在线项目"></a>学成在线项目</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><blockquote>
<p>网站根目录是存放网站的第一层文件夹,内部包含当前网站的所有素材,包含html,css,图片,JavaScript等</p>
</blockquote>
<ul>
<li><p>根目录</p>
<ul>
<li><p>images文件夹:固定使用的图片素材,例如logo,样品修饰图</p>
</li>
<li><p>uploads文件夹:非固定使用的图片素材,例如商品图,宣传图</p>
</li>
<li><p>css文件夹:存放css文件</p>
<ul>
<li>base.css:基础公共样式,清除默认样式,设置网页基本样式</li>
<li>index.css:首页css样式</li>
</ul>
</li>
<li><p>index.html:首页</p>
</li>
</ul>
</li>
</ul>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240218000833542.png" alt="image-20240218000833542"></p>
<h3 id="版心效果"><a href="#版心效果" class="headerlink" title="版心效果"></a>版心效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="网页制作思路"><a href="#网页制作思路" class="headerlink" title="网页制作思路"></a>网页制作思路</h2><ol>
<li>布局思路</li>
</ol>
<blockquote>
<p>先整体再局部,从外到内,从上到下,从左到右</p>
</blockquote>
<ol start="2">
<li><p>css实现思路</p>
<blockquote>
<ol>
<li>画盒子,调整盒子范围-&gt;宽高背景色</li>
<li>调整盒子位置-&gt;flex布局,内外边距</li>
<li>控制图片,文字内容样式</li>
</ol>
</blockquote>
</li>
</ol>
<h2 id="header区域"><a href="#header区域" class="headerlink" title="header区域"></a>header区域</h2><h3 id="整体布局"><a href="#整体布局" class="headerlink" title="整体布局"></a>整体布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">29px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--logo--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span>logo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导航--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>nav<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--搜索--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span>search<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>功能</p>
<blockquote>
<p>单击跳转到首页</p>
<p>搜索引擎优化: 提升网站百度搜索排名</p>
</blockquote>
<p>实现方法</p>
<blockquote>
<p>标签结构: h1 &gt; a &gt; 网站名称(搜索关键字)</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">195px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">41px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/logo.png</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*文字隐藏*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--logo--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>学成在线<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><p>功能</p>
<blockquote>
<p>单击跳转页面</p>
</blockquote>
<p>实现方法</p>
<blockquote>
<p>标签结构: ul &gt; li*3 &gt; a</p>
<p>避免堆砌a标签,网站搜索排名降级</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">102px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">27px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">19px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-class">.active</span>,</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导航--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>课程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>职业规划<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="搜索区域"><a href="#搜索区域" class="headerlink" title="搜索区域"></a>搜索区域</h3><p>标签结构</p>
<blockquote>
<p>.search &gt;input+a&#x2F;button</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*搜索*/</span></span><br><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">64px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">19px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">12px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">412px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f3f5f7</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="comment">/*设置弹性伸缩比,将剩余尺寸全部给input*/</span></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">    <span class="comment">/*去处焦点框*/</span></span><br><span class="line">    <span class="comment">/*焦点框为选中当前元素时的边框*/</span></span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*placeholder文字属性*/</span></span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*父级为flex布局,那么子级为弹性盒子*/</span></span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/btn.png</span>);</span><br><span class="line"></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--搜索--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入关键词&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>标签结构</p>
<blockquote>
<p>.user &gt;a&gt;img+span</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.user</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">32px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.user</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="comment">/*专门用来处理行内块和行内元素垂直方向对齐方式*/</span></span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.user</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用户--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/user.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;用户&quot;</span> <span class="attr">title</span>=<span class="string">&quot;用户头像&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>涅槃豆<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="banner区域"><a href="#banner区域" class="headerlink" title="banner区域"></a>banner区域</h2><h3 id="整体布局-1"><a href="#整体布局-1" class="headerlink" title="整体布局"></a>整体布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*banner区域*/</span></span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1c036c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/banner2.png</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="attr">--banner</span>区域--&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;banner&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">left</span>&quot;&gt;<span class="number">1</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">right</span>&quot;&gt;<span class="number">1</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="左侧导航"><a href="#左侧导航" class="headerlink" title="左侧导航"></a>左侧导航</h3><p>标签结构</p>
<blockquote>
<p>.left&gt;ul&gt;li*9&gt;a</p>
</blockquote>
<p>a默认状态为白色右箭头</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">191px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.30</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.left</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">46px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">46px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: darkgray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.left</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">    <span class="attribute">color</span>: darkgray;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.left</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.left</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>后端开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>移动开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>人工智能<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商业预测<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云计算&amp;大数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>运维&amp;测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>UI设计<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="右侧课程表"><a href="#右侧课程表" class="headerlink" title="右侧课程表"></a>右侧课程表</h3><p>标签结构</p>
<blockquote>
<p>.right &gt;h3+.content</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*右侧课程表*/</span></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">218px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">305px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#9bceea</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">16px</span> auto <span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">97px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">font-stretch</span>: normal;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">257px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.right</span> <span class="selector-tag">dl</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.right</span> <span class="selector-tag">dt</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.right</span> <span class="selector-tag">dd</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.right</span> <span class="selector-tag">dd</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.right</span> <span class="selector-tag">dd</span> <span class="selector-tag">strong</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#7d7d7d</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.right</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--课程表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我的课程表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dt</span>&gt;</span>程序语言设计<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>正在学习<span class="tag">&lt;/<span class="name">span</span>&gt;</span>-<span class="tag">&lt;<span class="name">strong</span>&gt;</span>使用对象2<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dt</span>&gt;</span>程序语言设计<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>正在学习<span class="tag">&lt;/<span class="name">span</span>&gt;</span>-<span class="tag">&lt;<span class="name">strong</span>&gt;</span>IO流5<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dt</span>&gt;</span>HTML+CSS<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>正在学习<span class="tag">&lt;/<span class="name">span</span>&gt;</span>-<span class="tag">&lt;<span class="name">strong</span>&gt;</span>学成在线项目7<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>全部课程<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="精品推荐"><a href="#精品推荐" class="headerlink" title="精品推荐"></a>精品推荐</h2><p>标签结构</p>
<blockquote>
<p>.recommend&gt;h3+ul+a.modify</p>
<p>flex布局</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*精品推荐*/</span></span><br><span class="line"><span class="selector-class">.recommend</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">11px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">118</span>, <span class="number">118</span>, <span class="number">118</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recommend</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*除去标题和修改兴趣的尺寸,剩余的都给ul 实现了修改兴趣在最右侧的效果*/</span></span><br><span class="line"><span class="selector-class">.recommend</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.recommend</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.recommend</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-last-child</span>(-n+<span class="number">1</span>) <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.recommend</span> <span class="selector-class">.modify</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--精品推荐--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recommend wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>精品推荐<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>JQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>React<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>JavaWeb<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Node.js<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Vue2.0<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modify&quot;</span>&gt;</span>修改兴趣<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="精品课程"><a href="#精品课程" class="headerlink" title="精品课程"></a>精品课程</h2><p>标签结构</p>
<blockquote>
<p>.hd + .bd</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*精品课程*/</span></span><br><span class="line"><span class="selector-class">.course</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hd公共使用*/</span></span><br><span class="line"><span class="selector-class">.hd</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hd</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">21px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hd</span> <span class="selector-class">.more</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">228px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">271px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-class">.pic</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">155px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">115px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-class">.text</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-class">.text</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-class">.text</span> <span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fa6400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-class">.text</span> <span class="selector-tag">p</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--精品课程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;course wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>精品推荐<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span>查看全部 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/course03.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练 <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> • <span class="tag">&lt;<span class="name">i</span>&gt;</span>1125人在学<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/course02.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Android 网络图片加载框架详解<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> • <span class="tag">&lt;<span class="name">i</span>&gt;</span>1145人在学<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/course03.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Angular 2 最新框架+主流技术+项目实战 <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> • <span class="tag">&lt;<span class="name">i</span>&gt;</span>3222人在学<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/course04.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Android Hybrid APP开发实战 H5+原生！<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> • <span class="tag">&lt;<span class="name">i</span>&gt;</span>3288人在学<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/course02.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>UGUI 源码深度剖析<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> • <span class="tag">&lt;<span class="name">i</span>&gt;</span>1125人在学<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*前端*/</span></span><br><span class="line"><span class="selector-class">.hd</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hd</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hd</span> <span class="selector-tag">li</span> <span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.before</span> <span class="selector-class">.bd</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">228px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">957px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-class">.right</span> <span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;before wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编程入门<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>热门<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>初级<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>中级<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span>查看全部 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/left.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/top.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/course03.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练 <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> • <span class="tag">&lt;<span class="name">i</span>&gt;</span>1125人在学<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/course03.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练 <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> • <span class="tag">&lt;<span class="name">i</span>&gt;</span>1125人在学<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/course04.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练 <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> • <span class="tag">&lt;<span class="name">i</span>&gt;</span>1125人在学<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/course02.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练 <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> • <span class="tag">&lt;<span class="name">i</span>&gt;</span>1125人在学<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*版权*/</span></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">273px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">440px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.left</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.left</span> <span class="selector-class">.download</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.right</span> <span class="selector-tag">dl</span>&#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">130px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.right</span> <span class="selector-tag">dt</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">32px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.right</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--版权--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>学成在线致力于普及中国最好的教育它与中国一流大学和机构合作提供在线课程。</span><br><span class="line">        © 2017年XTCG Inc.保留所有权利。-沪ICP备15025210号<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;download&quot;</span>&gt;</span>下载APP<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关于学成网<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>管理团队<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>工作机会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>客户服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>帮助<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>新手指南<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>如何注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>如何选课<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>如何拿到毕业证<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>学分是什么<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>考试未通过怎么办<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>合作伙伴<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>合作机构<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>合作导师<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="成品展示"><a href="#成品展示" class="headerlink" title="成品展示"></a>成品展示</h2><p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240218042822040.png" alt="image-20240218042822040"></p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240218042812742.png" alt="image-20240218042812742"></p>
<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><blockquote>
<p>灵活度改变盒子在网页中的位置</p>
<p>可以实现多个盒子叠在一起的效果</p>
</blockquote>
<p><strong>属性</strong></p>
<blockquote>
<p>定位模式 position</p>
<p>边偏移: 设置盒子的位置 left,right,top,bottom</p>
</blockquote>
<h2 id="相对定位relative"><a href="#相对定位relative" class="headerlink" title="相对定位relative"></a>相对定位relative</h2><p><strong>特点</strong></p>
<blockquote>
<ol>
<li><p>改变位置的参照物是自己原来的位置</p>
</li>
<li><p>不脱标,原先位置依旧占位</p>
</li>
<li><p>标签显示模式特点不变</p>
</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*图片上方顶了100px,实现了图片下移,同时图片压住了下面p标签的部分文字*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>《中国记者》：大象新闻“豫头条”重塑地方党媒时政报道新方式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>来源: 2024-02-01 10:18:29发布于河南河南广电集团《大象新闻》官方账号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>央视网消息:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  新传播形势下，如何做出受众愿意看、看得懂、主动转的时政报道？面对愈加年轻的新生代读者群体，如何站稳百姓视角，解读好一省发展大计？对于地方党媒来说，在移动传播场景下，保持年轻态，这是一个事关未来发展的核心命题。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://inews.gtimg.com/om_bt/OJtA49qys9Klrjed-kHUxi5xESpOGyRuR_K5PDOrK8L4IAA/641&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;新闻报&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">title</span>=<span class="string">&quot;中国记者报导&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://inews.gtimg.com/om_bt/OkHcMrQmp56ob5bmegjCcrf5gvw6X3Ngk5ZZua8PEm7UMAA/641&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;新闻报&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">title</span>=<span class="string">&quot;中国记者报导&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2022年9月，河南广播电视台大象新闻集合优势兵力，面向移动端，创立了时政品牌栏目“豫头条”，重塑地方党媒时政报道方式。作为主打“年轻”的时政新媒体栏目，一年多来，“豫头条”以“河南新闻联播”为基础，以新视角、新思考探寻时政新闻新表达，更深一度观察河南政经大势。在众声喧哗的舆论场上，“豫头条”以角度赢得流量、以深度彰显质量、以温度成就分量，更以态度让出彩成为常量，在新媒体端收获了大批年轻粉丝。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在各类新闻类型中，时政新闻天然与网民有距离，若在做新媒体时还是一副长者相、满是说教腔，势必不会受到年轻网友的关注。如何让时政新闻年轻起来，也像民生新闻那样成为频频刷屏的爆款？这是地方党媒共同面对的问题，也是大象新闻在打造“豫头条”栏目过程中，所探寻的方向。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://inews.gtimg.com/om_bt/OpucN7vjYi9jDkHjn4vwpLlUklq2DlJFzQGxDxhDlV7_IAA/641&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><blockquote>
<p>使用场景: 子级绝对定位,父级相对定位</p>
</blockquote>
<p><strong>特点</strong></p>
<blockquote>
<ol>
<li><p>脱标,不占位,类似浮动</p>
</li>
<li><p>先找最近的已经定位的祖先元素,如果所有祖先元素都没有定位,那么参照浏览器可视区该位置</p>
</li>
<li><p>显示模式特点改变.宽高生效(具备行内块特点)</p>
</li>
</ol>
<p>tips:如果祖先元素是绝对定位,那么margin的auto是0,不再自动选择尺寸</p>
</blockquote>
<p>例如下面的场景将展会活动移动到图片右上角,且不出现留白区域</p>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240219175225413.png" alt="image-20240219175225413"></p>
<p>修改效果如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">365px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f8f8f8</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">92px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.6</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ts1.cn.mm.bing.net/th?id=ORMS.fa66b032af1d6066ca3a08a27eef01c7&amp;pid=Wdp&amp;w=300&amp;h=156&amp;qlt=90&amp;c=1&amp;rs=1&amp;dpr=1.2187498807907104&amp;p=0&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>展会活动<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>歌唱舞台<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="定位居中"><a href="#定位居中" class="headerlink" title="定位居中"></a>定位居中</h3><p><strong>步骤</strong></p>
<ol>
<li>使用绝对定位</li>
<li>水平,垂直边偏移为50%</li>
<li>子级向左,上移动自身尺寸的一半<ul>
<li>margin设为左,上尺寸一半的负数,即往相反方向移动.,实现居中效果</li>
<li>transform: translate(-50%,-50%)</li>
</ul>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">182px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">95px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="comment">/*margin写法*/</span></span><br><span class="line">    <span class="comment">/*margin-left: -182px;*/</span></span><br><span class="line">    <span class="comment">/*margin-top: -95px;*/</span></span><br><span class="line">    <span class="comment">/*transform写法*/</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p>position:fixed</p>
<blockquote>
<p>元素的位置在网页滚动时不会改变</p>
</blockquote>
<p>特点:</p>
<blockquote>
<ol>
<li>脱标,不占位</li>
<li>参照物为浏览器可视区</li>
<li>显示模式为行内块</li>
</ol>
</blockquote>
<h2 id="堆叠层级z-index"><a href="#堆叠层级z-index" class="headerlink" title="堆叠层级z-index"></a>堆叠层级z-index</h2><blockquote>
<p>默认效果: 按照标签书写顺序,后来者居上</p>
<p>作用:设置定位元素的层级顺序,改变定位元素的显示顺序</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*z-index默认值为0,数值越大显示等级越高*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="CSS精灵"><a href="#CSS精灵" class="headerlink" title="CSS精灵"></a>CSS精灵</h1><blockquote>
<p>是一种网页图片应用处理方式</p>
<p>把网页的一些图片整合到一张图片中,再通过background-position精确的定位出背景图片的位置,想要哪个图片就根据坐标显示出来</p>
</blockquote>
<p>步骤</p>
<ol>
<li>创建盒子,盒子尺寸与小图尺寸相同</li>
<li>设置盒子背景图为精灵图</li>
<li>调价background-position属性,改变背景图位置<ul>
<li>使用PxCook测量小图片左上角坐标</li>
<li>取负数坐标为background-position属性为负数,向左上移动</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">112px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">110px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*将字母表设为背景图*/</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">#</span>);</span></span><br><span class="line"><span class="language-css">          <span class="comment">/*此时显示A.我们要显示N需要挪动位置*/</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-position</span>: -<span class="number">256px</span> -<span class="number">276px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="综合案例-4"><a href="#综合案例-4" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="京东服务"><a href="#京东服务" class="headerlink" title="京东服务"></a>京东服务</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.service</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">102px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1320px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">42px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*background-color: pink;*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.service</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*justify-content: space-between;*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.service</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">292px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">42px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.service</span> <span class="selector-tag">li</span> <span class="selector-tag">h5</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">36px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">42px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://misc.360buyimg.com/jdf/1.0.0/unit/service/5.0.0/i/ico_service.png</span>) <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.service</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) <span class="selector-tag">h5</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://misc.360buyimg.com/jdf/1.0.0/unit/service/5.0.0/i/ico_service.png</span>) <span class="number">0</span> -<span class="number">42px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.service</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) <span class="selector-tag">h5</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://misc.360buyimg.com/jdf/1.0.0/unit/service/5.0.0/i/ico_service.png</span>) <span class="number">0</span> -<span class="number">84px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.service</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) <span class="selector-tag">h5</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://misc.360buyimg.com/jdf/1.0.0/unit/service/5.0.0/i/ico_service.png</span>) <span class="number">0</span> -<span class="number">128px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.service</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">42px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#444</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;service&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>品类齐全，轻松购物<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>多仓直发，极速配送<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>正品行货，精致服务<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>天天低价，畅选无忧<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240219230216704.png" alt="image-20240219230216704"></p>
<h1 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h1><blockquote>
<p>展示的是图标,本质是字体</p>
<p>作用: 在网页中添加简单的颜色单一的小图标</p>
</blockquote>
<h2 id="下载和使用"><a href="#下载和使用" class="headerlink" title="下载和使用"></a>下载和使用</h2><p>iconfont图标库:<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a></p>
<h3 id="下载方法"><a href="#下载方法" class="headerlink" title="下载方法"></a>下载方法</h3><ul>
<li><p>登录购买加入购物车</p>
</li>
<li><p>选完后添加至项目</p>
</li>
<li><p>项目中选择下载</p>
</li>
<li><p>解压下载文件</p>
</li>
<li><p>将解压文件夹移至所要使用的web项目中</p>
</li>
</ul>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol>
<li>引入字体样式表</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../iconfont/iconfont.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>标签使用字体图标类名<ul>
<li>iconfont:字体图标基本样式</li>
<li>icon-xxx:图标对应的类名</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../iconfont/iconfont.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.iconfont</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-gerenzhongxin-zhihui&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="上传矢量图"><a href="#上传矢量图" class="headerlink" title="上传矢量图"></a>上传矢量图</h2><blockquote>
<p>项目特有的图标上传到iconfont图标库,生成字体</p>
</blockquote>
<h1 id="修饰属性"><a href="#修饰属性" class="headerlink" title="修饰属性"></a>修饰属性</h1><h2 id="垂直对齐方式vertical-align"><a href="#垂直对齐方式vertical-align" class="headerlink" title="垂直对齐方式vertical-align"></a>垂直对齐方式vertical-align</h2><table>
<thead>
<tr>
<th><strong>属性值</strong></th>
<th><strong>效果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>baseline</td>
<td>基线对齐(默认)</td>
</tr>
<tr>
<td>top</td>
<td>顶部对齐</td>
</tr>
<tr>
<td>middle</td>
<td>居中对齐</td>
</tr>
<tr>
<td>bottom</td>
<td>底部对齐</td>
</tr>
</tbody></table>
<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240219233520948.png" alt="image-20240219233520948"></p>
<p>基线:一般来说基线能够准确的分割每一层字,但有诸如p一类的字母下方有多余部分,会有些留白用来处理,图片看作字体的话,可以看出空白间距是如何出现的		</p>
<p><strong>一般来说哪个元素占高最大就给哪个元素添加垂直对齐属性</strong></p>
<h2 id="过渡transition"><a href="#过渡transition" class="headerlink" title="过渡transition"></a>过渡transition</h2><blockquote>
<p>可以为一个元素在不同状态之间切换的时候添加过渡效果</p>
</blockquote>
<p>属性名: transition(复合属性)</p>
<p>属性值: 过渡的属性 花费时间(s)</p>
<ul>
<li>过渡的属性可以是具体的CSS属性</li>
<li>也可以为all(两个状态属性值不同)</li>
<li>transition设置给元素本身</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://ts2.cn.mm.bing.net/th?id=ORMS.aa2c376913d5a4d1e996878637b20cb3&amp;pid=Wdp&amp;w=300&amp;h=156&amp;qlt=90&amp;c=1&amp;rs=1&amp;dpr=1.2187498807907104&amp;p=0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="透明度opacity"><a href="#透明度opacity" class="headerlink" title="透明度opacity"></a>透明度opacity</h2><blockquote>
<p>设置整个元素的透明度</p>
</blockquote>
<p>属性值:0-1</p>
<h2 id="光标类型cursor"><a href="#光标类型cursor" class="headerlink" title="光标类型cursor"></a>光标类型cursor</h2><blockquote>
<p>鼠标悬停在元素上时指针显示样式</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>属性值</strong></th>
<th><strong>效果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>default</td>
<td>默认值,箭头</td>
</tr>
<tr>
<td>pointer</td>
<td>小手效果,提示用户可以点击</td>
</tr>
<tr>
<td>text</td>
<td>工字型,提升用户可以输入文字</td>
</tr>
<tr>
<td>move</td>
<td>十字光标,提升用户可以移动</td>
</tr>
</tbody></table>
<h2 id="综合案例-5"><a href="#综合案例-5" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./iconfont/iconfont.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">338px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">348px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/*箭头*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-class">.prev</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-class">.next</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: none;<span class="comment">/*隐藏*/</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-class">.prev</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-class">.next</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-radius</span>: <span class="number">15px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/*划到banner区域,箭头显示*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.prev</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.next</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/*圆点*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-tag">ol</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-tag">ol</span> <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: orangered;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.banner</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  图--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://ts4.cn.mm.bing.net/th?id=ORMS.0117f2818f0924c98cb86699404eb61b&amp;pid=Wdp&amp;w=612&amp;h=304&amp;qlt=90&amp;c=1&amp;rs=1&amp;dpr=1.2187498807907104&amp;p=0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://ts4.cn.mm.bing.net/th?id=ORMS.0117f2818f0924c98cb86699404eb61b&amp;pid=Wdp&amp;w=612&amp;h=304&amp;qlt=90&amp;c=1&amp;rs=1&amp;dpr=1.2187498807907104&amp;p=0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://ts4.cn.mm.bing.net/th?id=ORMS.0117f2818f0924c98cb86699404eb61b&amp;pid=Wdp&amp;w=612&amp;h=304&amp;qlt=90&amp;c=1&amp;rs=1&amp;dpr=1.2187498807907104&amp;p=0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  箭头--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-fanhui&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-jinru&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  圆点--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>	</span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/03/CSS%E5%AD%A6%E4%B9%A0/image-20240220004919823.png" alt="image-20240220004919823"></p>
]]></content>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>c++初期笔记（超详细超完整）</title>
    <url>/2023/11/16/c++%E5%88%9D%E6%9C%9F%E7%AC%94%E8%AE%B0%EF%BC%88%E8%B6%85%E8%AF%A6%E7%BB%86%E8%B6%85%E5%AE%8C%E6%95%B4%EF%BC%89/</url>
    <content><![CDATA[<h1 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h1><h2 id="一．-变量，输入输出，表达式，和顺序语句"><a href="#一．-变量，输入输出，表达式，和顺序语句" class="headerlink" title="一．  变量，输入输出，表达式，和顺序语句"></a>一．  变量，输入输出，表达式，和顺序语句</h2><ol>
<li><h3 id="标准结构"><a href="#标准结构" class="headerlink" title="标准结构"></a>标准结构</h3></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello World&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>using namespace std；用于创建命名空间，cout和cin都属于其中</p>
<ol start="2">
<li><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3></li>
</ol>
<p>（1）   布尔型 存储true和flase 1byte</p>
<p>（2）   字符型 char         1byte</p>
<p>（3）   整型  int            4byte</p>
<p>（4）   浮点型 实数和科学计数法 </p>
<p>float 有效数字6-7位  4byte</p>
<p>double 有效数字15-16位 8byte</p>
<p>long double 18-19位  </p>
<p>​       一个字节有8比特  1byte&#x3D;8bit 1KB &#x3D; 1024byte</p>
<ol start="3">
<li><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3></li>
</ol>
<p>cin&gt;&gt;a&gt;&gt;b;表示输入a和b </p>
<p>cout&lt;&lt;a+b&lt;&lt;endl;表示输出a+b；</p>
<ol start="4">
<li><h3 id="常见提交结果"><a href="#常见提交结果" class="headerlink" title="常见提交结果"></a>常见提交结果</h3></li>
</ol>
<p>AC    accepted</p>
<p>WA    wrong answer</p>
<p>time limit error 超时</p>
<p>memory limit error 内存超限</p>
<p>segmentation fault 数组越界</p>
<p>compiler error 编译错误</p>
<p>presentation error 表达错误，格式错误</p>
<p>runtime error string字符串检测到越界</p>
<p>Float Point Exception某处位置存在a%i时，i为0的情况</p>
<p>输出结果为nan（not a number）的原因，所要开根号的数可能是个负数</p>
<p>  输入输出同样可以用scanf和printf</p>
<p>万能头文件 &lt;bits&#x2F;stdc++.h&gt; 包含所有常用的函数</p>
<p>运行速度：&lt;bits&#x2F;stdc++.h 大于<iostream>大于<cstdio></cstdio></iostream></p>
<p>区别在于头文件大小</p>
<p>iostream可以读入各种常见类型的变量，也可以读入string字符串</p>
<p>printf的三种排版格式</p>
<h3 id="1-5d-每次输出靠右占用五个字符"><a href="#1-5d-每次输出靠右占用五个字符" class="headerlink" title="1.%5d 每次输出靠右占用五个字符"></a>1.%5d 每次输出靠右占用五个字符</h3><h4 id="2-5d-每次输出靠左占用五个字符"><a href="#2-5d-每次输出靠左占用五个字符" class="headerlink" title="2.%-5d 每次输出靠左占用五个字符"></a>2.%-5d 每次输出靠左占用五个字符</h4><h4 id="3-05d-每次输出靠右占用五个字符，不足五个以0填充"><a href="#3-05d-每次输出靠右占用五个字符，不足五个以0填充" class="headerlink" title="3.%05d 每次输出靠右占用五个字符，不足五个以0填充"></a>3.%05d 每次输出靠右占用五个字符，不足五个以0填充</h4><h2 id="二．-判断语句"><a href="#二．-判断语句" class="headerlink" title="二．  判断语句"></a>二．  判断语句</h2><p>if语句</p>
<h3 id="1-if语句之后千万不要加分号-（如果加了分号表示if执行了一个空语句）"><a href="#1-if语句之后千万不要加分号-（如果加了分号表示if执行了一个空语句）" class="headerlink" title="1.if语句之后千万不要加分号 （如果加了分号表示if执行了一个空语句）"></a>1.if语句之后千万不要加分号 （如果加了分号表示if执行了一个空语句）</h3><h3 id="2-其余用法与c语言相同"><a href="#2-其余用法与c语言相同" class="headerlink" title="2.其余用法与c语言相同"></a>2.其余用法与c语言相同</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;score;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(score &gt;= <span class="number">60</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;及格&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不及格&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;结束&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意点：判断语句里判断符号分别为”&gt;”,”&lt;”,“&gt;&#x3D;”, “&lt;&#x3D;”,“！&#x3D;”， “&#x3D;&#x3D;” </p>
<h3 id="3-逻辑表达式"><a href="#3-逻辑表达式" class="headerlink" title="3.逻辑表达式"></a>3.逻辑表达式</h3><p>​    名称   写法 另一种写法</p>
<p>（1）   逻辑与：&amp;&amp;，and</p>
<p>（2）   逻辑或：||，  or</p>
<p>（3）   逻辑非：！   not</p>
<p>如果直接写if (a &gt;b&gt;c)，其真正意义是，先判断a是否大于b，如果a大于b，则a&gt;b将作为布尔值1与c比较，如果a小于b，则作为布尔值0与c比较</p>
<p>！a等价于a ！&#x3D; -1</p>
<p>​           <strong>printf等函数使用时会有“%”等特殊符号的使用，在printf函数里，%是指的输出格式，即转义字符，如果仅为了打印“%”，需要将%前加“%”，</strong></p>
<p><strong>例如printf（“sum &#x3D; %d%%“，sum）；</strong></p>
<h2 id="三．-循环结构（基本和c语言相同）"><a href="#三．-循环结构（基本和c语言相同）" class="headerlink" title="三．  循环结构（基本和c语言相同）"></a>三．  循环结构（基本和c语言相同）</h2><h3 id="1-while循环：while循环表达式可以嵌入cin等函数，-while（cin-n）-因为cin函数是存在返回值的，如果没有返回值是因为读到文件结束符"><a href="#1-while循环：while循环表达式可以嵌入cin等函数，-while（cin-n）-因为cin函数是存在返回值的，如果没有返回值是因为读到文件结束符" class="headerlink" title="1.while循环：while循环表达式可以嵌入cin等函数，          while（cin&gt;&gt;n）,因为cin函数是存在返回值的，如果没有返回值是因为读到文件结束符"></a>1.while循环：while循环表达式可以嵌入cin等函数，          while（cin&gt;&gt;n）,因为cin函数是存在返回值的，如果没有返回值是因为读到文件结束符</h3><p>小技巧：while 循环输入x时可以写成while （cin&gt;&gt;x&amp;&amp;x）表示输入x且读入x时循环结束</p>
<p>​         c++中的EOF有准确的值，即-1.</p>
<p>​      cin和scanf的区别：(1).在输入字符时cin会自动过滤掉空格，而scanf会读入空格</p>
<p>(2).cin的运算效率比scanf慢很多，但如果输入的数是小于10000的情况下，程序员用cin编写代码的效率会更快一些</p>
<p>​         c++一秒只能运算1亿次，必要的时候需要优化代码</p>
<h3 id="2-reverse函数"><a href="#2-reverse函数" class="headerlink" title="2.reverse函数"></a>2.reverse函数</h3><p>   ·作用：将数组中某一连续的元素旋转 比如1 2 3 4 5 逆序一次得到5 4 3 2 1</p>
<p>​    ·函数库函数：<algorithm></algorithm></p>
<p>· 函数使用 reverse（a，a+n） </p>
<p>· 说明：将a数组中从首元素到第n个元素的子数组逆序排布</p>
<p>· 旋转：比如数组1 2 3 4 5旋转一次得到5 1 2 3 4，再旋转得到4 5 1 2 3</p>
<h2 id="四．-数组"><a href="#四．-数组" class="headerlink" title="四．  数组"></a>四．  数组</h2><p>浮点数与整型的存储方式不同，且当运算量过大时都会存在一定误差</p>
<p>mem函数（库函数cstring）</p>
<h3 id="1-memset"><a href="#1-memset" class="headerlink" title="1.memset"></a>1.memset</h3><p>​	1.格式 </p>
<p>​		memset(arr,1,sizeof arr)</p>
<p>​     2.意义：</p>
<p>​		将arr数组全部赋值为1 ，sizeof arr并不是代表几个数，而是说没前进一步占几个字节 </p>
<p>利用memset对数组赋值会比循环快很多</p>
<h3 id="2-memcpy"><a href="#2-memcpy" class="headerlink" title="2.memcpy"></a>2.memcpy</h3><p>​	1.格式 </p>
<p>​		memcpy(arr1,arr2,sizeof arr2)</p>
<ol start="2">
<li><p>意义</p>
<p>​	将arr1数组赋值为arr2数组中的对应元素</p>
</li>
</ol>
<h2 id="五．-字符串"><a href="#五．-字符串" class="headerlink" title="五．  字符串"></a>五．  字符串</h2><h3 id="1-字符数组：由若干个字符组成的数组，一种另类的字符串"><a href="#1-字符数组：由若干个字符组成的数组，一种另类的字符串" class="headerlink" title="1.字符数组：由若干个字符组成的数组，一种另类的字符串"></a>1.字符数组：由若干个字符组成的数组，一种另类的字符串</h3><h3 id="2-字符串：由若干个字符组成"><a href="#2-字符串：由若干个字符组成" class="headerlink" title="2.字符串：由若干个字符组成"></a>2.字符串：由若干个字符组成</h3><p>数组定义的字符串的长度一般比真实的长度多一，因为每个字符数组后面都会以‘\0‘这个结束符结尾</p>
<p>读入的字符串较小时适合用字符数组表示，读入的字符串较大时适合用string字符串表示，scanf无法读入string定义的字符串</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a1[] = &#123;<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>&#125;;			 <span class="comment">// 列表初始化，没有空字符</span></span><br><span class="line">    <span class="type">char</span> a2[] = &#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;		 <span class="comment">// 列表初始化，含有显示的空字符</span></span><br><span class="line">    <span class="type">char</span> a3[] = <span class="string">&quot;C++&quot;</span>;					<span class="comment">// 自动添加字符串结尾的空字符</span></span><br><span class="line">    <span class="type">char</span> a4[<span class="number">6</span>] = <span class="string">&quot;Daniel&quot;</span>;				<span class="comment">// 错误，没有足够空间课存放空字符</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>a1没有’\0’这个结束符，本质上是一个字符数组</p>
<p>a2有了结束符，可以算作一个字符串</p>
<p>a3以字符串定义，就是字符串，但因为使用数组定义的，长度会多1</p>
<h3 id="3-cin-cout函数本身也是通过地址来读入，打印结果"><a href="#3-cin-cout函数本身也是通过地址来读入，打印结果" class="headerlink" title="3.cin,cout函数本身也是通过地址来读入，打印结果"></a>3.cin,cout函数本身也是通过地址来读入，打印结果</h3><p>比如cout&lt;&lt;str&lt;&lt;endl;就是从str的首元素开始打印</p>
<p>而cout&lt;&lt;str+1&lt;&lt;endl;就是从str的第二个元素开始打印<br> 输入字符数组时读到空格时输入会停止，比如输入abc def，真正输入进去只有abc</p>
<h3 id="4-fgets-s-n-stdin-可以读入空格，不会过滤回车"><a href="#4-fgets-s-n-stdin-可以读入空格，不会过滤回车" class="headerlink" title="4.fgets(s,n,stdin)  可以读入空格，不会过滤回车"></a>4.fgets(s,n,stdin)  可以读入空格，不会过滤回车</h3><p>说明：读入n长度的字符串s，s字符串是</p>
<p>库函数：stdio</p>
<h3 id="5-getline（cin，s）-可以读入空格"><a href="#5-getline（cin，s）-可以读入空格" class="headerlink" title="5.getline（cin，s） 可以读入空格"></a>5.getline（cin，s） 可以读入空格</h3><p>说明：读入一行字符串s，且字符串s必须用string定义，常用</p>
<p>库函数：iostream</p>
<h3 id="6-c中string库函数"><a href="#6-c中string库函数" class="headerlink" title="6.c中string库函数"></a>6.c中string库函数</h3><p>(1).strlen，求出字符串长度，不计‘\0‘</p>
<p>(2).strcmp（arr1，arr2）按字典序比较两个字符串的大小，返回值为1，0，-1</p>
<p>(3).strcpy(arr1,arr2)将arr2字符串复制给arr1</p>
<p>在for循环里用strlen，每次循环都会计算一次strlen，所以需要提前定义一个变量存储长度，减少运算量</p>
<h3 id="7-标准库函数string（可变长的字符序列，比字符数组更好用）"><a href="#7-标准库函数string（可变长的字符序列，比字符数组更好用）" class="headerlink" title="7.标准库函数string（可变长的字符序列，比字符数组更好用）"></a>7.标准库函数string（可变长的字符序列，比字符数组更好用）</h3><p>·优点：</p>
<p>（1）</p>
<p>能直接赋值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> s1; <span class="comment">// 默认的空字符串</span></span><br><span class="line"><span class="built_in">string</span> s2 = s1; <span class="comment">// s2是s1的一个副本</span></span><br><span class="line"><span class="built_in">string</span> s3 = <span class="string">&quot;hiya&quot;</span>; <span class="comment">// s3是该字符串字面值的一个副本</span></span><br><span class="line"><span class="built_in">string</span> <span class="title function_">s4</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>)</span>; <span class="comment">// s4的内容是: cccccccccc I</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）可直接输入输出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">#<span class="number">1</span>nclude &lt;cstd1o&gt;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>; ,</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> s1, s2;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;’&lt;&lt;s2&lt;&lt;end1;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> s1, s2;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; s1;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s1.c_ _str()D</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中s1.c_str()返回了一个字符数组</p>
<p>（4）  字符串可直接比较，无需strcmp</p>
<p>（5）  字符串可以直接相加，即拼接，甚至累加，（string类型）“hello ”+（string类型）“world”-》“Hello World”</p>
<p>字符串相加时必须保证两者之间必须保证有一个字符串属于string类型</p>
<p>​           最好别用+&#x3D;来增添字符串</p>
<p>遍历初识：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> s = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">char</span> c : s) <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>顺次遍历s字符串中的每一个元素</p>
<p>该遍历等价于</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i  &lt; s.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> c = str[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并同时输出每一次的c，但原先的字符串并不受到影响</p>
<h3 id="8-substr函数"><a href="#8-substr函数" class="headerlink" title="8.substr函数"></a>8.substr函数</h3><p>（1）  说明，返回特定长度的字符串</p>
<p>（2）  格式：str.substr（0，len），返回从str首元素地址开始一直到len的字串,len可以省略即str.substr(0)，指的是返回从下标0开始一直到结束的字符串</p>
<p>（3）  库函数：string</p>
<h3 id="9-stringstream-ssin函数"><a href="#9-stringstream-ssin函数" class="headerlink" title="9.stringstream ssin函数"></a>9.stringstream ssin函数</h3><p>(1)说明：将字符串作为字符串流通过空格分隔开，每一个分隔开的字符串作为原字符串的字串</p>
<p>(2)格式stringstream ssin（s）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> s, a, b;</span><br><span class="line">	getline(<span class="built_in">cin</span>, s);</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="built_in">stringstream</span> <span class="title function_">ssin</span><span class="params">(s)</span>;</span><br><span class="line">	<span class="built_in">string</span> str;</span><br><span class="line">	<span class="keyword">while</span> (ssin &gt;&gt; str)</span><br><span class="line">		<span class="keyword">if</span>(str == a) <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; str &lt;&lt;<span class="string">&#x27; &#x27;</span> ;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>str被不断赋值成字符串的一个字串</p>
<p>（3）库函数 sstream</p>
<h3 id="10-ssin函数（通常叫ssin，也可以自定义昵称使用）"><a href="#10-ssin函数（通常叫ssin，也可以自定义昵称使用）" class="headerlink" title="10.ssin函数（通常叫ssin，也可以自定义昵称使用）"></a>10.ssin函数（通常叫ssin，也可以自定义昵称使用）</h3><p>（1）  说明：从字符串流中提取我们需要的信息，可以是各种类型的变量，和cin等价</p>
<p>（2）  格式 ssin&gt;&gt;a&gt;&gt;b&gt;&gt;str</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	getline(<span class="built_in">cin</span>, s);</span><br><span class="line">	<span class="built_in">stringstream</span> <span class="title function_">ssin</span><span class="params">(s)</span>;</span><br><span class="line">	<span class="type">int</span> a, b;</span><br><span class="line">	<span class="built_in">string</span> str;</span><br><span class="line">	<span class="type">double</span> C;</span><br><span class="line">	ssin &gt;&gt; a &gt;&gt; str &gt;&gt; &gt;b &gt;&gt; C;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span> &lt;&lt; b&lt;&lt;<span class="built_in">endl</span> &lt;&lt; C &lt;&lt; end1;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）  库函数 sstream</p>
<h3 id="11-sscanf函数"><a href="#11-sscanf函数" class="headerlink" title="11.sscanf函数"></a>11.sscanf函数</h3><p>（1）说明：作用与ssin相同，但格式上多了一个参数</p>
<p>（2）格式 sscanf（s，“%d %c %s”，&amp;a,&amp;b,&amp;str）;</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> s[<span class="number">1000</span>];</span><br><span class="line">	fgets(s, <span class="number">1000</span>，<span class="built_in">stdin</span>);</span><br><span class="line">	<span class="type">int</span> a, b;</span><br><span class="line">	<span class="type">char</span> str[<span class="number">1000</span>];</span><br><span class="line">	<span class="type">double</span> c;</span><br><span class="line">	<span class="built_in">sscanf</span>(s, <span class="string">&quot;%d%s%d%1f&quot;</span>, &amp;a, str, &amp;b, &amp;c);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(3)库函数cstdio</p>
<ol start="12">
<li><h3 id="back函数"><a href="#back函数" class="headerlink" title="back函数"></a>back函数</h3></li>
</ol>
<p>（1）  s.back(); 返回字符串s的最后一个元素</p>
<p>（2）  s.pop.back();删除字符串s的最后一个元素</p>
<p>（3）  库函数 iostream</p>
<h2 id="六．-函数-使编代码的过程更加简洁"><a href="#六．-函数-使编代码的过程更加简洁" class="headerlink" title="六． 函数(使编代码的过程更加简洁)"></a>六． 函数(使编代码的过程更加简洁)</h2><p>组成部分：返回类型，函数名，参数，函数体</p>
<p>函数可以先声明再定义，也可以只是定义，但只有函数定义时函数必须放在main函数之前</p>
<p>函数的形参列表可以为空，但是不能省略</p>
<p> 把数组传入函数中，对数组某一元素赋值，原数组会发生相应改变，因为传入函数中的是数组的地址</p>
<h3 id="1-静态变量-static-在函数内部开辟了一个只有该函数所能用的的全局变量"><a href="#1-静态变量-static-在函数内部开辟了一个只有该函数所能用的的全局变量" class="headerlink" title="1.静态变量 static(在函数内部开辟了一个只有该函数所能用的的全局变量)"></a>1.静态变量 static(在函数内部开辟了一个只有该函数所能用的的全局变量)</h3><p>·说明：每次函数调用所使用的都是同一个变量，只会被定义一次，下次调用定义静态变量时会直接跳过，变量的值会在改变前一直保存下去</p>
<p>·作用：可以检测函数调用的次数</p>
<p>·使用：static int cnt &#x3D; 0; </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">output</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	cnt ++ ;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;call: &quot;</span> &lt;&lt; cnt &lt;&lt;<span class="string">&quot;times&quot;</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当局部变量和全局变量重名时，优先使用局部变量</p>
<h3 id="2-参数传递"><a href="#2-参数传递" class="headerlink" title="2.参数传递"></a>2.参数传递</h3><p>（1）  传值调用</p>
<p>·相当于拷贝了一份所传的变量，原变量的值不受影响</p>
<p>（2）  传址调用，传引用调用</p>
<p>·将变量传到函数内部，传进去的是变量本身，会因函数的过程而改变</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span><br><span class="line">&#123;</span><br><span class="line">	x = <span class="number">10</span>,y = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">if</span>( x &gt; y ) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）  数组传参</p>
<p>在函数中对数组的修改，会影响外部的数组</p>
<p>与c同样的，数组的行也可以省略</p>
<h3 id="3-inline修饰函数"><a href="#3-inline修饰函数" class="headerlink" title="3.inline修饰函数"></a>3.inline修饰函数</h3><p>·说明：相当于把函数的函数体直接在main函数中展开</p>
<p>·举例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> b[])</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span> b &lt;&lt; <span class="built_in">endl</span>; ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span> a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	foo(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>·作用：会让程序运行时快一些</p>
<h3 id="4-函数递归"><a href="#4-函数递归" class="headerlink" title="4.函数递归"></a>4.函数递归</h3><p>·说明：函数调用函数本身</p>
<p>·缺点：运行速度慢</p>
<h2 id="七．-类，结构体，指针与引用"><a href="#七．-类，结构体，指针与引用" class="headerlink" title="七． 类，结构体，指针与引用"></a>七． 类，结构体，指针与引用</h2><h3 id="1-类（class）"><a href="#1-类（class）" class="headerlink" title="1.类（class）"></a>1.类（class）</h3><p>（1）. 说明：可以将变量，数组和函数完美的打包在一起</p>
<p>(2). 结构：两个主元素private，public</p>
<p>  ·private只能在类内部</p>
<p>  ·public可以在外部调用，也可以在内部调用</p>
<p>  ·private和public可以多次定义</p>
<p>  ·类中的变量和函数统一称为成员变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	private:</span><br><span class="line">		<span class="type">int</span> age, height ;</span><br><span class="line">		<span class="type">double</span> money;|</span><br><span class="line">	public:</span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">		<span class="type">void</span> <span class="title function_">say</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I&#x27;m&quot;</span>&lt;&lt; name &lt;&lt; end1;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> get_ <span class="title function_">age</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">void</span> add_ <span class="title function_">money</span><span class="params">(<span class="type">double</span> x)</span></span><br><span class="line">	&#123;</span><br><span class="line">		money += X;</span><br><span class="line">	&#125;</span><br><span class="line">	private:</span><br><span class="line">		<span class="built_in">string</span> books[N]; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>注意点：花括号后面一定要加分号</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>(3)类的调用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( )</span></span><br><span class="line">&#123;</span><br><span class="line">    Person C;</span><br><span class="line">    C. name = <span class="string">&#x27;yxc&quot;;</span></span><br><span class="line"><span class="string">    // c.age = 18; //错误!</span></span><br><span class="line"><span class="string">    cout &lt;&lt; c.get_age() &lt;&lt; endl ;</span></span><br><span class="line"><span class="string">    C. add_money(1000000);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>c.age是错误的，因为age属于类中private的变量，无法在外部调用</p>
<h3 id="2-结构体（与类的用法相同）"><a href="#2-结构体（与类的用法相同）" class="headerlink" title="2.结构体（与类的用法相同）"></a>2.结构体（与类的用法相同）</h3><h3 id="3-类与结构体的区别：如果不在内部定义private和public时定义的变量，类默认定义的成员变量属于private，结构体默认定义的成员变量属于public"><a href="#3-类与结构体的区别：如果不在内部定义private和public时定义的变量，类默认定义的成员变量属于private，结构体默认定义的成员变量属于public" class="headerlink" title="3.类与结构体的区别：如果不在内部定义private和public时定义的变量，类默认定义的成员变量属于private，结构体默认定义的成员变量属于public"></a>3.类与结构体的区别：如果不在内部定义private和public时定义的变量，类默认定义的成员变量属于private，结构体默认定义的成员变量属于public</h3><h3 id="4-类与结构体可以在内部构造函数"><a href="#4-类与结构体可以在内部构造函数" class="headerlink" title="4.类与结构体可以在内部构造函数"></a>4.类与结构体可以在内部构造函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age, height;</span><br><span class="line">    <span class="type">double</span> money;</span><br><span class="line">    Person(int_ age, int_ height, double_ _money) <span class="comment">// 构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        age =_ age;</span><br><span class="line">        height =_ height;</span><br><span class="line">        money =_ money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person <span class="title function_">p</span><span class="params">(<span class="number">18</span>，<span class="number">180</span>，<span class="number">100.0</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​      特殊的赋值方式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Person() &#123;&#125;</span><br><span class="line">    Person(<span class="type">int</span> _age, <span class="type">int</span> _height) : age(_age), height(_height) &#123;&#125;</span><br><span class="line">    Person(<span class="type">int</span> _age, <span class="type">int</span> _height, <span class="type">double</span> _money) : age(_age), height(_height), mmoney(_money) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>第12行表示定义一个函数，将)_age值赋给age，将 _height赋给height</p>
<h3 id="5-指针"><a href="#5-指针" class="headerlink" title="5.指针"></a>5.指针</h3><p>（1）  指针所存的就是变量的地址</p>
<p>（2）  c++中输出变量的地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="type">void</span>*)&amp;c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果定义的变量是连续定义的，那么他们的地址也是连续的</p>
<p>（3）  指针的引用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* p = &amp;a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *P &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    *p = <span class="number">12</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>int* p &#x3D; &amp;a表示定义一个整型指针存储a的地址</p>
<p>之后的*p则表示解引用p，对p的地址读取一个值</p>
<p>并且可以修改这个值</p>
<p>数组是一种特殊的指针，数组名存的是数组首元素的地址</p>
<p>每个int型变量有四个字节，所以整型数组每一个元素的地址相差四个字节</p>
<p>（4）  指针也可以进行运算</p>
<p>如果运算的指针属于整型，会在运算完之后除以整型字节数4</p>
<h3 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h3><p>说明：c++指针写法的简化</p>
<p>举例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( )</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;a;</span><br><span class="line"><span class="type">int</span>&amp; p = a; <span class="comment">//引用、别名</span></span><br></pre></td></tr></table></figure>

<p> 此时之后使用的p都是*p，p相当于是a的别名</p>
<h3 id="7-链表"><a href="#7-链表" class="headerlink" title="7.链表"></a>7.链表</h3><p>示例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> &lt;iostreamp</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    Node* next;</span><br><span class="line">    </span><br><span class="line">    Node(<span class="type">int</span> _val) : va1(_val), next(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Node node = Node(<span class="number">1</span>)|</span><br><span class="line">    Node* p = &amp;node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中定义结构体变量node并用指针获得地址可以写成一段</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	Node* p = new Node(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时如果要调用结构体内的成员变量，则用-&gt;指向该变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node* p = new Node(<span class="number">1</span>);</span><br><span class="line">p -&gt;next = p;</span><br><span class="line">p-&gt;val;</span><br></pre></td></tr></table></figure>

<p>如果p不是指针，则要用 . 来调用</p>
<p>​    链表的第一个节点的地址通常称为头节点，我们习惯定义head保存第一个节点的地址</p>
<h3 id="8-链表遍历"><a href="#8-链表遍历" class="headerlink" title="8.链表遍历"></a>8.链表遍历</h3><p>使pqo分别为1，2，3节点，定义head作为头节点，将p节点1赋值给head，通过for循环一次遍历每一个节点</p>
<p>  ·如何将节点删除</p>
<p>​      本质上是在遍历过程中跳过该节点</p>
<h3 id="9-条件表达式的一种应用"><a href="#9-条件表达式的一种应用" class="headerlink" title="9.条件表达式的一种应用"></a>9.条件表达式的一种应用</h3><p>·短路</p>
<p>在a&amp;&amp;b时，只要a条件不成立，则无需判断b是否成立，直接跳过b语句，实际上，<strong>这个条件表达式并非一定要放在if表达式中</strong></p>
<h2 id="八．-STL"><a href="#八．-STL" class="headerlink" title="八． STL"></a>八． STL</h2><h3 id="1-vector"><a href="#1-vector" class="headerlink" title="1.vector"></a>1.vector</h3><p>一种可以自定义长度的数组</p>
<p>数组定义方式 vector <int> a</int></p>
<p>定义二维数组 vector <int> a[233] 定义了一个233行长度可以变化的数组</int></p>
<p>结构体的成员变量也可以动态开辟</p>
<p><strong>接下来镶嵌yxc的讲义（实在太长了）</strong></p>
<p><strong>—————————————————————————————</strong></p>
<h2 id="第八章-C-STL"><a href="#第八章-C-STL" class="headerlink" title="第八章 C++ STL"></a>第八章 C++ STL</h2><p>​    STL是提高C++编写效率的一个利器。</p>
<p>​                                                                    ——闫学灿</p>
<h3 id="1-include"><a href="#1-include" class="headerlink" title="1.#include  "></a>1.#include  <vector></vector></h3><p>vector是变长数组，支持随机访问，不支持在任意位置O(1)插入。为了保证效率，元素的增删一般应该在末尾进行。</p>
<p>​    声明</p>
<p>​       #include <vector>   头文件</vector></p>
<p>​       vector<int> a;       相当于一个长度动态变化的int数组</int></p>
<p>​       vector<int> b[233];   相当于第一维长233，第二位长度动态变化的int数组</int></p>
<p>​       struct rec{…};</p>
<p>​       vector<rec> c;      自定义的结构体类型也可以保存在vector中</rec></p>
<p>​    size&#x2F;empty</p>
<p>size函数返回vector的实际长度（包含的元素个数），empty函数返回一个bool类型，表明vector是否为空。二者的时间复杂度都是O(1)。</p>
<p>所有的STL容器都支持这两个方法，含义也相同，之后我们就不再重复给出。</p>
<p>​    clear</p>
<p>​       clear函数把vector清空。</p>
<p>​    迭代器</p>
<p>​       迭代器就像STL容器的“指针”，可以用星号“*”操作符解除引用。</p>
<p>​       一个保存int的vector的迭代器声明方法为：</p>
<p>​       vector<int>::iterator it;</int></p>
<p>vector的迭代器是“随机访问迭代器”，可以把vector的迭代器与一个整数相加减，其行为和指针的移动类似。可以把vector的两个迭代器相减，其结果也和指针相减类似，得到两个迭代器对应下标之间的距离。</p>
<p>​    begin&#x2F;end</p>
<p>begin函数返回指向vector中第一个元素的迭代器。例如a是一个非空的vector，则*a.begin()与a[0]的作用相同。</p>
<p>所有的容器都可以视作一个“前闭后开”的结构，end函数返回vector的尾部，即第n个元素再往后的“边界”。*a.end()与a[n]都是越界访问，其中n&#x3D;a.size()。</p>
<p>下面两份代码都遍历了vector<int>a，并输出它的所有元素。</int></p>
<p>for (int I &#x3D; 0; I &lt; a.size(); I ++) cout &lt;&lt; a[i] &lt;&lt; endl;</p>
<p>for (vector<int>::iterator it &#x3D; a.begin(); it !&#x3D; a.end(); it ++) cout &lt;&lt; *it &lt;&lt; endl;</int></p>
<p>​    front&#x2F;back</p>
<p>​       front函数返回vector的第一个元素，等价于*a.begin() 和 a[0]。</p>
<p>​       back函数返回vector的最后一个元素，等价于*&#x3D;&#x3D;a.end() 和 a[a.size() – 1]。</p>
<p>​    push_back() 和 pop_back()</p>
<p>a.push_back(x) 把元素x插入到vector a的尾部。</p>
<p>​       b.pop_back() 删除vector a的最后一个元素。</p>
<h3 id="2-include"><a href="#2-include" class="headerlink" title="2.#include "></a>2.#include <queue></queue></h3><p>头文件queue主要包括循环队列queue和优先队列priority_queue两个容器。</p>
<p>​    </p>
<p>​    声明</p>
<p>​       queue<int> q;</int></p>
<p>​       struct rec{…}; queue<rec> q;   &#x2F;&#x2F;结构体rec中必须定义小于号</rec></p>
<p>​       priority_queue<int> q;       &#x2F;&#x2F; 大根堆</int></p>
<p>​       priority_queue&lt;int, vector<int>, greater<int> q;  &#x2F;&#x2F; 小根堆</int></int></p>
<p>​       priority_queue&lt;pair&lt;int, int&gt;&gt;q;</p>
<p>​    循环队列 queue</p>
<p>​       push 从队尾插入</p>
<p>​       pop 从队头弹出</p>
<p>​       front 返回队头元素</p>
<p>​       back 返回队尾元素</p>
<p>​    优先队列 priority_queue</p>
<p>​       push 把元素插入堆</p>
<p>​       pop 删除堆顶元素</p>
<p>​       top    查询堆顶元素（最大值）</p>
<h3 id="3-include"><a href="#3-include" class="headerlink" title="3.#include "></a>3.#include <stack></stack></h3><p>头文件stack包含栈。声明和前面的容器类似。</p>
<p>push 向栈顶插入</p>
<p>pop 弹出栈顶元素</p>
<h3 id="4-include"><a href="#4-include" class="headerlink" title="4.#include "></a>4.#include <deque></deque></h3><p>双端队列deque是一个支持在两端高效插入或删除元素的连续线性存储空间。它就像是vector和queue的结合。与vector相比，deque在头部增删元素仅需要O(1)的时间；与queue相比，deque像数组一样支持随机访问。</p>
<p>[] 随机访问</p>
<p>begin&#x2F;end，返回deque的头&#x2F;尾迭代器</p>
<p>front&#x2F;back 队头&#x2F;队尾元素</p>
<p>push_back 从队尾入队</p>
<p>push_front 从队头入队</p>
<p>pop_back 从队尾出队</p>
<p>pop_front 从队头出队</p>
<p>clear 清空队列</p>
<h3 id="5-include"><a href="#5-include" class="headerlink" title="5.#include "></a>5.#include <set></set></h3><p>头文件set主要包括set和multiset两个容器，分别是“有序集合”和“有序多重集合”，即前者的元素不能重复，而后者可以包含若干个相等的元素。set和multiset的内部实现是一棵红黑树，它们支持的函数基本相同。</p>
<p>声明</p>
<p>​    set<int> s;</int></p>
<p>struct rec{…}; set<rec> s;  &#x2F;&#x2F; 结构体rec中必须定义小于号</rec></p>
<p>multiset<double> s;</double></p>
<p>size&#x2F;empty&#x2F;clear</p>
<p>​    与vector类似</p>
<p>迭代器</p>
<p>set和multiset的迭代器称为“双向访问迭代器”，不支持“随机访问”，支持星号(*)解除引用，仅支持”++”和–“两个与算术相关的操作。</p>
<p>设it是一个迭代器，例如set<int>::iterator it;</int></p>
<p>若把it++，则it会指向“下一个”元素。这里的“下一个”元素是指在元素从小到大排序的结果中，排在it下一名的元素。同理，若把it–，则it将会指向排在“上一个”的元素。</p>
<p>​    begin&#x2F;end</p>
<p>​       返回集合的首、尾迭代器，时间复杂度均为O(1)。</p>
<p>​       s.begin() 是指向集合中最小元素的迭代器。</p>
<p>s.end() 是指向集合中最大元素的下一个位置的迭代器。换言之，就像vector一样，是一个“前闭后开”的形式。因此–s.end()是指向集合中最大元素的迭代器。</p>
<p>​    insert</p>
<p>​       s.insert(x)把一个元素x插入到集合s中，时间复杂度为O(logn)。</p>
<p>​       在set中，若元素已存在，则不会重复插入该元素，对集合的状态无影响。</p>
<p>​    find</p>
<p>s.find(x) 在集合s中查找等于x的元素，并返回指向该元素的迭代器。若不存在，则返回s.end()。时间复杂度为O(logn)。</p>
<p>​    lower_bound&#x2F;upper_bound</p>
<p>​       这两个函数的用法与find类似，但查找的条件略有不同，时间复杂度为 O(logn)。</p>
<p>s.lower_bound(x) 查找大于等于x的元素中最小的一个，并返回指向该元素的迭代器。</p>
<p>s.upper_bound(x) 查找大于x的元素中最小的一个，并返回指向该元素的迭代器。</p>
<p>​    erase</p>
<p>设it是一个迭代器，s.erase(it) 从s中删除迭代器it指向的元素，时间复杂度为O(logn)</p>
<p>设x是一个元素，s.erase(x) 从s中删除所有等于x的元素，时间复杂度为O(k+logn)，其中k是被删除的元素个数。</p>
<p>​    count</p>
<p>​       s.count(x) 返回集合s中等于x的元素个数，时间复杂度为 O(k +logn)，其中k为元素x的个数。</p>
<ol start="6">
<li>#include <map></map></li>
</ol>
<p>map容器是一个键值对key-value的映射，其内部实现是一棵以key为关键码的红黑树。Map的key和value可以是任意类型，其中key必须定义小于号运算符。</p>
<p>​    声明</p>
<p>​       map&lt;key_type, value_type&gt; name;</p>
<p>​       例如：</p>
<p>​       map&lt;long, long, bool&gt; vis;</p>
<p>​       map&lt;string, int&gt; hash;</p>
<p>​       map&lt;pair&lt;int, int&gt;, vector<int>&gt; test;</int></p>
<p>​    size&#x2F;empty&#x2F;clear&#x2F;begin&#x2F;end均与set类似。</p>
<p>​    Insert&#x2F;erase</p>
<p>​       与set类似，但其参数均是pair&lt;key_type, value_type&gt;。</p>
<p>​    find</p>
<p>​       h.find(x) 在变量名为h的map中查找key为x的二元组。</p>
<p>​    []操作符</p>
<p>​       h[key] 返回key映射的value的引用，时间复杂度为O(logn)。</p>
<p>[]操作符是map最吸引人的地方。我们可以很方便地通过h[key]来得到key对应的value，还可以对h[key]进行赋值操作，改变key对应的value。</p>
<p><strong>—————————————————————————————</strong></p>
<p> 卡特兰数递归公式（隶属二叉树）： f（n） &#x3D;  f（n-1）* f（0）+ f(n-2)*  * f(1) + …… + f(1) * f (n - 2) + f(0) * f(n-1);</p>
]]></content>
  </entry>
  <entry>
    <title>c语言后期笔记</title>
    <url>/2023/11/16/c%E7%AC%94%E8%AE%B0%E7%BB%AD/</url>
    <content><![CDATA[<h2 id="字符函数-内存函数使用"><a href="#字符函数-内存函数使用" class="headerlink" title="字符函数&amp;内存函数使用"></a>字符函数&amp;内存函数使用</h2><h3 id="0-NULL-–-空指针"><a href="#0-NULL-–-空指针" class="headerlink" title="0.NULL – 空指针"></a>0.NULL – 空指针</h3><h3 id="NUL-Null-–-‘-0’"><a href="#NUL-Null-–-‘-0’" class="headerlink" title="NUL,Null    – ‘\0’"></a>NUL,Null    – ‘\0’</h3><h3 id="1-strtok函数"><a href="#1-strtok函数" class="headerlink" title="1.strtok函数"></a>1.strtok函数</h3><p>样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">	<span class="type">char</span>* p = <span class="string">&quot;.,&quot;</span>;</span><br><span class="line">	<span class="type">char</span>* ret = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span>(ret = strtok(str,p);ret != <span class="literal">NULL</span>;ret = strtok(<span class="literal">NULL</span>,p))</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ret);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>1.1 函数的作用</p>
<p>​		将字符数组以特定字符分隔开，字符可以是任意几个特定的字符</p>
<p>​		1.2 函数参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">strtok</span><span class="params">(<span class="type">char</span> * str,<span class="type">const</span> <span class="type">char</span> * sep)</span></span><br></pre></td></tr></table></figure>

<p>​		1.3 如果找到特定字符，会直接将原字符数组的该位置字符改为 ‘&#x2F;0’	</p>
<p>​		1.4 传入的str不为空指针NULL，strtok将找到str的第一个标记，并保存他在字符串中的位置</p>
<p>​		1.5 传入的str为空指针NULL，函数将在同一个字符串中被保存的位置开始，查找下一个标记</p>
<p>​		1.6 如果传入的str中有sep函数中两个至多个字符连续存在的情况，也会分隔，而不是空出一个位置</p>
<h3 id="2-strerror函数"><a href="#2-strerror函数" class="headerlink" title="2.strerror函数"></a>2.strerror函数</h3><p>样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// errno是什么和strerror怎么用</span></span><br><span class="line">	<span class="type">char</span>* str = strerror(errno); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//strerror的应用</span></span><br><span class="line">	FILE* pf = fopen(<span class="string">&quot;test.c&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="comment">//以可读方式打开test.c文件 </span></span><br><span class="line">	<span class="keyword">if</span>(pf == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));<span class="comment">//报告错误信息</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,pf);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2.1 函数作用</p>
<p>​	返回错误码所对应的信息,即将错误码转换成一个字符串并返回，告诉程序员报错信息</p>
<p>2.2 errno</p>
<p>​	一个全局变量，即错误码</p>
<p>​	当程序执行过程中出现了错误，就会把对应的错误码赋值到errno中</p>
<p>2.3 对应信息</p>
<p>​	错误码	对应信息</p>
<p>​	0 	– 	NO ERROR 无错误</p>
<p>​	1 	– 	Operation not permitted</p>
<p>​	2 	– 	No such file or directory</p>
<p>​	…</p>
<h3 id="3-字符分类函数"><a href="#3-字符分类函数" class="headerlink" title="3. 字符分类函数"></a>3. 字符分类函数</h3><p>样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">	<span class="type">int</span> st = <span class="built_in">islower</span>(ch);</span><br><span class="line">	<span class="keyword">if</span>(st) <span class="built_in">printf</span>(<span class="string">&quot;是小写字母&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;不是小写字母&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3.1 </p>
<p>函数			如果他的参数符合下列条件就返回真<br>iscntrl			任何控制字符<br>isspace		空白字符:空格’ ‘，换页’\f’，换行’\n’，回车‘\r’，制表符’t’或者垂直制表符’\v’<br>isdigit			十进制数字0-9<br>isxdigit		十六进制数字，包括所有十进制数字，小写字母a<del>f大写字母A</del>F<br>islower		小写字母a-z<br>isupper		大写字母A<del>Z<br>isalpha		字母a</del>z或A<del>Z<br>isalnum		字母或者数字，a</del>z,A<del>Z,0</del>9<br>ispunct		标点符号，任何不属于数字或者字母的图形字符（可打印)<br>isgraph		任何图形字符<br>isprint		任何可打印字符，包括图形字符和空白字符</p>
<p>3.2 字符转换函数</p>
<p>样例 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">	ch = <span class="built_in">toupper</span>(ch);</span><br><span class="line">	<span class="built_in">putchar</span>(ch);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​	tolower函数：转为小写字母</p>
<p>​	toupper函数：转为大写字母</p>
<h3 id="4-strlen函数的返回值为size-t，为无符号数"><a href="#4-strlen函数的返回值为size-t，为无符号数" class="headerlink" title="4.strlen函数的返回值为size_t，为无符号数"></a>4.strlen函数的返回值为size_t，为无符号数</h3><h3 id="5-strcmp-arr1-arr2-比较字符串函数"><a href="#5-strcmp-arr1-arr2-比较字符串函数" class="headerlink" title="5.strcmp(arr1,arr2)比较字符串函数"></a>5.strcmp(arr1,arr2)比较字符串函数</h3><h3 id="6-strncmp函数"><a href="#6-strncmp函数" class="headerlink" title="6.strncmp函数"></a>6.strncmp函数</h3><p>样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* string1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* string2 = <span class="string">&quot;abcefg&quot;</span>;</span><br><span class="line">	<span class="type">int</span> ret = <span class="built_in">strncmp</span>(string1,string2,<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ret);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>6.1 作用</p>
<p>指定前n个长度的字符串比较</p>
<p>6.2 函数参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">strncmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* string1,<span class="type">const</span> <span class="type">char</span>* <span class="built_in">string</span> <span class="number">2</span>, <span class="type">size_t</span> count)</span></span><br></pre></td></tr></table></figure>



<h3 id="7-strstr函数"><a href="#7-strstr函数" class="headerlink" title="7.strstr函数"></a>7.strstr函数</h3><p>样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span>* str1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">	<span class="type">char</span>* str2 = <span class="string">&quot;def&quot;</span>;</span><br><span class="line">	<span class="type">char</span>* ret = <span class="built_in">strstr</span>(str1,str2);</span><br><span class="line">	<span class="keyword">if</span>(ret == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;未找到&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;找到了，接下来的字符串是%s&quot;</span>,ret);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7.1 作用</p>
<p>查找指定字符串，如果找到则返回首字符的地址，如果没找到则返回NULL</p>
<h2 id="内存操作函数-同样需要string-h库函数"><a href="#内存操作函数-同样需要string-h库函数" class="headerlink" title="内存操作函数(同样需要string.h库函数)"></a>内存操作函数(同样需要string.h库函数)</h2><p>样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr1[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">	<span class="type">int</span> arr2[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">memcpy</span>(arr2,arr1,<span class="keyword">sizeof</span>(arr2));</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">5</span>;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr2[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-memcpy内存拷贝函数"><a href="#1-memcpy内存拷贝函数" class="headerlink" title="1. memcpy内存拷贝函数"></a>1. memcpy内存拷贝函数</h3><p>​		1.1 作用</p>
<p>​		处理不重叠的数组拷贝</p>
<h3 id="2-memmove内存拷贝函数"><a href="#2-memmove内存拷贝函数" class="headerlink" title="2.memmove内存拷贝函数"></a>2.memmove内存拷贝函数</h3><p>​	2.1作用</p>
<p>​	处理重叠的数组拷贝</p>
<h3 id="3-两者区别的具体解释"><a href="#3-两者区别的具体解释" class="headerlink" title="3.两者区别的具体解释"></a>3.两者区别的具体解释</h3><p>​	如果从低地址开始拷贝，那么源数据在使用前会被覆盖。除了这种情况，其他情况下都可以保证memcpy拷贝正确。</p>
<p>​	memmove是在memcpy的基础上对所有可能的情况都做了处理；</p>
<p>​	简单的说就是在内存重叠且源数据会被覆盖的情况下选择从高地址开始拷贝，而其他情况下选择从低地址开始拷贝。</p>
<p>​	</p>
]]></content>
  </entry>
  <entry>
    <title>c语言基础难关：按位取反</title>
    <url>/2023/11/16/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E9%9A%BE%E5%85%B3%EF%BC%9A%E6%8C%89%E4%BD%8D%E5%8F%96%E5%8F%8D/</url>
    <content><![CDATA[<h2 id="1-理解按位取反的前提"><a href="#1-理解按位取反的前提" class="headerlink" title="1.理解按位取反的前提"></a>1.理解按位取反的前提</h2><h3 id="符号位"><a href="#符号位" class="headerlink" title="符号位"></a>符号位</h3><p>二进制最前端的1代表负数，0代表正数，符号位一般会占据最前端<br>比如1字节数的0可以表示为</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[<span class="number">0000</span> <span class="number">0000</span>]</span><br></pre></td></tr></table></figure>
<p>1个字节最大存储数为</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[<span class="number">0111</span> <span class="number">1111</span>] 或 [<span class="number">1111</span> <span class="number">1111</span>]</span><br><span class="line">分别是<span class="number">2</span>的<span class="number">8</span>次方<span class="number">-1</span>，即 <span class="number">255</span> 和 <span class="number">-255</span></span><br><span class="line">符号位占据了一个比特位</span><br></pre></td></tr></table></figure>
<h3 id="原码反码补码的相互转化"><a href="#原码反码补码的相互转化" class="headerlink" title="原码反码补码的相互转化"></a>原码反码补码的相互转化</h3><h4 id="正数的相互转化"><a href="#正数的相互转化" class="headerlink" title=" 正数的相互转化 "></a><font color="red"> 正数的相互转化 </font></h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">原码：符号位为0，其后将十进制转化为二进制，得到的就是其原码</span><br><span class="line">反码：与原码相同</span><br><span class="line">补码：与原码相同</span><br></pre></td></tr></table></figure>
<h4 id="负数的相互转化"><a href="#负数的相互转化" class="headerlink" title=" 负数的相互转化 "></a><font color="red"> 负数的相互转化 </font></h4><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">原码：符号位为1，其后将十进制转化为二进制，得到的就是其原码</span><br><span class="line">反码：符号位不变，其余都进行取反，原先为1的变为0，原先为0的变为1</span><br><span class="line">补码：反码<span class="string">+1</span></span><br></pre></td></tr></table></figure>
<p>举例 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">正数  <span class="number">1</span> --- [<span class="number">0000</span> <span class="number">0001</span>]原 --- [<span class="number">0000</span> <span class="number">0001</span>]反 --- [<span class="number">0000</span> <span class="number">0001</span>]补</span><br><span class="line">负数 <span class="number">-1</span> --- [<span class="number">1000</span> <span class="number">0001</span>]原 --- [<span class="number">1111</span> <span class="number">1110</span>]反 --- [<span class="number">1111</span> <span class="number">1111</span>]补</span><br></pre></td></tr></table></figure>
<h2 id="2-按位取反的具体逻辑"><a href="#2-按位取反的具体逻辑" class="headerlink" title="2.按位取反的具体逻辑"></a>2.按位取反的具体逻辑</h2><p> <font color="blue"> 得到新补码后要注意符号位是什么，如果为1则继续推演，如果为0，则得到的新补码就是新原码</font><br> 步骤</p>
<h4 id="（1）得到该数的补码"><a href="#（1）得到该数的补码" class="headerlink" title="（1）得到该数的补码"></a>（1）得到该数的补码</h4><h4 id="（2）对补码取反，得到新的补码"><a href="#（2）对补码取反，得到新的补码" class="headerlink" title="（2）对补码取反，得到新的补码"></a>（2）对补码取反，得到新的补码</h4><h4 id="（3）-对新补码反向求原码"><a href="#（3）-对新补码反向求原码" class="headerlink" title="（3） 对新补码反向求原码"></a>（3） 对新补码反向求原码</h4><p>  <font color="blue"> 对于得到新补码逆向求出新原码的过程</font></p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">如果把负数原码到补码的过程当作通用的流程</span><br><span class="line">那么原码到反码，先要保留符号位，然后再对原码取反</span><br><span class="line">最后反码加<span class="number">1</span>得到补码</span><br><span class="line">那么逆向过程 补码 -&gt; 反码-&gt; 原码 </span><br><span class="line">则为</span><br><span class="line">补码减一得到反码</span><br><span class="line">反码再保留符号位得到原码</span><br></pre></td></tr></table></figure>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>的按位取反</span><br><span class="line"><span class="number">1.</span>得到补码</span><br><span class="line">	 [<span class="number">0000</span> <span class="number">0000</span>]原码</span><br><span class="line">	 由于正数的原码反码补码相同，则</span><br><span class="line">	 [<span class="number">0000</span> <span class="number">0000</span>]为补码</span><br><span class="line"><span class="number">2.</span>对补码取反，得到新的补码</span><br><span class="line">	[<span class="number">0000</span> <span class="number">0000</span>]  原先的补码</span><br><span class="line">	[<span class="number">1111</span> <span class="number">1111</span>]新补码</span><br><span class="line">	</span><br><span class="line"><span class="number">3.</span>逆向求原码</span><br><span class="line">	补码减一得到反码</span><br><span class="line">	[<span class="number">1111</span> <span class="number">1110</span>]新反码</span><br><span class="line">	 反码取反得到原码</span><br><span class="line">	 则符号不变，其余取反</span><br><span class="line">	 [<span class="number">1000</span> <span class="number">0001</span>] 新原码</span><br><span class="line">	 </span><br></pre></td></tr></table></figure>
<p> 根据计算器可看出来推演正确<br> <img src="https://img-blog.csdnimg.cn/9cee5a5a1b844c46b7bb198cdfec69bb.png" alt="在这里插入图片描述"></p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="number">-2</span>的按位取反</span><br><span class="line"><span class="number">1.</span>得到原码</span><br><span class="line">	[<span class="number">1000</span> <span class="number">0010</span>] 原码</span><br><span class="line">	 得到反码时符号位不变,其余取反</span><br><span class="line">    [<span class="number">1111</span> <span class="number">1101</span>]  反码</span><br><span class="line">	 反码加<span class="number">1</span>得补码</span><br><span class="line">    [<span class="number">1111</span> <span class="number">1110</span>] 补码</span><br><span class="line"><span class="number">2.</span>对补码取反，得到新的原码</span><br><span class="line">	[<span class="number">1111</span> <span class="number">1110</span>] 原先的补码</span><br><span class="line">	取反</span><br><span class="line">	[<span class="number">0000</span> <span class="number">0001</span>] 新补码</span><br><span class="line">	由于新补码符号位为<span class="number">0</span>，则其新原码与其新补码相同</span><br><span class="line">	[<span class="number">0000</span> <span class="number">0001</span>] 新原码</span><br></pre></td></tr></table></figure>
<p>根据计算器可知演算过程正确</p>
<p> <img src="https://img-blog.csdnimg.cn/75f0f862c84c4ea9886994b276256cd4.png" alt="在这里插入图片描述"></p>
<h2 id="一些简便按位取反的简便计算"><a href="#一些简便按位取反的简便计算" class="headerlink" title="一些简便按位取反的简便计算"></a>一些简便按位取反的简便计算</h2><p>取反的符号为’ ~ ‘<br>    1.一个数取反再取反便是他本身，例如 ~ （ ~ 100 ） &#x3D; 100<br>    2.负数的取反可由公式直接推得<br>        公式 <strong>~x&#x3D;-(x+1)</strong><br>        例如~ （-100） &#x3D; - （-100 + 1） &#x3D; 99<br>        也可以理解为负数的取反就是 负数的绝对值减1<br>        即 ~ （100）&#x3D; |-100| - 1 &#x3D; 99</p>
<h1 id="请给本菜鸟一个点赞和收藏吧"><a href="#请给本菜鸟一个点赞和收藏吧" class="headerlink" title=" 请给本菜鸟一个点赞和收藏吧 "></a><font color="red"> 请</font><font color="orange">给</font><font color="brown">本</font><font color="green">菜</font><font color="cyan">鸟</font><font color="blue">一</font><font color="red">个</font><font color="orange">点</font><font color="brown">赞</font><font color="green">和</font><font color="cyan">收</font><font color="blue">藏</font><font color="purple">吧 </font></h1>]]></content>
  </entry>
  <entry>
    <title>dfs与bfs</title>
    <url>/2023/11/16/dfs%E4%B8%8Ebfs/</url>
    <content><![CDATA[<h2 id="深度优先搜素（dfs）"><a href="#深度优先搜素（dfs）" class="headerlink" title="深度优先搜素（dfs）"></a>深度优先搜素（dfs）</h2><p>对二叉树尽可能地往节点的终点搜索，只有走到终点才会返回到分叉路口</p>
<p>特点：执着，不撞南墙不回头</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6ad7cbc75522457302f33e2447ed575d.gif" alt="Depth-first search - PEGWiki"></p>
<h2 id="宽度优先搜素（bfs）"><a href="#宽度优先搜素（bfs）" class="headerlink" title="宽度优先搜素（bfs）"></a>宽度优先搜素（bfs）</h2><p>对二叉树一层层搜索，只有该层完全搜索完成后才会进行到下一层</p>
<p>特点：稳重，喜欢薅羊毛</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e7aca08845d800b8e313a9dca25e912d.gif" alt="img"></p>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>从使用的数据结构来看，dfs使用的是栈，bfs使用的是队列</p>
<p>从使用空间看，dfs只需记录这条路径的所有点，空间复杂度为O（h），bfs记录每层的节点，空间复杂度为O（z ^ h），该特点使bfs有了一个最短路的概念</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h3 id="全排列问题（dfs）"><a href="#全排列问题（dfs）" class="headerlink" title="全排列问题（dfs）"></a>全排列问题（dfs）</h3><p>dfs俗称暴搜，他的关键是顺序</p>
<p>题目描述</p>
<p>按照字典序输出自然数 1 到 n 所有不重复的排列，即 n 的全排列，要求所产生的任一数字序列中不允许出现重复的数字。</p>
<p>输入格式</p>
<p>一个整数 n。</p>
<p>输出格式</p>
<p>由 1 - n组成的所有不重复的数字序列，每行一个序列。</p>
<p>每个数字保留 5场宽。</p>
<p>样例 #1</p>
<p>样例输入 #1</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<p>样例输出 #1</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">   <span class="attribute">1</span>    <span class="number">3</span>    <span class="number">2</span></span><br><span class="line">   <span class="attribute">2</span>    <span class="number">1</span>    <span class="number">3</span></span><br><span class="line">   <span class="attribute">2</span>    <span class="number">3</span>    <span class="number">1</span></span><br><span class="line">   <span class="attribute">3</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">   <span class="attribute">3</span>    <span class="number">2</span>    <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>提示</p>
<p>1≤<em>n</em>≤9。</p>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设排列1-3</span></span><br><span class="line"><span class="comment">//当你一个数填2时，后面两个的数就不能和前面一样</span></span><br><span class="line"><span class="comment">//如果某一子路径走完了，就需要回溯到上一节点，枚举下一节点</span></span><br><span class="line"><span class="comment">//回溯的同时要记得恢复现场，将改变的变回来</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> path[N];</span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//默认为false，如果为true表示该层的某个数被占用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span><span class="comment">//u即层数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (u == n)<span class="comment">//代表path数组填满了，该条路劲走完 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>, path[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)<span class="comment">//排 1 2 3</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!st[i])<span class="comment">//判断哪个数被占用</span></span><br><span class="line">		&#123;</span><br><span class="line">			path[u] = i;</span><br><span class="line">			st[i] = <span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">			st[i] = <span class="literal">false</span>;<span class="comment">//恢复现场</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h3><p>关键：剪枝，即遇到不合理的情况立刻回溯</p>
<p><img src="https://img-blog.csdnimg.cn/936dd9c697ea4a798da385fe9f6359b8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5L6d5ZirX-WQg-S7o-eggQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="n皇后问题"></p>
<p>输入格式<br>共一行，包含整数 n。</p>
<p>输出格式<br>每个解决方案占 n 行，每行输出一个长度为 n 的字符串，用来表示完整的棋盘状态。</p>
<p>其中 . 表示某一个位置的方格状态为空，Q 表示某一个位置的方格上摆着皇后。</p>
<p>每个方案输出完成后，输出一个空行。</p>
<p>注意：行末不能有多余空格。</p>
<p>输出方案的顺序任意，只要不重复且没有遗漏即可。</p>
<p>数据范围<br>1≤n≤9<br>输入样例：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.Q</span>…</span><br><span class="line">…<span class="selector-tag">Q</span></span><br><span class="line"><span class="selector-tag">Q</span>…</span><br><span class="line">…<span class="selector-tag">Q</span>.</span><br><span class="line"></span><br><span class="line">…<span class="selector-tag">Q</span>.</span><br><span class="line"><span class="selector-tag">Q</span>…</span><br><span class="line">…<span class="selector-tag">Q</span></span><br><span class="line"><span class="selector-class">.Q</span>…</span><br></pre></td></tr></table></figure>

<h3 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> col[N], dg[N],udg[N];<span class="comment">//列，对角线，反对角线</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (u == n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, g[i]);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!col[i] &amp;&amp; dg[u + i] &amp;&amp; udg[n - u + i])</span><br><span class="line">		&#123;</span><br><span class="line">			g[u][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">			col[i] = dg[u + i] = udg[n - u + i] = <span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">			col[i] = dg[u + i] = udg[n - u + i] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">			g[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="真全排列"><a href="#真全排列" class="headerlink" title="真全排列"></a>真全排列</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1-9 9个数凑一个等式，其中每个数由3个数字组成</span></span><br><span class="line"><span class="comment">//比如 124 + 659 = 783</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="type">bool</span> st[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (u == <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[<span class="number">1</span>] * <span class="number">100</span> + a[<span class="number">2</span>] * <span class="number">10</span> + a[<span class="number">3</span>] + a[<span class="number">4</span>] * <span class="number">100</span> + a[<span class="number">5</span>] * <span class="number">10</span> + a[<span class="number">6</span>] == a[<span class="number">7</span>] * <span class="number">100</span> + a[<span class="number">8</span>] * <span class="number">10</span> + a[<span class="number">9</span>])<span class="comment">//判断是否符合9个数刚好能得到正确结果</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d%d%d + %d%d%d = %d%d%d\n&quot;</span>, a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>], a[<span class="number">4</span>], a[<span class="number">5</span>], a[<span class="number">6</span>], a[<span class="number">7</span>], a[<span class="number">8</span>],a[<span class="number">9</span>]);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">9</span>;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!st[i])</span><br><span class="line">		&#123;</span><br><span class="line">			a[u] = i;</span><br><span class="line">			st[i] = <span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">			st[i] = <span class="literal">false</span>;<span class="comment">//恢复现场</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);<span class="comment">//从1开始遍历</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="走迷宫（bfs）"><a href="#走迷宫（bfs）" class="headerlink" title="走迷宫（bfs）"></a>走迷宫（bfs）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> g[N][N];<span class="comment">//记录图形</span></span><br><span class="line"><span class="type">int</span> d[N][N];<span class="comment">//记录路径数</span></span><br><span class="line">queue&lt;PII&gt; q;<span class="comment">//起始位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">	d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	q.<span class="built_in">push</span>(&#123; <span class="number">0</span>,<span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;, dy[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		PII t = q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x = t.first + dx[i], y = t.second + dy[i];</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m &amp;&amp; g[x][y] == <span class="number">0</span> &amp;&amp; d[x][y] == <span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				d[x][y] = d[t.first][t.second] + <span class="number">1</span>;<span class="comment">//路径数 + 1</span></span><br><span class="line">				q.<span class="built_in">push</span>(&#123;x,y&#125;);<span class="comment">//下一次起始位置</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> d[n - <span class="number">1</span>][m - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; m;++j)</span><br><span class="line">			cin &gt;&gt; g[i][j];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">bfs</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/11/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>html学习</title>
    <url>/2024/01/14/html%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>本次笔记根据mdn学习,如有问题请私信</p>
</blockquote>
<h1 id="第一阶段-初步认识"><a href="#第一阶段-初步认识" class="headerlink" title="第一阶段:初步认识"></a>第一阶段:初步认识</h1><p>前置工作</p>
<p>拥有一个可以使用的浏览器及集成开发器,例如webstorm</p>
<h2 id="什么是html"><a href="#什么是html" class="headerlink" title="什么是html"></a>什么是html</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTML">HTML</a>（HyperText Markup Language，超文本标记语言）是一种用来告知浏览器如何组织页面的<em>标记语言</em>。</p>
<p>HTML 由一系列的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Element">元素</a>组成，这些元素可以用来包围或<em>标记</em>不同部分的内容，使其以某种方式呈现或者工作。两端的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Tag">标签</a>可以使内容变成超链接，以连接到另一个页面；使字体表现为斜体等。</p>
<p>例如将一段文字封装成段落,进行单独展示可以使用</p><p>封装</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My cat is very grumpy<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>html不区分大小写,标签 <title>可以写作 <code>&lt;title&gt;</code>、<code>&lt;TITLE&gt;</code>、<code>&lt;Title&gt;</code>、<code>&lt;TiTlE&gt;</code> 等，也都可以正常工作。不过，从一致性、可读性来说，最好仅使用小写字母。</title></p>
</blockquote>
<h2 id="剖析一个html元素"><a href="#剖析一个html元素" class="headerlink" title="剖析一个html元素"></a>剖析一个html元素</h2><p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/grumpy-cat-small.png" alt="一个示范性的代码片断，展示了 html 元素 &lt;p&gt; My cat is very grumpy &lt;/p&gt; 的结构。"></p>
<ul>
<li><strong>开始标签</strong>（Opening tag）：包含元素的名称（本例为 <em>p</em>），被左、右角括号所包围。开头标签标志着元素开始或开始生效的地方。在这个示例中，它在段落文本的开始之前。</li>
<li><strong>内容</strong>（Content）：元素的内容，本例中就是段落的文本。</li>
<li><strong>结束标签</strong>（Closing tag）：与开始标签相似，只是其在元素名之前包含了一个斜杠。这标志着该元素的结束。没有包含关闭标签是一个常见的初学者错误，它可能会产生奇特的结果。</li>
</ul>
<p>整个元素即指开始标签、内容、结束标签三部分组成的整体。</p>
<h3 id="创建第一个html元素"><a href="#创建第一个html元素" class="headerlink" title="创建第一个html元素"></a>创建第一个html元素</h3><p>使用 标签&lt;em&gt;和&lt;&#x2F;em&gt;包裹一块内容,。在前面放置 <code>&lt;em&gt;</code> 以<em>打开元素</em>，在后面放置 <code>&lt;/em&gt;</code> 以<em>关闭元素</em>。这样编辑使得行内容变成<em>斜体</em>强调</p>
<p>例如abcd</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>abcd<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实现效果为: <em>abcd</em></p>
<h3 id="嵌套元素"><a href="#嵌套元素" class="headerlink" title="嵌套元素"></a>嵌套元素</h3><p>你也可以把元素放到其他元素之中——这被称作<em>嵌套</em>。如果我们想要表明我们的小猫脾气<strong>很</strong>暴躁，可以将 <em>very</em> 一词嵌套在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/strong">&#96;&#96;</a> 元素中，意味着这个单词被着重强调</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我们的小猫脾气<span class="tag">&lt;<span class="name">strong</span>&gt;</span>很<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>暴躁<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="块级元素和内联元素"><a href="#块级元素和内联元素" class="headerlink" title="块级元素和内联元素"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started#%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E5%92%8C%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0">块级元素和内联元素</a></h3><p>在 HTML 中有两种你需要知道的重要元素类别，块级元素和内联元素。</p>
<ul>
<li><p>块级元素在页面中以块的形式展现。一个块级元素出现在它前面的内容之后的新行上。任何跟在块级元素后面的内容也会出现在新的行上。块级元素通常是页面上的结构元素。例如，一个块级元素可能代表标题、段落、列表、导航菜单或页脚。一个块级元素不会嵌套在一个内联元素里面，但它可能嵌套在另一个块级元素里面。</p>
</li>
<li><p>内联元素通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行。</p>
<p>实际上区别就在于这个标签用了会不会换行, 会进行换行的元素可能嵌套一个不会换行的,一个不会换行的不会嵌套一个会换行的标签</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>第一<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>第二<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>第三<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第四<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第五<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第六<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">第一第二第三</span><br><span class="line">第四</span><br><span class="line"></span><br><span class="line">第五</span><br><span class="line"></span><br><span class="line">第六</span><br></pre></td></tr></table></figure>

<p>&lt;em&gt;标签就是内联元素,&lt;p&gt;就是块级元素</p>
<h3 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h3><p>不是所有元素都拥有开始标签、内容和结束标签。一些元素只有一个标签，通常用来在此元素所在位置插入&#x2F;嵌入一些东西。这些元素被称为<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Void_element">空元素</a>。例如：元素 &lt;img&gt;是用来在页面插入一张指定的图片</p>
<p>例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://roy-tian.github.io/learning-area/extras/getting-started-web/beginner-html-site/images/firefox-icon.png&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">&quot;Firefox 图标&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示为</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/firefox-icon.png" alt="Firefox 图标"></p>
<blockquote>
<p>在html中,无需在末尾加一个&#x2F;, 然而，这也是一种有效的语法，当你希望你的 HTML 是有效的 XML 时，这么做也没问题。</p>
</blockquote>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>元素也可以拥有属性，属性看起来像这样：</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/grumpy-cat-attribute-small.png" alt="含有‘class=&quot;editor-note&quot;’属性的段落标签"></p>
<p>属性包含元素的额外信息，这些信息不会出现在实际的内容中。在上述例子中，这个 <strong><code>class</code></strong> 属性是一个识别名称，以后为元素设置样式信息时更加方便。</p>
<p>属性必须包含：</p>
<ul>
<li>一个空格，它在属性和元素名称之间。如果一个元素具有多个属性，则每个属性之间必须由空格分隔。</li>
<li>属性名称，后面跟着一个等于号。</li>
<li>一个属性值，由一对引号（””）引起来。</li>
</ul>
<h3 id="为元素添加属性"><a href="#为元素添加属性" class="headerlink" title="为元素添加属性"></a>为元素添加属性</h3><p>另一个例子是关于元素&lt;a&gt; 是<em>锚</em>，它使被标签包裹的内容成为一个超链接。锚元素可以添加多种属性，部分如下：</p>
<ul>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started#href"><code>href</code></a></p>
<p>这个属性声明超链接的 web 地址。例如 <code>href=&quot;https://www.mozilla.org/&quot;</code>。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started#title"><code>title</code></a></p>
<p><code>title</code> 属性为超链接声明额外的信息，比如你将链接至的那个页面。例如 <code>title=&quot;The Mozilla homepage&quot;</code>。当鼠标悬停在超链接上面时，这部分信息将以工具提示的形式显示。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started#target"><code>target</code></a></p>
<p><code>target</code> 属性用于指定链接如何呈现出来。例如，<code>target=&quot;_blank&quot;</code> 将在新标签页中显示链接。如果你希望在当前标签页显示链接，忽略这个属性即可。</p>
</li>
</ul>
<p>例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>a <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;大型交友网站&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>web<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240114224629200.png" alt="image-20240114224629200"></p>
<h3 id="布尔属性"><a href="#布尔属性" class="headerlink" title="布尔属性"></a>布尔属性</h3><p>有时你会看到没有值的属性，这也是完全可以接受的。这些属性被称为布尔属性。布尔属性只能有一个值，这个值一般与属性名称相同。例如，考虑 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#disabled"><code>disabled</code></a> 属性，你可以将其分配给表单输入元素。用它来禁用表单输入元素，这样用户就不能输入了。被禁用的元素通常有一个灰色的外观。示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 disabled 属性来防止终端用户输入文本到输入框中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 下面这个输入框不包含 disabled 属性，所以用户可以向其中输入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="省略包围属性值的引号"><a href="#省略包围属性值的引号" class="headerlink" title="省略包围属性值的引号"></a>省略包围属性值的引号</h3><p>如果你看了很多其他网站的代码，你可能会遇到一些奇怪的标记风格，包括没有引号的属性值。在某些情况下它是被允许的，但是其他情况下会破坏你的标记。例如，针对之前的链接示例，我们可以像这样写一个只拥有一个 <code>href</code> 属性的版本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">https://www.mozilla.org/</span>&gt;</span>favorite website<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然而，当我们再添加一个 <code>title</code> 属性时，就会出现问题：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">https://www.mozilla.org/</span> <span class="attr">title</span>=<span class="string">The</span> <span class="attr">Mozilla</span> <span class="attr">homepage</span>&gt;</span>favorite website<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  x</span><br></pre></td></tr></table></figure>

<p>此时浏览器会误解你的标记，它会把 <code>title</code> 属性理解为三个属性——title 的属性值为 <code>The</code>，另外还有两个布尔属性 <code>Mozilla</code> 和 <code>homepage</code>，很明显不是我们所期望的</p>
<p>我们建议始终添加引号——这样可以避免很多问题，并且使代码更易读。</p>
<p>在目前为止，本章内容所有的属性都是由双引号来包裹。然而，你也许在一些 HTML 中也见过单引号。这只是风格的问题，你可以从中选择一个你喜欢的。以上两种情况都可以,但应该注意单引号和双引号不能在一个属性值里面混用。语法是错误的</p>
<p>在一个 HTML 中已使用一种引号，你可以在此引号<em>中</em>嵌套另外一种引号</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.example.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;你觉得&#x27;好玩吗&#x27;？&quot;</span>&gt;</span>示例站点链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="剖析html文档"><a href="#剖析html文档" class="headerlink" title="剖析html文档"></a>剖析html文档</h2><p>单独的 HTML 元素本身并不十分有用。接下来，我们来看看单个元素是如何组合成整个 HTML 页面的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是注释 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>a <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;大型交友网站&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>web<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 产生一个禁止使用的表格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 产生一个可以使用的表格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用单引号和双引号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是<span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">&#x27;&quot;双引号&quot;&#x27;</span>&gt;</span>&quot;双引号&quot;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是<span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">&quot;&#x27;单引号&#x27;&quot;</span>&gt;</span>&#x27;单引号&#x27;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p><code>&lt;!DOCTYPE html&gt;</code>: 声明文档类型。早期的 HTML（大约 1991-1992 年）文档类型声明类似于链接，规定了 HTML 页面必须遵从的良好规则，能自动检测错误和其他有用的东西。文档类型使用类似于这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文档类型是一个历史遗留问题，需要包含它才能使其他东西正常工作。现在，只需要知道 <code>&lt;!DOCTYPE html&gt;</code> 是最短的有效文档声明</p>
</li>
<li><p><code>&lt;html&gt;&lt;/html&gt;</code>:&lt;html&gt;元素。这个元素包裹了页面中所有的内容，有时被称为根元素</p>
</li>
<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: &lt;head&gt;元素。这个元素是一个容器，它包含了所有你想包含在 HTML 页面中但<strong>不在 HTML 页面中显示</strong>的内容。这些内容包括你想在搜索结果中出现的关键字和页面描述、CSS 样式、字符集声明等等。以后的章节中会学到更多相关的内容</p>
</li>
<li><p><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>:&lt;meta&gt; 元素。这个元素代表了不能由其他 HTML 元相关元素表示的元数据，&lt;charset&gt;将你的文档的字符集设置为 UTF-8，其中包括绝大多数人类书面语言的大多数字符。有了这个设置，页面现在可以处理它可能包含的任何文本内容。没有理由不对它进行设置，它可以帮助避免以后的一些问题。</p>
</li>
<li><p><code>&lt;title&gt;&lt;/title&gt;</code>:&lt;title&gt; 元素。这设置了页面的标题，也就是出现在该页面加载的浏览器标签中的内容。当页面被加入书签时，页面标题也被用来描述该页面</p>
</li>
<li><p><code>&lt;body&gt;&lt;/body&gt;</code>:&lt;body&gt; 元素。包含了你访问页面时<em>所有</em>显示在页面上的内容，包含文本、图片、视频、游戏、可播放音频轨道等等。</p>
</li>
</ol>
<h3 id="为html添加一些特征"><a href="#为html添加一些特征" class="headerlink" title="为html添加一些特征"></a>为html添加一些特征</h3><ol>
<li>复制上面的 HTML 页面例子。</li>
<li>在文字编辑器创建一个新文件。</li>
<li>粘贴代码到这个文件。</li>
<li>保存为 <code>index.html</code></li>
</ol>
<p>样例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是注释 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>a <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;大型交友网站&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>web<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 产生一个禁止使用的表格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 产生一个可以使用的表格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用单引号和双引号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是<span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">&#x27;&quot;双引号&quot;&#x27;</span>&gt;</span>&quot;双引号&quot;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是<span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">&quot;&#x27;单引号&#x27;&quot;</span>&gt;</span>&#x27;单引号&#x27;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>经典古诗词<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>相思无用，惟别而已。别期若有定，<span class="tag">&lt;<span class="name">em</span>&gt;</span>千般煎熬又何如？<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>莫道黯然销魂，<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>何处柳暗花明？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>--《<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://zh.wikipedia.org/zh-hans/神鵰俠侶&quot;</span>&gt;</span>神雕侠侣&quot;神雕侠侣<span class="tag">&lt;/<span class="name">a</span>&gt;</span>》<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://roy-tian.github.io/learning-area/extras/tools/playable-code/images/sdxl.jfif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;神雕侠侣封面&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="html中的空白"><a href="#html中的空白" class="headerlink" title="html中的空白"></a>html中的空白</h3><p>在上面的例子中，你可能已经注意到了在代码中包含了很多的空格——这是没有必要的；下面的两个代码片段是等价的：</p>
<p>无论你在 HTML 元素的内容中使用多少空格（包括一个或多个空白字符或换行），当渲染这些代码的时候，HTML 解释器会将连续出现的空白字符减少为一个单独的空格符。</p>
<h3 id="html注释"><a href="#html注释" class="headerlink" title="html注释"></a>html注释</h3><p>HTML 拥有在代码中写注释的机制。浏览器会忽略注释，有效地使注释对用户来说不可见。注释的目的是让你在代码中加入注释，以解释你的逻辑或编码。如果你在离开很久后回到一个代码库，以至于你不能完全记住它，这就非常有用。同样，当不同的人在进行修改和更新时，注释也是非常宝贵的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我在注释外！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;p&gt;我在注释内！&lt;/p&gt; --&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="HTML元信息–”头”里有什么"><a href="#HTML元信息–”头”里有什么" class="headerlink" title="HTML元信息–”头”里有什么"></a>HTML元信息–”头”里有什么</h1><h3 id="什么是html头部"><a href="#什么是html头部" class="headerlink" title="什么是html头部"></a>什么是html头部</h3><p>HTML 头部包含 HTML &lt;head&gt;元素的内容，与&lt;body&gt; 元素内容不同，页面在浏览器加载后它的内容不会在浏览器中显示，它的作用是保存页面的一些<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Metadata">元数据</a>。上述示例的头部非常简短：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加标题"><a href="#添加标题" class="headerlink" title="添加标题"></a>添加标题</h3><ul>
<li><p>&lt;h1&gt;元素在页面加载完毕时显示在页面中，通常只出现一次，用来标记页面内容的标题（故事名称、新闻摘要等等）。</p>
</li>
<li><p>&lt;title&gt;元素是一项元数据，用于表示整个 HTML 文档的标题（而不是文档内容）</p>
</li>
</ul>
<h3 id="元数据-元素"><a href="#元数据-元素" class="headerlink" title="元数据:&lt;meta&gt;元素"></a>元数据:&lt;meta&gt;元素</h3><p>元数据就是描述数据的数据，而 HTML 有一个“官方的”方式来为一个文档添加元数据——&lt;meta&gt;元素。当然，其他在这篇文章中提到的东西也可以被当作元数据。有很多不同种类的 <code>&lt;meta&gt;</code> 元素可以被包含进你的页面的&lt;head&gt; 元素，但是现在我们还不会尝试去解释所有类型，这只会引起混乱。我们会解释一些你常会看到的类型，先让你有个概念。</p>
<h4 id="添加作者和描述"><a href="#添加作者和描述" class="headerlink" title="添加作者和描述"></a>添加作者和描述</h4><p>许多 <code>&lt;meta&gt;</code> 元素包含了 <code>name</code> 和 <code>content</code> 属性：</p>
<ul>
<li><code>name</code> 指定了 meta 元素的类型；说明该元素包含了什么类型的信息。</li>
<li><code>content</code> 指定了实际的元数据内容。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;niepandou&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;This note is rooted in mdn Web,which provide a good understanding contents.&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="换课了-重学一下"><a href="#换课了-重学一下" class="headerlink" title="换课了,重学一下"></a>换课了,重学一下</h1><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="标签语法"><a href="#标签语法" class="headerlink" title="标签语法"></a>标签语法</h2><p>比如加粗,我们创建后缀为html的文件,进行编辑</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗内容<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此为标签语法</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202211306541.png" alt="image-20240202211306541"></p>
<p>同时,标签分为单标签和双标签,上面所使用的就是双标签,例如&lt;hr&gt;就为单标签,能够创建水平线</p>
<ul>
<li>课后提问</li>
</ul>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202211849342.png" alt="image-20240202211849342"></p>
<ul>
<li><p>答案:</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202211933822.png" alt="image-20240202211933822"></p>
</li>
</ul>
<h2 id="html骨架"><a href="#html骨架" class="headerlink" title="html骨架"></a>html骨架</h2><p>html基本骨架就是网页模板</p>
<ul>
<li><p>html:整个网页</p>
</li>
<li><p>head:网页头部,存放给浏览器看的代码,例如css,类似类的作用</p>
</li>
<li><p>body:网页主体,存放用户看的代码</p>
</li>
<li><p>title:网页标题</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202212204081.png" alt="image-20240202212204081"></p>
</li>
</ul>
<p>一般情况下,WebStorm创建html文件时会自动创建模板</p>
<h2 id="标签的关系"><a href="#标签的关系" class="headerlink" title="标签的关系"></a>标签的关系</h2><p>用于明确代码的书写位置</p>
<ul>
<li>父子关系</li>
<li>兄弟关系(并列关系)</li>
</ul>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202213440845.png" alt="image-20240202213440845"></p>
<p>上述代码head,body和html为父子关系,head和body为兄弟关系</p>
<p><strong>我们再书写代码时,父子关系则可以父包子这种形式写,兄弟关系可以换行进行平级写</strong></p>
<p>我们还可以发现,html和body,head有缩进的形式,WebStorm为我们自动识别了其父子关系</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202214042768.png" alt="image-20240202214042768"></p>
<p>注释由&lt;!–和–&gt;组成,不会在浏览器显示</p>
<p>一般添加删除注释的快捷键为crtl+&#x2F;,crtl+?</p>
<p>未注释版</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">这是文字,能看见吗</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注释版</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这是文字,能看见吗--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202215302737.png" alt="image-20240202215302737"></p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202215330149.png" alt="image-20240202215330149"></p>
<p>课后提问</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202215618146.png" alt="image-20240202215618146"></p>
<p>答案</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202215624946.png" alt="image-20240202215624946"></p>
<h2 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h2><p>一般用在新闻标题,文章标题,网页区域名称,产品名称等</p>
<p>标签名:h1 - h6(双标签)</p>
<p>代码演示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果<img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202215839694.png" alt="image-20240202215839694"></p>
<p>特点:</p>
<ul>
<li>文字加粗</li>
<li>字号逐渐减小</li>
<li>独占一行</li>
</ul>
<p>一般情况下,h1</p>
<p>标签在一个网页中只用一次,用来放新闻标题或logo	</p>
<ul>
<li><em>课后提问</em></li>
</ul>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202220515700.png" alt="image-20240202220515700"></p>
<h2 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h2><p>一般用在新闻段落,文章段落,产品描述信息等</p>
<p>标签名:p(双标签)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>近日，韩国现代汽车集团向美国提交意见书，指出将“受关注外国实体”从电动汽车电池供应链中剔除不现实。现代汽车针对的是1月起生效的美国《通胀削减法案》电动汽车补贴细则，不满的是细则欲将中国企业排除在电池供应链外。此项歧视性贸易保护主义措施目的很明显，就是想把电动汽车产业链拉回美国，与美国政府当前实施的半导体“脱钩”政策如出一辙。不同之处在于，美国这次“脱钩”更加困难重重，因为在电动汽车电池领域，中国企业处于绝对主导地位。也正因此，上述措施一推行就引起日韩甚至美国本国车企的阵痛和反对。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>根据《通胀削减法案》电动汽车补贴细则，从今年起符合税收减免条件的在美销售电动汽车不得包含任何“受关注外国实体”制造或组装的电池组件，“受关注外国实体”包括中国企业。鉴于当前电动汽车电池生产所需的大量采矿、提炼和零部件制造都在中国进行，这一新规被普遍视为针对中国。这也意味着，美国不少电动车企需要重新调整自己的电池供应链结构，导致成本将极大攀升。《韩国经济》等多家韩媒日前报道称，韩国车企纷纷提交意见书，呼吁美国政府放宽对华采购限制。日本电池制造商松下控股也向美施压说，美国严苛的补贴新规会将更多电动汽车制造商推向美国以外国家。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202221158772.png" alt="image-20240202221158772"></p>
<h2 id="换行与水平线标签"><a href="#换行与水平线标签" class="headerlink" title="换行与水平线标签"></a>换行与水平线标签</h2><p>换行:br(单标签)</p>
<p>实现换行效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">内容1</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">内容2</span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202221447932.png" alt="image-20240202221447932"></p>
<p>水平线:hr(单标签)</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202222309490.png" alt="image-20240202222309490"></p>
<h2 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h2><p>可以给文本添加特殊格式,以突出重点,比如加粗,斜体,下划线,删除线</p>
<p>加粗:strong或b</p>
<p>倾斜:em或i</p>
<p>下划线:ins或u</p>
<p>删除线:del或s</p>
<p>一般情况下或选择strong,em,ins,del进行格式化标签使用,他们自身就带着强调含义</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗效果<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗效果2<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜效果<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜效果2<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线效果<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线效果2<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线效果<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线效果2<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202223027873.png" alt="image-20240202223027873"></p>
<h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><p>在网页中插入图片</p>
<p>标签使用:&lt;img src&#x3D;”图片的URL”&gt;</p>
<p>例如</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202223733967.png" alt="image-20240202223733967"></p>
<p>效果显示</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202223903740.png" alt="image-20240202223903740"></p>
<h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><p>属性有alt,title,width,height等,分别用于替换文本,提示文本,设置宽度,高度</p>
<ul>
<li><p>alt是在图片无法显示时显示替换的文本</p>
</li>
<li><p>提示文本时用于鼠标悬停在图片上时显示文字</p>
</li>
<li><p>width和height设置一个即可,因为html设置会自动等比例缩放</p>
</li>
<li><p>属性叠加无需逗号,用空格隔开,无先后顺序</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.luogu.com.cn/images/index/step1.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.luogu.com.cn/images/inde1x/step1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;this is a image&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.luogu.com.cn/images/index/step1.png&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是一个女孩&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.luogu.com.cn/images/index/step1.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202225300650.png" alt="image-20240202225300650"></p>
<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>路径分为相对路径和绝对路径</p>
<p>此小节不再描述</p>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>点击跳转到其他页面</p>
<p>格式:&lt;a href&#x3D;URL&gt;文本内容&lt;&#x2F;a&gt;</p>
<p>href是跳转地址,是超链接的必须属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点击跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同理,URL内也可以写自己的文件路径</p>
<h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><ul>
<li>_blank 新窗口打开</li>
</ul>
<p><strong>在开发初期,不知道超链接的跳转地址,href属性填#,表示空链接,不会跳转</strong></p>
<h2 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h2><p>格式:&lt;audio src&#x3D;URL&gt;&lt;&#x2F;audio&gt;</p>
<h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202231925425.png" alt="image-20240202231925425"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在html5中.如果属性名和属性值完全一样,则可以简写为一个单词--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;./audios/695707398.mp3&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--所以controls的完整形式为controls=&quot;controls&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--循环播放--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;./audios/695707398.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;./audios/695707398.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>controls可以显示音频面板</strong></p>
<p>效果</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202232703626.png" alt="image-20240202232703626"></p>
<p>如果没有自动播放效果,那么说明浏览器是禁用自动播放的</p>
<h2 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h2><p>格式:&lt;video src&#x3D;URL&gt;&lt;&#x2F;video&gt;</p>
<h3 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h3><p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240202232912207.png" alt="image-20240202232912207"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;./videos/123.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:视频过于逆天不予播放,请联系作者</p>
<h2 id="综合项目"><a href="#综合项目" class="headerlink" title="综合项目"></a>综合项目</h2><p>网页的制作思路:从上到下,先整体再局部,逐步分析制作</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>个人简介<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>鱿鱼席<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>尤雨溪（Evan You），毕业于科尔盖特大学，前端框架<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./综合项目2vue简介.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>vue.js<span class="tag">&lt;/<span class="name">a</span>&gt;</span>的作者、</span><br><span class="line">  HTML5<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">a</span>&gt;</span>版Clear的打造人、独立开源开发者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>曾就职于Google Creative Labs和Meteor Development Group。</span><br><span class="line">  由于工作中大量接触开源的<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://baike.sogou.com/v2484.htm&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span>项目，最后自己也走上了开源之路，现全职开发和维护<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./综合项目2vue简介.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>Vue.js<span class="tag">&lt;/<span class="name">a</span>&gt;</span>。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://pic.baike.soso.com/ugc/baikepic2/0/ori-20221129095705-1877028675_jpeg_460_460_106483.jpg/800&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">alt</span>=<span class="string">&quot;尤雨溪的图片&quot;</span> <span class="attr">title</span>=<span class="string">&quot;尤雨溪&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学习经历<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>尤雨溪毕业于<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://baike.sogou.com/v593656.htm&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>上海复旦附中<span class="tag">&lt;/<span class="name">a</span>&gt;</span>，在美国完成大学学业，本科毕业于Colgate University，后在Parsons设计学院获得Design &amp; Technology艺术硕士学位，任职于纽约Google Creative Lab。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>尤雨溪大学专业并非是计算机专业，在大学期间他学习专业是室内艺术和艺术史，后来读了美术设计和技术的硕士，<span class="tag">&lt;<span class="name">ins</span>&gt;</span>正是在读硕士期间，他偶然接触到了<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://baike.sogou.com/v2484.htm&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span>，从此被这门编程语言深深吸引，开启了自己的前端生涯<span class="tag">&lt;/<span class="name">ins</span>&gt;</span>。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>主要成就<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2014年2月，开发了一个<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://baike.sogou.com/v7678968.htm&quot;</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span>库<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://baike.sogou.com/v168021260.htm&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>Vue.js<span class="tag">&lt;/<span class="name">a</span>&gt;</span>。Vue.js是构建Web界面的JavaScript库，是一个通过简洁的API提供高效的数据绑定和灵活的组件系统。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>社会任职<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2016年9月3日，在南京的JSConf上，Vue作者尤雨溪正式宣布加盟阿里巴巴Weex团队，尤雨溪称他将以技术顾问的身份加入Weex团队来做Vue和Weex的JavaScript runtime整合，目标是让大家能用Vue的语法跨三端。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203004905101.png" alt="image-20240203004905101"></p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue简介<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue.js<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Vue（读音 /vju:/，发音类似于 view）是一套用于构建用户界面的渐进式的JavaScript框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>作者为<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;综合项目1个人简介.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>尤雨溪<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>主要功能<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Vue.js是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>与其他框架相同，vue允许你讲一个网页分割成可复用的组件，每个组件都包含属于自己的HTML、CSS、JavaScript以用来渲染网页中相应的地方<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203005931019.png" alt="image-20240203005931019"></p>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h2><p>作用:布局内容排列整齐的区域</p>
<p>列表分为:无序列表,有序列表,定义列表</p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>布局排列整齐的不规定顺序的区域</p>
<p>标签:ul嵌套li,ul是无序列表,li是列表条目</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表条目1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表条目2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表条目3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203191209988.png" alt="image-20240203191209988"></p>
<ul>
<li>ul标签里面只能包含li标签</li>
<li>li标签可以有任何内容</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>布局排列整齐的需要规定顺序的区域</p>
<p>标签:ol嵌套li,oi是有序列表,li是列表条目</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表条目1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表条目2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表条目3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203191426072.png" alt="image-20240203191426072"></p>
<h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><p>一般用在页面顶部,作为服务中心使用</p>
<p>标签:dl嵌套dt和dd,dl是定义列表,dt是定义列表的标题,dd是定义列表的描述&#x2F;详情</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>服务中心<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>申请售后<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>售后政策<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203194356881.png" alt="image-20240203194356881"></p>
<ul>
<li>dl里面只能放dt和dd</li>
<li>dt和dd里面可以放任何内容</li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>网页中的表格和excel类似,用来展示数据</p>
<p>标签:table嵌套tr,tr嵌套td&#x2F;th</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203194552235.png" alt="image-20240203194552235"></p>
<ul>
<li>在网页中,<strong>表格默认没有边框线</strong>,需要border属性进行设置</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>总分<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>199<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>198<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>总结<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>全市第一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>全市第一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>全市第一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203195303052.png" alt="image-20240203195303052"></p>
<h3 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h3><p>让表格结构更加清晰,呈现的效果是一样的</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203195442888.png" alt="image-20240203195442888"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>总分<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>199<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>198<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>总结<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>全市第一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>全市第一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>全市第一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><p>多个单元格合并一个,分为跨行合并,跨列合并</p>
<p>合并步骤:</p>
<ol>
<li><p>明确合并的目标</p>
</li>
<li><p>保留最左最上的单元格,添加属性(取值为数字,表示要合并的单元格数量)</p>
<ul>
<li>跨行合并,保留最上单元格,添加属性rowspan</li>
<li>跨列合并,保留最左单元格,添加属性colspan</li>
</ul>
</li>
<li><p>删除其他单元格</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>总分<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>199<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;td&gt;100&lt;/td&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>198<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>总结<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>全市第一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;td&gt;全市第一&lt;/td&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;td&gt;全市第一&lt;/td&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203200601905.png" alt="image-20240203200601905"></p>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><blockquote>
<p>收集用户信息</p>
</blockquote>
<h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><blockquote>
<p>根据属性值type不同,功能不同</p>
</blockquote>
<p>标签:&lt;input type&#x3D;””&gt;(单标签)</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203201353481.png" alt="image-20240203201353481"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">文本框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">单选框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span> 男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span> 女</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">多选框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">文件 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203205248557.png" alt="image-20240203205248557"></p>
<h3 id="input标签占位文本"><a href="#input标签占位文本" class="headerlink" title="input标签占位文本"></a>input标签占位文本</h3><p>提示信息</p>
<p>属性:placeholder</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">文本框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入文本&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">单选框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span> 男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span> 女</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">多选框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">文件 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203205720566.png" alt="image-20240203205720566"></p>
<h3 id="单选框radio"><a href="#单选框radio" class="headerlink" title="单选框radio"></a>单选框radio</h3><p>属性</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203205938140.png" alt="image-20240203205938140"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">单选框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">checked</span>&gt;</span> 男</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span> 女</span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203210143791.png" alt="image-20240203210143791"></p>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>属性 mutiple 可以支持文件多选功能</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">文件 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203210524668.png" alt="image-20240203210524668"></p>
<h3 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h3><p>属性 checked  默认选中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">多选框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>&gt;</span> 我已知晓相关条例</span><br></pre></td></tr></table></figure>



<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203210744800.png" alt="image-20240203210744800"></p>
<h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>标签:select嵌套option,select是下拉菜单整体,option是菜单的每一项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">城市:</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203211344503.png" alt="image-20240203211344503"></p>
<p>属性: selected 默认选中,即刷新页面后首选选项</p>
<h2 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h2><blockquote>
<p>多行输入文本的表单控件</p>
</blockquote>
<p> 标签: textarea(双标签)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span>请输入评论<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203211746460.png" alt="image-20240203211746460"></p>
<h2 id="lable标签"><a href="#lable标签" class="headerlink" title="lable标签"></a>lable标签</h2><blockquote>
<p>网页中,某个标签的说明文本</p>
</blockquote>
<p>可以用lable标签绑定文字和表单控件的关系,增大表单的点击范围</p>
<p>写法一</p>
<ul>
<li>lable只包裹内容,不包裹表单控件</li>
<li>设置lable标签的for属性值和表单控件的id属性值相同</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">性别:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;man&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;man&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;woman&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;woman&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203212707400.png" alt="image-20240203212707400"></p>
<p>写法二</p>
<ul>
<li>使用lable标签直接包裹内容和表单控件,不需要任何属性</li>
</ul>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">性别:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;man&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;man&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>标签:button(双标签)</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203213109105.png" alt="image-20240203213109105"></p>
<p>三个功能都需要form标签嵌套</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--action属性值是发送数据的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交功能<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置功能<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>普通功能<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203214116728.png" alt="image-20240203214116728"></p>
<h2 id="无语义的布局标签"><a href="#无语义的布局标签" class="headerlink" title="无语义的布局标签"></a>无语义的布局标签</h2><blockquote>
<p>布局网页,划分网页区域,摆放内容</p>
</blockquote>
<ul>
<li>div 独占一行 大盒子</li>
<li>span 不换行 小盒子</li>
</ul>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203214514662.png" alt="image-20240203214514662"></p>
<h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><blockquote>
<p>在网页找哪个显示预留字符</p>
</blockquote>
<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203214751074.png" alt="image-20240203214751074"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在代码中敲出的空格,网页只识别一个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>乾坤未定,你我皆是<span class="symbol">&amp;lt;</span>黑<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>马<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203215914233.png" alt="image-20240203215914233"></p>
<h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="体育新闻列表"><a href="#体育新闻列表" class="headerlink" title="体育新闻列表"></a>体育新闻列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;一张图片&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>111111111111111111<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;一张图片&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>222222222222222222<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;一张图片&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>333333333333333333<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;一张图片&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>44444444444444444<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203220408067.png" alt="image-20240203220408067"></p>
<h3 id="注册信息"><a href="#注册信息" class="headerlink" title="注册信息"></a>注册信息</h3> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--表单控件start--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--个人信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入真实姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>确认密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入确认密码&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">checked</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    居住城市:</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--教育经历--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>教育经历<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    最高学历:</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>博士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>硕士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>大专<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>学校名称: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>所学专业: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    在校时间:</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>2015<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>2016<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>2017<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>2018<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    --</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>2019<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>2020<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>2021<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>2022<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--工作经历--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>工作经历<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>公司名称: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    工作描述:</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--同意协议--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>已阅读并同意以下协议</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>用户服务协议<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>隐私政策<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--表单控件end--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/14/html%E5%AD%A6%E4%B9%A0/image-20240203222933464.png" alt="image-20240203222933464"></p>
]]></content>
      <tags>
        <tag>html</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>linux第一部分,命令操作</title>
    <url>/2023/11/16/linux001/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>快捷键或命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ctrl+ alt + t</td>
<td>打开终端窗口</td>
</tr>
<tr>
<td>tab</td>
<td>命令补全，补全命令，补全目录、补全命令参数</td>
</tr>
<tr>
<td>ctrl + c</td>
<td>强行终止当前命令</td>
</tr>
<tr>
<td>ctrl + d</td>
<td>键盘输入终止</td>
</tr>
<tr>
<td>ctrl + s</td>
<td>暂停命令，任意键继续</td>
</tr>
<tr>
<td>ctrl + z</td>
<td>将当前程序放到后台运行，恢复到前台为命令<code>fg</code></td>
</tr>
<tr>
<td>ping + 网址</td>
<td>检测网络</td>
</tr>
<tr>
<td>ifconfig</td>
<td>查看网络默认分配地址</td>
</tr>
<tr>
<td>clear</td>
<td>清除界面</td>
</tr>
<tr>
<td>ping + 默认分配ip地址</td>
<td>检测与路由器连接状况</td>
</tr>
<tr>
<td>ping + 127.0.0.1</td>
<td>检测与本机连接情况</td>
</tr>
<tr>
<td>sudo（获取超级命令权限） apt install(下载安装命令) …</td>
<td>安装…</td>
</tr>
<tr>
<td>sudo apt update</td>
<td>更新软件列表</td>
</tr>
<tr>
<td>cat &#x2F;etc&#x2F;…</td>
<td>查看…</td>
</tr>
<tr>
<td>cat &#x2F;etc&#x2F;issue</td>
<td>查看发行版本</td>
</tr>
<tr>
<td>history</td>
<td>查看历来命令（从你装了这个系统开始）</td>
</tr>
<tr>
<td>man …</td>
<td>查看某命令的相关命令及解释</td>
</tr>
<tr>
<td>cd &#x2F;</td>
<td>切换到根目录，cd用于改变当前工作目录 要加路径</td>
</tr>
<tr>
<td>ll</td>
<td>显示当前目录的文件（附详细信息）</td>
</tr>
<tr>
<td>ls</td>
<td>罗列当前目录的文件</td>
</tr>
<tr>
<td>pwd</td>
<td>显示当前工作目录</td>
</tr>
<tr>
<td>cd .</td>
<td>返回当前目录</td>
</tr>
<tr>
<td>cd ..</td>
<td>返回上层目录</td>
</tr>
<tr>
<td>cd ~</td>
<td>切换的该用户家目录</td>
</tr>
<tr>
<td>cd -</td>
<td>返回上一次的目录cd</td>
</tr>
<tr>
<td>cd &#x2F;…&#x2F;</td>
<td>进入…的目录</td>
</tr>
<tr>
<td>ls（后面的符号i与cd相同）</td>
<td>显示指定目录的内容</td>
</tr>
<tr>
<td>mkdir xxx</td>
<td>（make directory）在当前目录下创建文件夹，也可一次性创建多个，即mkdir xxx xxx xxx …</td>
</tr>
<tr>
<td>rmdir xxx</td>
<td>删除当前目录的xxx文件夹</td>
</tr>
<tr>
<td>rm xxx（或者对应路径下的xxx）</td>
<td>删除当前目录的xxx文件</td>
</tr>
<tr>
<td>cp file1 file2</td>
<td>将某目录file1文件复制到某目录file2文件下，如果存在file2则覆盖，如果不存在则创建，-r时可以操作文件夹</td>
</tr>
<tr>
<td>mv file1 file2</td>
<td>将file1移动到file2所在位置，如果在同目录下且file2不存在，则可认为是将file1改名为file2，如果file2不存在则创建文件，如果文件存在则覆盖文件</td>
</tr>
<tr>
<td>ln aaa bbb</td>
<td>硬链接bbb链接到aaa</td>
</tr>
<tr>
<td>ln &#x2F;…&#x2F;aaa bbb -s</td>
<td>软链接bbb存储指向aaa的路径</td>
</tr>
<tr>
<td>echo “aaabbb” &gt; xxx</td>
<td>把字符串aaabbb写入到xxx文件中</td>
</tr>
<tr>
<td>find -name “xxx”</td>
<td>查找指定xxx名称的文件的路径</td>
</tr>
<tr>
<td>chmod xxx file</td>
<td>数字设定法改变一个文件对三类用户的权限</td>
</tr>
<tr>
<td>umask</td>
<td>查看文件掩码</td>
</tr>
<tr>
<td>umask xxxx</td>
<td>临时修改当前用户文件掩码</td>
</tr>
</tbody></table>
<h1 id="初步认识linux"><a href="#初步认识linux" class="headerlink" title="初步认识linux"></a>初步认识linux</h1><h2 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h2><p>桥接模式：处于同一个网络，路由器给主机分配一个ip地址也给虚拟机分配一个ip地址</p>
<p>NAT模式：本机虚拟一个路由器，该路由器用来连接虚拟机，即创建了一个内网</p>
<p>内网可以访问外网，外网无法访问内网（一般情况，NAT穿透技术可以实现外网访问内网）</p>
<h2 id="设置静态IP地址"><a href="#设置静态IP地址" class="headerlink" title="设置静态IP地址"></a>设置静态IP地址</h2><ol>
<li>选择自动DHCP模式</li>
</ol>
<p>2.重启网络（网络打开再关闭），检测有无网络</p>
<p>3.查看网络detail信息，记录下来</p>
<p>4.在ipv4分页改为手动</p>
<p>5.填写记录信息，子网掩码设置为255.255.255.0,子网掩码用于获取ip地址的网段，网关填写默认路由地址</p>
<p>6.应用设置，测试网络</p>
<h3 id="远程连接（连接虚拟机）"><a href="#远程连接（连接虚拟机）" class="headerlink" title="远程连接（连接虚拟机）"></a>远程连接（连接虚拟机）</h3><p>1.C&#x2F;S架构，客户端（client）服务器（sever）架构，如果连接虚拟机，服务器就是虚拟机，客户端即远程连接工具所在机器，服务器端需要安装服务端程序（sshd）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> $sudo apt install ssh</span><br><span class="line"><span class="comment">//安装ssh客户端</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ps -elf|grep sshd</span><br><span class="line">    <span class="comment">//确认ssh客户端是否运行，如果有根目录就说明安装成功</span></span><br></pre></td></tr></table></figure>

<p>2.切换到客户端xshell程序，open命令打开会话，新建会话</p>
<p>3.协议选择ssh，主机名为虚拟机静态ip地址</p>
<h3 id="建立一个c-cpp文件并编译运行"><a href="#建立一个c-cpp文件并编译运行" class="headerlink" title="建立一个c&#x2F;cpp文件并编译运行"></a>建立一个c&#x2F;cpp文件并编译运行</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ cd hello.cpp  #进入源文件所在目录</span><br><span class="line">$ touch hello.c  #新建空白的源文件</span><br><span class="line">$ gedit hello.c  #编辑源文件</span><br><span class="line">$ gcc hello.c  #生成可执行程序</span><br><span class="line">$ ./hello.out  #运行可执行程序</span><br><span class="line">   hello </span><br><span class="line">$   #继续输入其它命令</span><br></pre></td></tr></table></figure>

<h2 id="linux内核"><a href="#linux内核" class="headerlink" title="linux内核"></a>linux内核</h2><p>内核（kernel）作用：</p>
<blockquote>
<p>​	1.管理硬件资源</p>
<p>2.为上层应用软件提供了运行环境</p>
</blockquote>
<p>系统调用（system calls） 内核对上层应用程序提供的的接口</p>
<p>库函数 对系统调用进行的包装</p>
<p>shell 命令解释器，解析命令，执行命令&#x2F;脚本，脚本（命令的集合）</p>
<h2 id="用户子系统"><a href="#用户子系统" class="headerlink" title="用户子系统"></a>用户子系统</h2><p>用户分类</p>
<blockquote>
<p>1.特权用户&#x2F;root用户 啥都能干</p>
</blockquote>
<blockquote>
<p>2.普通用户 sudoers 临时拥有一些权限</p>
</blockquote>
<blockquote>
<p>3.其他用户</p>
</blockquote>
<p>查看所有用户命令</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ cat /etc/passwd</span><br></pre></td></tr></table></figure>

<p>为某用户申请特权</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ sudo useradd xxx</span><br></pre></td></tr></table></figure>

<p>删除用户及其所拥有文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ sudo userdel xxx</span><br><span class="line"><span class="comment">//并删除其目录</span></span><br><span class="line">$sudo userdel -r xxx</span><br></pre></td></tr></table></figure>

<p>正确创建用户</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ sudo useradd -m -s bin/bash xxx</span><br><span class="line"><span class="comment">//-m表示自动创建家目录</span></span><br><span class="line"><span class="comment">//-s表示指定路径下，比如当前命令为指定bash为默认的shell</span></span><br></pre></td></tr></table></figure>

<p>切换用户</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$su xxx</span><br><span class="line"><span class="comment">//切换到root时因为每次开机都会随机root密码，所以需要用命令</span></span><br><span class="line">$sudo passwd root来两次更改新root密码</span><br></pre></td></tr></table></figure>

<h3 id="banner打印字符串"><a href="#banner打印字符串" class="headerlink" title="banner打印字符串"></a>banner打印字符串</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般打印</span></span><br><span class="line">使用banner xxx打印xxx</span><br><span class="line">    </span><br><span class="line"><span class="comment">//指定参数打印</span></span><br><span class="line"><span class="comment">//竖向</span></span><br><span class="line">printerbanner -w len xxx</span><br><span class="line"><span class="comment">//-w表示打印指定宽度，len为指定宽度</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//横向</span></span><br><span class="line">toilet -w len xxx</span><br><span class="line"><span class="comment">//多次打印知道ctrl+c结束</span></span><br><span class="line">figlet -w len xxx xxx xxx xxx ... (ctrl + c)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>xxx的这种参数一般可放在命令末尾也可以放在主命令后面</p>
</blockquote>
<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="文件子系统"><a href="#文件子系统" class="headerlink" title="文件子系统"></a>文件子系统</h2><table>
<thead>
<tr>
<th>文件名</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td>binary 可执行程序</td>
</tr>
<tr>
<td>dev</td>
<td>device 设备文件</td>
</tr>
<tr>
<td>home</td>
<td>普通目录家目录的根目录</td>
</tr>
<tr>
<td>root</td>
<td>root用户的家目录</td>
</tr>
<tr>
<td>sbin</td>
<td>system binary 和系统相关的可执行程序</td>
</tr>
<tr>
<td>var</td>
<td>variable 经常发生变化的文件（e.g. 日志文件）</td>
</tr>
<tr>
<td>etc</td>
<td>配置文件</td>
</tr>
<tr>
<td>lib</td>
<td>库文件</td>
</tr>
<tr>
<td>proc</td>
<td>process 进程映射文件</td>
</tr>
<tr>
<td>usr</td>
<td>普通用户能够访问的文件</td>
</tr>
</tbody></table>
<h3 id="文件夹与文件操作"><a href="#文件夹与文件操作" class="headerlink" title="文件夹与文件操作"></a>文件夹与文件操作</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$mkdir xxx</span><br><span class="line"><span class="comment">//在当前目录下创建xxx文件夹</span></span><br><span class="line">    </span><br><span class="line">$mkdir xxx xxx xxx xxx</span><br><span class="line"><span class="comment">//在当前目录下创建多个文件夹</span></span><br><span class="line">    </span><br><span class="line">$mkdir xxx -v</span><br><span class="line"><span class="comment">//创建的同时得到创建的详细信息</span></span><br><span class="line">    </span><br><span class="line">$rmdir xxx</span><br><span class="line"><span class="comment">//与mkdir操作相同，不过从创建变为了删除，且删除的只能是空目录空文件夹</span></span><br><span class="line">    </span><br><span class="line">$mv aaa bbb</span><br><span class="line"><span class="comment">//将aaa文件移动到bbb文件夹内</span></span><br><span class="line">    </span><br><span class="line">$ll</span><br><span class="line"><span class="comment">//完全显示当前目录的文件（隐藏文件也可显示，附带详细信息）</span></span><br><span class="line">    </span><br><span class="line">$ls</span><br><span class="line"><span class="comment">//显示当前目录文件</span></span><br><span class="line">    </span><br><span class="line">$ll/ls -a </span><br><span class="line"><span class="comment">//-l表示显示文件的详细信息，-a显示当前目录所有文件 -t表示以时间排列显示文件，-i表示显示id，这些参数可以组合使用，h表示将文件大小以人类易读的方式显示</span></span><br><span class="line"><span class="comment">//例如 ls -li</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在ll或者ls - l显示文件时 </p>
<p>第一列如果前缀时dir则表示文件夹，如果是-开头则表示普通文件，l开头则表示符号链接，c代表字符设备（键盘），b代表块设备（硬盘），p代表管道文件（进程之间进行通信的文件），s表示套接字文件（网络通信）</p>
<p>后面跟着的w，r，e分别代表write，read，execute，表示普通用户能够行使的权限，总共出现三次即三组，第一组表示自己的权限，第二组表示同组的其他成员的权限，第三组表示其他组成员的权限，例如 drwxr-xr-x</p>
<p>第二列 硬链接个数</p>
<p>第三列 用户名称</p>
<p>第四列 用户所属组名</p>
<p>第五列 文件大小 单位比特byte</p>
<p>第六列 最近修改时间</p>
<p>最后一列 文件名称</p>
</blockquote>
<h3 id="通配符（wild-card）"><a href="#通配符（wild-card）" class="headerlink" title="通配符（wild card）"></a>通配符（wild card）</h3><table>
<thead>
<tr>
<th>通配符</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>可以匹配任意多个字符（包括0个字符）</td>
</tr>
<tr>
<td>？</td>
<td>可以匹配任意一个字符</td>
</tr>
<tr>
<td>[…]</td>
<td>匹配这个集合（即这个括号内）的任意一个字符</td>
</tr>
<tr>
<td>[!…]</td>
<td>匹配集合外的任意一个字符</td>
</tr>
<tr>
<td>[0-9],[a-z],[A-Z],[A-Za-z]</td>
<td>匹配内部的任意一个字符</td>
</tr>
</tbody></table>
<h3 id="cp（copy）"><a href="#cp（copy）" class="headerlink" title="cp（copy）"></a>cp（copy）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以复制一个文件或一个文件夹</span></span><br><span class="line">cp /.../xxx .</span><br><span class="line"><span class="comment">//把某路径下的xxx复制到当前目录下，&#x27;.&#x27;也可以换成某个路径</span></span><br><span class="line">    </span><br><span class="line">cp file1 file2</span><br><span class="line"><span class="comment">//把文件file1复制到另一个文件file2中</span></span><br><span class="line"><span class="comment">//如果文件file2不存在，则创建这个文件，如果文件存在则覆盖这个文件</span></span><br><span class="line"><span class="comment">//-i会诊断要覆盖文件原本是否有信息，并提示是否覆盖，-r表示递归地复制文件夹，-u表示复制多个文件到某个目录下时，会选择性的进行复制，如果某个文件不在这个目录下或者某个文件的修改时间新于该目录下同名文件，则会将这个文件复制或覆盖到该目录下，-v表示复制时的详细信息	</span></span><br><span class="line"><span class="comment">//-r的时候，如果file2文件夹存在，则会将file1文件夹复制到file2目录下</span></span><br><span class="line">cp *.cpp dir</span><br><span class="line">把通配符后带有.cpp的文件全部复制到dir目录中</span><br></pre></td></tr></table></figure>

<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将一个文件移动到另一目录下</span></span><br><span class="line">mv file1 file2</span><br><span class="line"><span class="comment">//将file1移动到file2所在位置，如果在同目录下且file2不存在，则可认为是将file1改名为file2</span></span><br><span class="line"> <span class="comment">//-i表示如果同名是提示是否覆盖</span></span><br><span class="line">    </span><br><span class="line">mv file dir</span><br><span class="line"><span class="comment">//如果dir存在，则将file移动到dir中，如果不存在，则认为dir是一个普通的文件，并创建</span></span><br><span class="line">mv dir1 dir2</span><br><span class="line"><span class="comment">//如果dir2存在，则将dir1文件夹移动到dir2中，如果不存在则会创建文件夹，将dir1内的文件复制到dir2中，如果是同目录则起到重命名的效果</span></span><br><span class="line"><span class="comment">//-v，-u与cp的-v，-u相同效果</span></span><br></pre></td></tr></table></figure>

<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除文件或者删除文件夹（与rmdir不同，既可以删除空文件夹也可以删除有文件的文件夹）</span></span><br><span class="line">rm /.../ xxx xxx xxx</span><br><span class="line"><span class="comment">//删除xxx或多个文件</span></span><br><span class="line"><span class="comment">//-i提示要不要删除，-r递归删除即能删除文件夹，-v删除的详细过程，-f忽略提示</span></span><br><span class="line">rm-rf / 删库跑路</span><br><span class="line"><span class="comment">//自己删除时建议不要使用root用户进行删除，删除之前要通过ls确认要删除的选项，同时添加-i参数</span></span><br></pre></td></tr></table></figure>



<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><blockquote>
<p>目录本质也是一个文件</p>
<p>通过ls - la可以看到开头的两个文件分别是 . 和 .. </p>
<p>目录会存储一些目录项，. 和 .. 就是目录项，分别指向当前目录和上级目录，目录项以链表进行链接，每个节点就是一个目录项（entry），目录中的普通文件不算目录项</p>
<p>通过目录项可以直接访问某个目录，就称为硬链接</p>
<p>如果想在一个目录中添加或删除目录项，该用户需要拥有该目录的写权限</p>
<p>一个普通文件的硬链接数默认为1</p>
</blockquote>
<h3 id="软链接（符号链接）"><a href="#软链接（符号链接）" class="headerlink" title="软链接（符号链接）"></a>软链接（符号链接）</h3><blockquote>
<p>某个文件存储的是一个路径，这条路径指向了一个目录，这个间接访问目录的方式就成为软链接</p>
<p>符号链接类似与指针，和windows的快捷方式</p>
</blockquote>
<h3 id="ln（link）"><a href="#ln（link）" class="headerlink" title="ln（link）"></a>ln（link）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建链接</span></span><br><span class="line">ln aaa bbb</span><br><span class="line"><span class="comment">//创建一个链接到aaa的目录项，目录项名为bbb</span></span><br><span class="line">    </span><br><span class="line">ln /.../aaa bbb</span><br><span class="line"><span class="comment">//创建一个链接到某目录的aaa文件的bbb软链接，例如ln ../aaa bbb意为bbb的文件存储了指向上级目录aaa文件的路径，且以..或.等目录项写的路径成为相对路径，具体描述则为绝对路径 ln /home/niepandou/aaa bbb</span></span><br><span class="line"><span class="comment">//为了避免文件转移导致的绝对路径找不到文件，一般都选择相对路径进行描述</span></span><br></pre></td></tr></table></figure>

<h2 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h2><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全盘查找某文件</span></span><br><span class="line">locate xxx</span><br><span class="line"><span class="comment">//查找所有与xxx相关的文件，如果某个文件已经在linux的数据库中，查找起来会非常快</span></span><br><span class="line"><span class="comment">//如果是新创建的一个文件，暂时是查不到该文件的</span></span><br></pre></td></tr></table></figure>

<h3 id="which（常用）"><a href="#which（常用）" class="headerlink" title="which（常用）"></a>which（常用）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定位一个command（可执行程序）</span></span><br><span class="line">which xxx</span><br><span class="line"><span class="comment">//which sshd可查找到sshd程序的位置</span></span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在该目录下进行搜索，如果有子目录也会在子目录中进行搜索, 可以使用通配符进行查找</span></span><br><span class="line">find xxx</span><br><span class="line"><span class="comment">//-name表示以名字（-name 具体名字）进行查找，输出的是他的路径</span></span><br><span class="line"><span class="comment">//-a 表示逻辑与and，-o表示或or，！表示取反</span></span><br><span class="line">    </span><br><span class="line">组合查找</span><br><span class="line">find /.../ -name <span class="string">&quot;*.a&quot;</span> -o -name <span class="string">&quot;*.b&quot;</span>查找以.a或.b结尾的文件</span><br><span class="line">    </span><br><span class="line"><span class="comment">//-gid n表示查找属于id号为n的用户组的所有文件</span></span><br><span class="line"><span class="comment">//-uid n表示查找属于id号为n的用户的所有文件 uid也可写为user</span></span><br><span class="line"><span class="comment">//-type c表示查找类型为c的文件 b块设备文件，c字符设备文件，d文件夹（目录）文件，p管道文件，f普通文件，l软链接，s表示套接字文件，硬链接文件可以看作是一个普通文件	</span></span><br><span class="line">    </span><br><span class="line">e.g.: find ~ -name <span class="string">&quot;*hello*&quot;</span> -a -type f<span class="comment">//在家目录中寻找包含hello且为类型为普通文件的文件</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//-size n表示以存储单元查找 b表示块，一般512字节称之为块，c（character）表示字节，K，M，G则为其原来的意思，默认查找块</span></span><br><span class="line">e.g: find ~ -size <span class="number">8980</span>c <span class="comment">//精确查找字节为8980的文件 +8090c则表示查找大于8090c的文件，如果有小数要记住查找是向上取整</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//如果要查找0字节则选择 -empty（可以用来查找空文件和空目录）</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//-perm表示这个文件对不同用户的权限，-rw-rw-r--每一组用二级制表示为110 110 100（开头的-表示普通文件），因为一个用户最多用的的权限有rwx，二进制转十进制为7，所以每一组可以用八进制表示，-perm就是通过三个八进制数来作为指标进行find查找的，-rw-rw-r--用三个八进制表示为664，则可以写为-perm 664 </span></span><br><span class="line"><span class="comment">//一般普通文件的perm就是664</span></span><br><span class="line"><span class="comment">//如果查找是通过用户的单个权限 也可以这样写 -perm -u=x 表示的是查找用户拥有执行权限的文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//-exec 可以以行为单位把一个命令的输出结果当作另一个命令的参数，一般可用于组合命令</span></span><br><span class="line">find -name “* .cpp” -exec ls -l &#123;&#125; \; <span class="comment">//&#123;&#125; 将find命令输出的结果以行为单位作为ls -l的参数</span></span><br></pre></td></tr></table></figure>



<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><blockquote>
<p>一般用linux执行.py文件时是没有足够权限的</p>
<p>在执行该文件时提示权限不足</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">./hello.py</span><br><span class="line">Permisson Denied</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="chmod（change-mode）改变权限"><a href="#chmod（change-mode）改变权限" class="headerlink" title="chmod（change mode）改变权限"></a>chmod（change mode）改变权限</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文字设定法</span></span><br><span class="line">chmod [ugoa][+=-][rwx] file/dir<span class="comment">//第一组表示哪类用户，a表示all，第二组表示增加减少某个权限, =时表示该用户只有某个权限，第三组表示的就是具体权限 </span></span><br><span class="line"> 组合修改权限</span><br><span class="line"> e.g: chmod u=rw, g=rw, o=r hello.py</span><br><span class="line"> <span class="comment">//数字设定法</span></span><br><span class="line"> chmod [三个八进制数] file/dir <span class="comment">//第一组分别表示ugo三类用户的权限</span></span><br></pre></td></tr></table></figure>

<h3 id="umask（文件掩码）"><a href="#umask（文件掩码）" class="headerlink" title="umask（文件掩码）"></a>umask（文件掩码）</h3><blockquote>
<p>文件掩码指的是在创建文件（0666）或目录时（0777）在全部权限中要去掉的一些权限</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取文件掩码</span></span><br><span class="line"></span><br><span class="line">直接输入umask会得到<span class="number">0002</span>，<span class="number">002</span>为普通用户的文件掩码，<span class="number">0022</span>为root用户掩码</span><br><span class="line">创建文件夹时，默认掩码为<span class="number">777</span>，即所有用户都拥有所有权限，最终得到的却是<span class="number">775</span>，最后得到的文件掩码<span class="number">775</span> = <span class="number">777</span> &amp; （~umask）	</span><br><span class="line">创建普通文件时，默认掩码为<span class="number">666</span>，最终文件掩码为<span class="number">664</span> = <span class="number">666</span> &amp; （~<span class="number">0002</span>）</span><br><span class="line">计算的过程可以直接简化成 <span class="number">666</span> - umask</span><br><span class="line">    </span><br><span class="line"><span class="comment">//临时改变当前用户的umask</span></span><br><span class="line">umask xxxx<span class="comment">//umask 0222</span></span><br></pre></td></tr></table></figure>

<h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><h3 id="文件描述符（一般为非负整数）"><a href="#文件描述符（一般为非负整数）" class="headerlink" title="文件描述符（一般为非负整数）"></a>文件描述符（一般为非负整数）</h3><blockquote>
<p>stdin 标准输入 0</p>
<p>stdout 标准输出 1</p>
<p>stderror 标准错误输出 2</p>
<p>‘&gt;’ 标准输出重定向(可以认为是c++的输入)</p>
<p>’&lt;‘ 标准输入重定向（可以认为是c++的输出）</p>
<p>2 &gt; 标准错误重定向（2就是strerror）</p>
<p>‘&gt;&gt;’ 标准输出重定向（追加方式）</p>
</blockquote>
<h3 id="cat（查看文件内容）"><a href="#cat（查看文件内容）" class="headerlink" title="cat（查看文件内容）"></a>cat（查看文件内容）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看一个文件的内容（速度慢，因为和strcat一样是在输出流直接拼接内容）</span></span><br><span class="line">cat file</span><br><span class="line">    </span><br><span class="line"><span class="comment">//将file1文件的内容输出到file2中，类似cp</span></span><br><span class="line">cat file1 &gt; file2</span><br><span class="line"></span><br><span class="line"><span class="comment">//将键盘输入的内容输输出（写入）到file文件中,如果不写file则是输出到显示器上，ctrl + D结束输入</span></span><br><span class="line">cat &gt; file</span><br><span class="line"><span class="comment">//下次再对这个file进行相同操作时是重新写入， &gt;&gt;则会追加写入</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="echo（打印一行文本）"><a href="#echo（打印一行文本）" class="headerlink" title="echo（打印一行文本）"></a>echo（打印一行文本）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印xxx</span></span><br><span class="line">echo <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="comment">//如果echo后面不带任何东西，则会打印一行空行</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//将文本xxx输出（写入）到file文件中，同样是重新写入</span></span><br><span class="line">echo <span class="string">&quot;xxx&quot;</span> &gt; file</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="head（显示文件的头几行信息）"><a href="#head（显示文件的头几行信息）" class="headerlink" title="head（显示文件的头几行信息）"></a>head（显示文件的头几行信息）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认输出10行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印file文件前n行</span></span><br><span class="line">head -n n file</span><br></pre></td></tr></table></figure>

<h3 id="tail（显示文件的后几行信息）"><a href="#tail（显示文件的后几行信息）" class="headerlink" title="tail（显示文件的后几行信息）"></a>tail（显示文件的后几行信息）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认输出10行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指定n行与head相同</span></span><br><span class="line">tail -n n file</span><br><span class="line">    </span><br><span class="line"><span class="comment">//可以用于查看最近日志文件</span></span><br></pre></td></tr></table></figure>

<h3 id="more-less（单页浏览文件）"><a href="#more-less（单页浏览文件）" class="headerlink" title="more&#x2F;less（单页浏览文件）"></a>more&#x2F;less（单页浏览文件）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//每次查看文件的某页</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查看a文件的首页，f（forward）浏览下一页，b（backward）浏览上一页,q(quit)退出</span></span><br><span class="line">more a.txt</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对文件内容进行排序（以行为单位）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对file文件排序，比如文件内第一行为bbb，第二行为aaa，sort之后则打印aaa，第二行bbb，原本的内容不会发生改变</span></span><br><span class="line">sort file</span><br><span class="line">    </span><br><span class="line"><span class="comment">//不能够文件重定向自己，这样做会使文件内容清零</span></span><br><span class="line">sort file &gt; file</span><br><span class="line"><span class="comment">//cat sort会发现没有任何输出</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//但可以文件重定向另一个文件</span></span><br><span class="line">sort file1 &gt; file2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>uniq（unique）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//去重连续重复的几行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对file文件读取并以行为单位去重，打印，原本的内容不会改变</span></span><br><span class="line">unique file</span><br></pre></td></tr></table></figure>



<p>对一个文件操作得到排序且没有重复元素的文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sort sort.txt &gt; sortt.txt;uniq sortt.txt &gt; sort.txt;rm sortt.txt</span><br></pre></td></tr></table></figure>

<h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// | 管道连接两个命令，管道相当于一个缓冲区，通过第一条命令将结果输送到管道中，然后对管道的内容执行第二条命令，xargs是对内容每一行执行一次命令2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//命令1输出的每一行都执行一次命令2</span></span><br><span class="line">commmand1 | xargs command2</span><br><span class="line">e.g: find ~ -name <span class="string">&quot;*.cpp&quot;</span> | xargs ls -l </span><br><span class="line"></span><br><span class="line"><span class="comment">//对命令1得到的结果整体进行命令2</span></span><br><span class="line">command1 | command2</span><br><span class="line">e.g : sort sort.txt | uniq</span><br></pre></td></tr></table></figure>

<h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到一个文件的信息（比ls-la更详细）</span></span><br><span class="line"></span><br><span class="line">ls file</span><br></pre></td></tr></table></figure>

<h3 id="wc（what-count）"><a href="#wc（what-count）" class="headerlink" title="wc（what count）"></a>wc（what count）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录文件中的行数，字节数，单词数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//记录文件中有多少个c</span></span><br><span class="line">wc file -c</span><br><span class="line"><span class="comment">//-c表示字节数</span></span><br><span class="line"><span class="comment">//-l表示行数</span></span><br><span class="line"><span class="comment">//-w表示单词书</span></span><br></pre></td></tr></table></figure>

<h3 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改字符集</span></span><br><span class="line"></span><br><span class="line">iconv -f gbk -t uft<span class="number">-8</span> xxx</span><br><span class="line"><span class="comment">//将xxx文件的字符集从gbk转译成uft-8</span></span><br></pre></td></tr></table></figure>

<h3 id="正则表达式-1"><a href="#正则表达式-1" class="headerlink" title="正则表达式"></a>正则表达式</h3><blockquote>
<p>基本单位：普通字符，转义字符，’.’,(任意一个字符)，[] 集合（只要集合里的一个元素能匹配上就是能匹配 ），（）这个整体作为基本单位</p>
<p>基本操作：1.连接：ab</p>
<p>​					2.重复（必须是连续的）：’?‘ 表示重复1次或0次</p>
<p>​								’+‘ 表示重复一次或多次</p>
<p>​								‘*’ 表示重复任意次数</p>
<p>​							{m,n}表示重复m-n次，m和n可以有一个没有，m没有可以认为最多重复n次，n没有可以认为至少重复m次</p>
<p>​							{n}表示连续出现特定n次</p>
<p>​							 [ ^abc]匹配任意字符，但不包含a，b，c</p>
<p>特殊符号：</p>
<p>​	^行首  “^abc” </p>
<p>​	$行尾 “abc$”</p>
<p>​	\&lt;词首 “\&lt;a”</p>
<pre><code>\\&gt;词尾 &quot;a\\&gt;&quot;
</code></pre>
</blockquote>
<h3 id="gerp-搜索文件内容"><a href="#gerp-搜索文件内容" class="headerlink" title="gerp(搜索文件内容)"></a>gerp(搜索文件内容)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//globally regex(regular experssion) print</span></span><br><span class="line"><span class="comment">//以行为单位进行查找</span></span><br><span class="line">grep -en <span class="string">&quot;bbb&quot;</span> aaa<span class="comment">//在aaa文件中搜索带有bbb文本的内容 </span></span><br><span class="line"><span class="comment">//-e 使用扩展的正则表达式，一般组合使用放在最后</span></span><br><span class="line"><span class="comment">//-n 显示行号</span></span><br><span class="line"><span class="comment">//-i 忽略正则表示的大小写</span></span><br><span class="line">    </span><br><span class="line">e.g:grep -ne  <span class="string">&quot;cpp&quot;</span> test.txt</span><br><span class="line">    grep -ne <span class="string">&quot;h\&#123;1\&#125;&quot;</span> test.txt </span><br><span class="line">    </span><br><span class="line">find ~ -name <span class="string">&quot;*.cpp&quot;</span> |xargs grep -ne <span class="string">&quot;int main\(\)&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">alias<span class="comment">//别名</span></span><br><span class="line">    </span><br><span class="line">alias</span><br><span class="line"><span class="comment">//显示目前所有已有的别名</span></span><br><span class="line">alias aaa=bbb</span><br><span class="line"><span class="comment">//给bbb起一个别名为aaa，临时生效</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="打包和压缩"><a href="#打包和压缩" class="headerlink" title="打包和压缩"></a>打包和压缩</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打包</span></span><br><span class="line">打包文件一般比原文件大，打包文件会预留空间</span><br><span class="line">    </span><br><span class="line">    tar（主选项+辅选项） 目标文件名 源文件或目录</span><br><span class="line">    主选项：只能选择其中一个</span><br><span class="line">    c（create）r（追加）x（释放）</span><br><span class="line">    辅选项：</span><br><span class="line">    f（生成指定使用包文件或设备,指定文件名称）</span><br><span class="line">    v（显示打包过程）</span><br><span class="line">    z（用gzip压缩/解压缩文件，后缀名为.gz）</span><br><span class="line">    </span><br><span class="line">    e.g:tar cvzf a.gz a.out<span class="comment">//创造a.gz压缩文件将a.out放进该压缩文件中</span></span><br><span class="line">     	tar xvf hello.gz<span class="comment">//解压缩hello.gz文件，解压的文件放到该目录下</span></span><br><span class="line">        <span class="comment">//注意参数没有-</span></span><br></pre></td></tr></table></figure>

<h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><h3 id="df（disk-full查看磁盘状态）"><a href="#df（disk-full查看磁盘状态）" class="headerlink" title="df（disk full查看磁盘状态）"></a>df（disk full查看磁盘状态）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">-h增加可读性</span><br></pre></td></tr></table></figure>

<h3 id="du（disk-used查看磁盘使用情况）"><a href="#du（disk-used查看磁盘使用情况）" class="headerlink" title="du（disk used查看磁盘使用情况）"></a>du（disk used查看磁盘使用情况）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">du /.../ 查看某目录下的使用情况，默认为当前目录</span><br><span class="line">    </span><br><span class="line">-h同上</span><br><span class="line">-d n 最多显示n个目录层数</span><br><span class="line"></span><br><span class="line">    du -h -d <span class="number">1</span> <span class="comment">//显示当前目录下文件和目录所占空间</span></span><br><span class="line">    du -h -d <span class="number">2</span><span class="comment">//显示当前目录及子目录下文件和目录所占空间</span></span><br></pre></td></tr></table></figure>



<h3 id="scp（s-cp远程拷贝secure-copy）"><a href="#scp（s-cp远程拷贝secure-copy）" class="headerlink" title="scp（s_cp远程拷贝secure copy）"></a>scp（s_cp远程拷贝secure copy）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在网络上传下载</span></span><br><span class="line"></span><br><span class="line">scp source dest</span><br><span class="line">    </span><br><span class="line">本地路径：绝对路径,相对路径</span><br><span class="line">   </span><br><span class="line">远程路径：用户名@IP地址:+路径</span><br><span class="line">    </span><br><span class="line">    上传</span><br><span class="line">    scp Debugger.pdf niepandou@<span class="number">192.168</span><span class="number">.8</span><span class="number">.130</span>: ~<span class="comment">//将debugger文件传输给远程用户的家目录下</span></span><br><span class="line">    下载</span><br><span class="line">    scp -r niepandou@<span class="number">192.168</span><span class="number">.8</span><span class="number">.130</span>:~/cpp .<span class="comment">//将远程用户的家目录下的cpp文件夹下载到当前目录下</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//-r 复制文件夹</span></span><br><span class="line">        </span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述操作每次操作时都需要验证用户密码，使用密钥后可以跳过该过程</p>
</blockquote>
<h3 id="ssh-keygen密钥"><a href="#ssh-keygen密钥" class="headerlink" title="ssh-keygen密钥"></a>ssh-keygen密钥</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">产生密钥</span><br><span class="line">    </span><br><span class="line">id-rsa密钥</span><br><span class="line">id-rsa-pub公钥</span><br><span class="line"></span><br><span class="line">用scp将公钥传给远程用户，然后将pub文件放进ssh目录下（注意采用&gt;&gt;追加）的authorized_keys文件</span><br><span class="line"></span><br><span class="line">之后每次访问都不需要密码验证</span><br></pre></td></tr></table></figure>

<p>git仓库</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">修改远程仓库过程</span><br><span class="line">    </span><br><span class="line">    <span class="number">1.</span>修改本地仓库（远程仓库文件传到本地仓库）</span><br><span class="line">    <span class="number">2.</span>add（将修改添加到缓存中，stage操作）</span><br><span class="line">    <span class="number">3.</span>commit（确认修改）</span><br><span class="line">    <span class="number">4.</span>push（将修改内容传到远程仓库）</span><br><span class="line">    如果有多人同时进行修改，系统会检验当前文件是否为原先的文件，如果不是则不会进行修改</span><br><span class="line">    </span><br><span class="line">    git用法与scp用法相同</span><br></pre></td></tr></table></figure>

<h1 id="代码编译"><a href="#代码编译" class="headerlink" title="代码编译"></a>代码编译</h1><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vim三种模式</span><br><span class="line">    短命令</span><br><span class="line">    </span><br><span class="line">    普通模式（命令模式）【ESC切换】</span><br><span class="line">    编辑模式（插入模式）【INSERT切换】</span><br><span class="line">    i插入到光标的前面，a插入到光标的后面（append），o光标切换到下一行</span><br><span class="line">    I行首，A行尾，O前一行</span><br><span class="line">    视图模式</span><br><span class="line">    </span><br><span class="line">命令模式：</span><br><span class="line">    长命令</span><br><span class="line">    以<span class="string">&#x27;:&#x27;</span>开头 </span><br><span class="line">    wq写入并退出</span><br><span class="line">    </span><br><span class="line">    光标移动</span><br><span class="line">    上下左右键 kjhl</span><br><span class="line">    翻页 ctrl+f（forward），ctrl+b（backword） </span><br><span class="line">    翻半页 ctrl+u（up）ctrl+d（down）</span><br><span class="line">    H：页首</span><br><span class="line">    L：该页最后一行的行首</span><br><span class="line">    gg：文件的开始</span><br><span class="line">    G：文件的末尾</span><br><span class="line">    w；下一个单词（word）</span><br><span class="line">    b：下一个单词（back） 	</span><br><span class="line">    n- 往上走n行</span><br><span class="line">    n+ 往下走n行</span><br><span class="line">    nG / :n 到第n行</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    删除操作（相当于剪切）</span><br><span class="line">    x：删除一个字符</span><br><span class="line">    dd：删除一行</span><br><span class="line">    ndd 删除光标往下 n行</span><br><span class="line">    :n，md：删除n-m行 </span><br><span class="line">    d^:删除该行光标到行首部分    </span><br><span class="line">    d$ / D:删除该行光标到行尾部分</span><br><span class="line">    dw：删除一个单词</span><br><span class="line">    [n]dw:删除n个单词</span><br><span class="line">    d[n]w:删除n个单词</span><br><span class="line">    dt):删除到)</span><br><span class="line">    dt<span class="string">&quot;:删除到“</span></span><br><span class="line"><span class="string">    u，撤销上一次操作undo</span></span><br><span class="line"><span class="string">    crtl+r：恢复修改    recover</span></span><br><span class="line"><span class="string">    p：粘贴操作（paste）</span></span><br><span class="line"><span class="string">    yy：拷贝一行（yank）</span></span><br><span class="line"><span class="string">    [n]yy / y[n]y:拷贝n行</span></span><br><span class="line"><span class="string">   :x,y y拷贝x-y行</span></span><br><span class="line"><span class="string">     yw：拷贝一个单词</span></span><br><span class="line"><span class="string">     [n]yw / y[n]w:拷贝n个单词</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">     查找替换</span></span><br><span class="line"><span class="string">     :set hlsearch高亮显示</span></span><br><span class="line"><span class="string">     /xxx 查找xxx（配合高亮显示使用更佳）（也可使用正则表达式匹配）</span></span><br><span class="line"><span class="string">     匹配到后 n移动到下一个匹配项，N移动到下一个匹配项</span></span><br><span class="line"><span class="string">         </span></span><br><span class="line"><span class="string">     :s/aaa/bbb/选项（aaa替换为bbb，默认情况下只会替换第一个)</span></span><br><span class="line"><span class="string">     选项为g表示global全部替换</span></span><br><span class="line"><span class="string">     :x,ys/aaa/bbb/选项(将x到y行根据选项对aaa替换为bbb)</span></span><br><span class="line"><span class="string">     :%s/aaa/bbb/g（将该文件内所有aaa替换为bbb）</span></span><br><span class="line"><span class="string">插入模式：</span></span><br><span class="line"><span class="string">    i插入到光标的前面，a插入到光标的后面（append），o光标切换到下一行</span></span><br><span class="line"><span class="string">    I行首，A行尾，O前一行</span></span><br><span class="line"><span class="string"> 视图模式（用于选择范围）：</span></span><br><span class="line"><span class="string">         v：行选模式</span></span><br><span class="line"><span class="string">         ctrl+v：列选模式</span></span><br><span class="line"><span class="string">         选完后d删除y拷贝</span></span><br><span class="line"><span class="string">         </span></span><br><span class="line"><span class="string">   		批量/批量删除注释</span></span><br><span class="line"><span class="string">         1：将光标移动到要注释的第一行</span></span><br><span class="line"><span class="string">         2：进入列选模式选中范围</span></span><br><span class="line"><span class="string">         3：进入插入模式（I）</span></span><br><span class="line"><span class="string">         4：输入//</span></span><br><span class="line"><span class="string">         5：回到命令模式</span></span><br><span class="line"><span class="string">         删除时在列选模式下用d删除//</span></span><br><span class="line"><span class="string">         </span></span><br><span class="line"><span class="string">         gg=G 代码对齐命令	</span></span><br><span class="line"><span class="string">         </span></span><br><span class="line"><span class="string"> 文件操作</span></span><br><span class="line"><span class="string">          :w 保存</span></span><br><span class="line"><span class="string">          :q 退出</span></span><br><span class="line"><span class="string">          :q! 不保存强制退出</span></span><br><span class="line"><span class="string">          :wq 保存修改并退出</span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">          :new / split / sp file 打开新的窗口	</span></span><br><span class="line"><span class="string">          ctrl+w移动到下一个窗口</span></span><br><span class="line"><span class="string">          :qa 退出所有窗口</span></span><br><span class="line"><span class="string">          :vnew / vsplit / vsp 左右分屏</span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">          :tabnew 标签分屏（像浏览器一样的标签）</span></span><br><span class="line"><span class="string">          gt 下一个标签 gT下一个标签</span></span><br><span class="line"><span class="string">         </span></span><br><span class="line"><span class="string">		:set number 显示行（每次退出再重进会刷新）          </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">           </span></span><br></pre></td></tr></table></figure>

<h3 id="设置vim配置文件"><a href="#设置vim配置文件" class="headerlink" title="设置vim配置文件"></a>设置vim配置文件</h3><p>配置文件类似于预处理</p>
<p>1.在家目录下创建.vimrc文件</p>
<p>2.打开.vimrc文件</p>
<p> 常用配置命令</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">syntax on<span class="comment">//语法检查</span></span><br><span class="line">set hlserach<span class="comment">//查找高亮显示</span></span><br><span class="line">set tabstop=<span class="number">4</span><span class="comment">//tab缩进为4个空格，默认8个</span></span><br><span class="line">set autoindent<span class="comment">//自动对齐</span></span><br></pre></td></tr></table></figure>

<p>vimtutor vim练习手册</p>
<h3 id="编译工具链"><a href="#编译工具链" class="headerlink" title="编译工具链"></a>编译工具链</h3><h4 id="两种大编译环境"><a href="#两种大编译环境" class="headerlink" title="两种大编译环境"></a>两种大编译环境</h4><p> ide: 集成开发环境(常用于windows),例如vs,clion,eclipse,xcode</p>
<p>sdk（常用于linux, 全程software development kit,软件开发工具或编译工具链）	 </p>
<p>​	sdk阵营一: gcc</p>
<p>​	sdk阵营二: clang</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">gcc -v 查看gcc版本</span><br><span class="line">--target=x86_64-linux-gnu <span class="comment">//此为gcc对应平台架构</span></span><br><span class="line">Thread model: posix <span class="comment">//模型标准</span></span><br><span class="line">gcc version <span class="number">7.5</span><span class="number">.0</span> (Ubuntu <span class="number">7.5</span><span class="number">.0</span><span class="number">-3u</span>buntu1~<span class="number">18.04</span>)  <span class="comment">//gcc版本</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个程序从创建到可执行的过程</p>
</blockquote>
<p><img src="/2023/11/16/linux001/image-20230507185757060.png" alt="image-20230507185757060"></p>
<h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">预处理文件常以.i结尾</span><br><span class="line">作用:执行预处理指令</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> xxx function 宏函数</span></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">gcc -E xxx.c -o xxx.i 生成预处理文件 </span><br><span class="line">    E表示进行预处理 -o表示生成文件的名字</span><br><span class="line">   -D xxx 再定义一个宏xxx</span><br></pre></td></tr></table></figure>

<p>源代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0<span class="comment">//宏if</span></span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//宏if结束</span></span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>生成预处理文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$gcc -E define.c -o define.i</span><br></pre></td></tr></table></figure>

<p>文件内容</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">...<span class="comment">//以上省略各种预处理代码</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">int</span> <span class="title">ftrylockfile</span> <span class="params">(FILE *__stream)</span> __<span class="title">attribute__</span> <span class="params">((__nothrow__ , __leaf__))</span> </span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">funlockfile</span> <span class="params">(FILE *__stream)</span> __<span class="title">attribute__</span> <span class="params">((__nothrow__ , __leaf__))</span></span>;</span><br><span class="line"># <span class="number">868</span> <span class="string">&quot;/usr/include/stdio.h&quot;</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"># <span class="number">2</span> <span class="string">&quot;define.c&quot;</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">3</span> <span class="string">&quot;define.c&quot;</span></span><br><span class="line"><span class="comment">//最终代码</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设源代码将#if 0改为#if N</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> N<span class="comment">//宏if</span></span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//宏if结束</span></span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ul>
<li><p>因为N是不存在的</p>
<p>所以生成的预处理文件会如此</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最终代码</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>而如果使用命令 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$gcc -E define.c -o define.i -D N <span class="comment">//-D为用命令宏定义了N,让N存在 </span></span><br></pre></td></tr></table></figure>

<p>则生成的预处理文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最终代码</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>用命令进行宏定义</strong>,<strong>方便程序员为不同平台不同客户生成不同代码</strong></li>
</ul>
<ul>
<li>另一种宏开关</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> <span class="comment">//if not define</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<pre><code> 用法:当某个头文件不存在时可以用这种办法自己解决
</code></pre>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __STDIO_H__ <span class="comment">//如果没有包含stdio.h</span></span></span><br><span class="line"><span class="comment">//进行定义接口</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>作用:将c语言代码编译成汇编代码</p>
<p>两种形式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">gcc -S xxx.i -o xxx.s <span class="comment">//生成汇编文件</span></span><br><span class="line">gcc -S xxx.c -o xxx.s</span><br></pre></td></tr></table></figure>

<p>源代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成的汇编代码 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	.file	&quot;hello.c&quot; </span><br><span class="line">	.text</span><br><span class="line">	.section	.rodata</span><br><span class="line">.LC0:</span><br><span class="line">	.string	&quot;Hello World&quot;</span><br><span class="line">	.text</span><br><span class="line">	.globl	main</span><br><span class="line">	.type	main, @function</span><br><span class="line">main: #main函数起始</span><br><span class="line">.LFB0:</span><br><span class="line">	.cfi_startproc</span><br><span class="line">	pushq	%rbp #push入栈</span><br><span class="line">    #将rbp寄存器的值保存在栈帧中</span><br><span class="line">	.cfi_def_cfa_offset 16</span><br><span class="line">	.cfi_offset 6, -16</span><br><span class="line">	movq	%rsp, %rbp #mov移动 移入寄存器 赋值过程</span><br><span class="line">	#把rsp的值移动到rbp中</span><br><span class="line">	#rbq register base pointer栈帧基址寄存器</span><br><span class="line">	#rsp register stack pointer栈顶基址寄存器</span><br><span class="line">	.cfi_def_cfa_register 6</span><br><span class="line">	leaq	.LC0(%rip), %rdi#lea (load effective address 加载有效地址)</span><br><span class="line">	# .一般代表注释 lea加载rip的内容即lc0的内容到rdi中,rdi一般存放的是第一个参数的地址,即参数寄存器</span><br><span class="line">	movl	$0, %eax#eax 存放返回值 目前存放了0</span><br><span class="line">	call	printf@PLT #call函数调用 printf打印字符串</span><br><span class="line">	movl	$0, %eax #同上	</span><br><span class="line">	popq	%rbp #pop出栈 恢复rbp的的值</span><br><span class="line">	.cfi_def_cfa 7, 8</span><br><span class="line">	ret #ret函数返回 eax存放是0,于是返回0</span><br><span class="line">	#以%开头的都是寄存器</span><br><span class="line">	.cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">	.size	main, .-main</span><br><span class="line">	.ident	&quot;GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0&quot;</span><br><span class="line">	.section	.note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure>

<p>上世纪70年代最常用cpu 8086</p>
<p>信息</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">x86架构 数据总线16b,地址总线20b</span><br><span class="line">一个字长word 16b</span><br><span class="line">l - long word 32b</span><br><span class="line">q - qwadra 64b</span><br></pre></td></tr></table></figure>

<h4 id="汇编转二进制"><a href="#汇编转二进制" class="headerlink" title="汇编转二进制"></a>汇编转二进制</h4><p>as命令</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">AS - <span class="function">the <span class="title">portable</span><span class="params">(可移植)</span> GNU <span class="title">assembler</span><span class="params">(汇编)</span>.</span></span><br></pre></td></tr></table></figure>

<p>转换命令</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">as hello.s -o hello.o</span><br></pre></td></tr></table></figure>

<p>生成的目标文件目前不能直接执行,通过nm命令可以列出所有符号 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">nm hello.o</span><br><span class="line">---</span><br><span class="line">                 U _GLOBAL_OFFSET_TABLE_</span><br><span class="line"><span class="number">0000000000000000</span> T main</span><br><span class="line">                 U printf</span><br><span class="line"><span class="comment">//U代表目前还不知道地址 unknow</span></span><br></pre></td></tr></table></figure>

<p>​	广义的常用的生成命令(从.c文件一键生成到.o目标文件)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">gcc -c hello.c -o hello.o</span><br></pre></td></tr></table></figure>

<h4 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h4><p>objdump命令</p>
<p>命令使用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">objdump hello.o -d test.o</span><br></pre></td></tr></table></figure>

<p>​	接着就会在控制台直接显示所有内容</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">hello.o：     文件格式 elf64-x86<span class="number">-64</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line"><span class="number">0000000000000000</span> &lt;main&gt;:</span><br><span class="line">   <span class="number">0</span>:	<span class="number">55</span>                   	push   %rbp</span><br><span class="line">   <span class="number">1</span>:	<span class="number">48</span> <span class="number">89</span> e5             	mov    %rsp,%rbp</span><br><span class="line">   <span class="number">4</span>:	<span class="number">48</span> <span class="number">8</span>d <span class="number">3</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 	lea    <span class="number">0x0</span>(%rip),%rdi        <span class="meta"># b <span class="string">&lt;main+0xb&gt;</span></span></span><br><span class="line">   b:	b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       	mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">  <span class="number">10</span>:	e8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       	callq  <span class="number">15</span> &lt;main+<span class="number">0x15</span>&gt;</span><br><span class="line">  <span class="number">15</span>:	b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       	mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">  <span class="number">1</span>a:	<span class="number">5</span>d                   	pop    %rbp</span><br><span class="line">  <span class="number">1b</span>:	c3                   	retq </span><br></pre></td></tr></table></figure>

<h4 id="链接-1"><a href="#链接-1" class="headerlink" title="链接"></a>链接</h4><p>作用:把函数的名字换成地址</p>
<p>ld命令可以进行链接,但不推荐,可能一个函数里调用了另一个函数,这样用ld进行链接会很麻烦</p>
<p>简便做法</p>
<p>gcc命令 不加任何参数,间接调用,就可以把文件的各个函数链接起来</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">gcc hello.o -o hello</span><br></pre></td></tr></table></figure>

<p>反汇编hello文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">0000000000201010</span> B __bss_start</span><br><span class="line"><span class="number">0000000000201010</span> b completed<span class="number">.7698</span></span><br><span class="line">                 w __cxa_finalize@@GLIBC_2<span class="number">.2</span><span class="number">.5</span></span><br><span class="line"><span class="number">0000000000201000</span> D __data_start</span><br><span class="line"><span class="number">0000000000201000</span> W data_start</span><br><span class="line"><span class="number">0000000000000570</span> t deregister_tm_clones</span><br><span class="line"><span class="number">0000000000000600</span> t __do_global_dtors_aux</span><br><span class="line"><span class="number">0000000000200</span>dc0 t __do_global_dtors_aux_fini_array_entry</span><br><span class="line"><span class="number">0000000000201008</span> D __dso_handle</span><br><span class="line"><span class="number">0000000000200</span>dc8 d _DYNAMIC</span><br><span class="line"><span class="number">0000000000201010</span> D _edata</span><br><span class="line"><span class="number">0000000000201018</span> B _end</span><br><span class="line"><span class="number">00000000000006e4</span> T _fini</span><br><span class="line"><span class="number">0000000000000640</span> t frame_dummy</span><br><span class="line"><span class="number">0000000000200</span>db8 t __frame_dummy_init_array_entry</span><br><span class="line"><span class="number">0000000000000844</span> r __FRAME_END__</span><br><span class="line"><span class="number">0000000000200f</span>b8 d _GLOBAL_OFFSET_TABLE_</span><br><span class="line">                 w __gmon_start__</span><br><span class="line"><span class="number">0000000000000700</span> r __GNU_EH_FRAME_HDR</span><br><span class="line"><span class="number">00000000000004f</span>0 T _init</span><br><span class="line"><span class="number">0000000000200</span>dc0 t __init_array_end</span><br><span class="line"><span class="number">0000000000200</span>db8 t __init_array_start</span><br><span class="line"><span class="number">00000000000006f</span>0 R _IO_stdin_used</span><br><span class="line">                 w _ITM_deregisterTMCloneTable</span><br><span class="line">                 w _ITM_registerTMCloneTable</span><br><span class="line"><span class="number">00000000000006e0</span> T __libc_csu_fini</span><br><span class="line"><span class="number">0000000000000670</span> T __libc_csu_init</span><br><span class="line">                 U __libc_start_main@@GLIBC_2<span class="number">.2</span><span class="number">.5</span></span><br><span class="line"><span class="number">000000000000064</span>a T main</span><br><span class="line">                 U printf@@GLIBC_2<span class="number">.2</span><span class="number">.5</span></span><br><span class="line"><span class="number">00000000000005b</span>0 t register_tm_clones</span><br><span class="line"><span class="number">0000000000000540</span> T _start</span><br><span class="line"><span class="number">0000000000201010</span> D __TMC_END__</span><br></pre></td></tr></table></figure>

<p>发现所有函数都找到了对应的地址</p>
<h4 id="执行可执行程序"><a href="#执行可执行程序" class="headerlink" title="执行可执行程序"></a>执行可执行程序</h4><p>只要当前用户对文件有x权限即可执行</p>
<p>通过.&#x2F;filename执行可执行程序</p>
<h4 id="库文件"><a href="#库文件" class="headerlink" title="库文件"></a>库文件</h4><p>即公用的工具,轮子,是一种特殊的.o文件,他人写好的并且公开发行的,自己拿来用</p>
<p>库文件创建过程</p>
<p><img src="/2023/11/16/linux001/image-20231122225617537.png" alt="image-20231122225617537"></p>
<h4 id="静态库和动态库"><a href="#静态库和动态库" class="headerlink" title="静态库和动态库"></a>静态库和动态库</h4><p>静态库:轮子打包到产品中,比喻:家用汽车在生成时就已经组装到车里了,一般情况下不会改变 </p>
<p><img src="/2023/11/16/linux001/image-20231122230038719.png" alt="image-20231122230038719"></p>
<p>动态库:在运行的时候轮子才会组装起来,比喻:比赛时用的汽车,例如F4赛车,在赛场上需要跑起来时才会组装上</p>
<p><img src="/2023/11/16/linux001/image-20231122230157337.png" alt="image-20231122230157337"></p>
<p>对比:</p>
<ul>
<li><p>静态文件比较大,动态库在运行时才会组装,动态库更加小一些</p>
</li>
<li><p>部署起来静态文件更加容易 </p>
</li>
<li><p>动态库更加容易升级,因为轮子换起来更加方便,静态库轮子不方便更换</p>
</li>
</ul>
<p>一般情况下,gcc生成的目标文件都是调用的动态库,加上参数-static调用静态库,根据ldd命令查看文件属性可知.so为动态库文件, .a为静态库文件</p>
<h4 id="生成静态库"><a href="#生成静态库" class="headerlink" title="生成静态库"></a>生成静态库</h4><p>​	当我们调用一个只声明的函数时</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;add(3,4) = %d\n&quot;</span>,<span class="built_in">add</span>(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为test.o的目标文件是可以通过的,但是通过gcc进行链接操作时出现了问题</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">test.o：在函数‘main’中：</span><br><span class="line">test.c:(.text+0xf)：对‘add’未定义的引用</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure>

<p>此时我们再编译一个add.c文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> lhs,<span class="type">int</span> rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> lhs + rhs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译同样可以通过,但进行gcc链接操作也出现了问题</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">(.text+0x20)：对‘main’未定义的引用</span><br><span class="line">collect2: error: ld returned 1 exit statu</span><br></pre></td></tr></table></figure>

<ul>
<li>test.o缺少了add函数的地址,add.o缺少了main函数的地址</li>
</ul>
<p>接下来我们手动链接test和add</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">gcc test.o add.o -o test</span><br></pre></td></tr></table></figure>

<p>发现可以通过,且输出</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">add(3,4) = 7</span><br></pre></td></tr></table></figure>

<p>整个过程简略图</p>
<p><img src="/2023/11/16/linux001/image-20231123163047396.png" alt="image-20231123163047396"> </p>
<h4 id="如何将add-o文件变为共享库"><a href="#如何将add-o文件变为共享库" class="headerlink" title="如何将add.o文件变为共享库"></a>如何将add.o文件变为共享库</h4><ol>
<li><p>生成目标文件 </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$gcc -c add.c -o add.o</span><br></pre></td></tr></table></figure>


</li>
<li><p>将目标文件打包成静态库文件</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ar crsv libadd.a add.o</span><br></pre></td></tr></table></figure>


</li>
<li><p>生成了一个以libadd为前缀以.a为后缀的静态库文件</p>
</li>
<li><p>将文件移动到系统搜索目录中 (&#x2F;usr&#x2F;lib 切换为root用户)</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$sudo cp libadd.a /usr/lib</span><br></pre></td></tr></table></figure>



<p>检查此时是否已经复制到了当前目录中</p>
</li>
</ol>
<p><img src="/2023/11/16/linux001/image-20231123164133408.png" alt="image-20231123164133408"></p>
<ol start="5">
<li><p>此时重新生成test目标文件</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">gcc test.o -o test -ladd   </span><br><span class="line">你的库叫什么名字在-l后面就加什么名字且不带空格</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看是否成功</p>
<p><img src="/2023/11/16/linux001/image-20231123164646219.png" alt="image-20231123164646219"></p>
</li>
</ol>
<h4 id="配置代码环境"><a href="#配置代码环境" class="headerlink" title="配置代码环境"></a>配置代码环境</h4><ol>
<li><p>vimplus</p>
</li>
<li><p>vscode</p>
<p>vscode环境配置详情见<a href="http://8.140.253.116/2023/11/23/vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">vscode远程连接linux环境配置 | 涅槃豆の博客</a></p>
</li>
</ol>
<h4 id="动态库链接"><a href="#动态库链接" class="headerlink" title="动态库链接"></a>动态库链接</h4><ol>
<li>先把原先的add.c和test.c复制到dynamic文件夹中,进行我们动态库链接的热身</li>
</ol>
<p><img src="/2023/11/16/linux001/image-20231123174535292.png" alt="image-20231123174535292"></p>
<ol start="2">
<li><p>生成test.o目标文件</p>
</li>
<li><p>将add.c编译成目标文件</p>
<blockquote>
<p>(动态库的文件在运行时才会加载,运行时会存储在栈和堆中间的一部分区域中,称为共享库映射区)</p>
</blockquote>
</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">gcc add.c -o add.o -fpic</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>打包成库文件</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">gcc -shared add.o -o libadd.so</span><br></pre></td></tr></table></figure>

<blockquote>
<p>lib为固定前缀,so为固定后缀</p>
</blockquote>
</li>
<li><p>将生成的libadd.so移动到&#x2F;usr&#x2F;lib目录中</p>
<p> <img src="/2023/11/16/linux001/image-20231123175651898.png" alt="image-20231123175651898"></p>
</li>
<li><p>检查系统目录是否存在该文件</p>
<p><img src="/2023/11/16/linux001/image-20231123175721381.png" alt="image-20231123175721381"></p>
</li>
<li><p>编译为可执行文件时加上-l参数(如果生成的还是静态库链接文件记得删除掉&#x2F;usr&#x2F;lib中的libadd.a文件)</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">gcc -c test.c -o test -ladd</span><br></pre></td></tr></table></figure>

<p>通过ldd命令可以查看链接情况</p>
<p><img src="/2023/11/16/linux001/image-20231123180057168.png" alt="image-20231123180057168"></p>
</li>
</ol>
<p>​	如果此时删除 libadd.so,是没办法运行的,而再把so文件放回去,又可以运行了</p>
<h4 id="软链接-符号链接"><a href="#软链接-符号链接" class="headerlink" title="软链接 符号链接"></a>软链接 符号链接</h4><p>软链接实际上就像快捷方式一样,里面的某个字符串存储了真实文件的路径</p>
<p>在动态库文件需要更新时,可以不用删除lib目录下对应的so文件,而是将so文件改造为软链接的方式,链接到新版本的动态库文件</p>
<p><img src="/2023/11/16/linux001/image-20231123181138535.png" alt="image-20231123181138535"></p>
<p>通过ln命令进行软链接</p>
<p><img src="/2023/11/16/linux001/image-20231123181447308.png" alt="image-20231123181447308"></p>
<p>此时我们作为作者更新了我们的add.c源文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> lhs,<span class="type">int</span> rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> lhs + rhs + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再重新进行生成动态库文件的操作</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ gcc -c add.c -o add.o -fpic</span><br><span class="line">$ gcc -shared add.o -o libadd.so.0.2</span><br><span class="line">$ sudo cp libadd.so.0.2 /usr/lib</span><br></pre></td></tr></table></figure>

<p>重新进行软链接操作</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">%cd /usr/lib</span><br><span class="line">$sudo rm libadd.so</span><br><span class="line">$sudo ln -s libadd.so.0.2 libadd.so</span><br></pre></td></tr></table></figure>

<p>再次执行test可执行文件</p>
<p><img src="/2023/11/16/linux001/image-20231123182323150.png" alt="image-20231123182323150"></p>
<p>如果需要回滚版本只需要重新进行软链接</p>
<h4 id="gcc其他选项"><a href="#gcc其他选项" class="headerlink" title="gcc其他选项"></a>gcc其他选项</h4><ul>
<li><p>-D xxx 用命令宏定义一个xxx变量,相当于在代码内部首行添加一个#define xxx</p>
</li>
<li><p>-I &#x2F;xxx&#x2F;xxx 增加一个头文件搜索目录</p>
</li>
<li><p>编译优化 </p>
<p>-O0  不优化</p>
</li>
</ul>
<p>​	   -O1  </p>
<pre><code>   -O2
 
  -O3 1-&gt;3优化越来越深 
</code></pre>
<h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>gdb和vs的调试很类似,但多了一种类似黑匣子的功能,可以记录信息 </p>
<p>man的描述</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">gdb - The GNU Debugger</span><br></pre></td></tr></table></figure>

<ul>
<li><p>gdb使用时建议不要开优化,因为优化后会修改最终运行时的代码,调试时的汇编代码可能和源文件差别很大</p>
<p>因此编译时需要加上两个参数</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">gcc filename -o xxx -O0 -g    (-g是记录调试信息)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>创建一个用于调试的代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m func, i = %d\n&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> j = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>] =  &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">    p = arr;</span><br><span class="line">    <span class="built_in">func</span>(j);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译时记得加上参数</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">gcc test.c -o test -O0 -g</span><br></pre></td></tr></table></figure>

<ol>
<li>此时我们使用gdb命令即可进入调试</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">gdb test</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/16/linux001/image-20231124214042899.png" alt="image-20231124214042899"></p>
<ol start="2">
<li>此界面使用list可以默认显示10行代码</li>
</ol>
<p><img src="/2023/11/16/linux001/image-20231124214227553.png" alt="image-20231124214227553"></p>
<ol start="3">
<li>再输入list进入下一页</li>
</ol>
<p><img src="/2023/11/16/linux001/image-20231124214329799.png" alt="image-20231124214329799"></p>
<ol start="4">
<li>输入list1即可回到首行</li>
</ol>
<p><img src="/2023/11/16/linux001/image-20231124214408654.png" alt="image-20231124214408654"></p>
<p>输入l也和list效果相同</p>
<ol start="5">
<li>如果一个程序有多个源文件,也可以指定是哪个文件,比如要查看test.c文件的第一行</li>
</ol>
<p>输入 l test.c:1</p>
<p><img src="/2023/11/16/linux001/image-20231124214651757.png" alt="image-20231124214651757"></p>
<ol start="6">
<li>同样如果要找某个函数也可以做到,比如要找到main函数</li>
</ol>
<p>输入l test.c:main</p>
<p><img src="/2023/11/16/linux001/image-20231124214955200.png" alt="image-20231124214955200"></p>
<ol start="7">
<li>如果要运行程序就输入 run或者r</li>
</ol>
<p><img src="/2023/11/16/linux001/image-20231124215143723.png" alt="image-20231124215143723"></p>
<ol start="8">
<li>打断点的方法    break或者b 同样可以指定行或者函数</li>
</ol>
<p><img src="/2023/11/16/linux001/image-20231124215407023.png" alt="image-20231124215407023"></p>
<ol start="9">
<li><p>在打完断点之后,发现不是一次运行完了</p>
<p><img src="/2023/11/16/linux001/image-20231124215552111.png" alt="image-20231124215552111"></p>
</li>
<li><p>现在我们可以选择进行单步调试,也可以选择输入continue运行到下一个断点</p>
<p><img src="/2023/11/16/linux001/image-20231124215716050.png" alt="image-20231124215716050"></p>
</li>
<li><p>进行单步调试可以输入next或者n或者 step或者s</p>
<p><img src="/2023/11/16/linux001/image-20231124215937357.png" alt="image-20231124215937357"></p>
</li>
</ol>
<p>​	此时我们发现他进入到了printf.c文件中,虽然没有找到,输入finish可以运行到printf函数运行执行完毕</p>
<p><img src="/2023/11/16/linux001/image-20231124220158811.png" alt="image-20231124220158811">	再输入next刚好跳出func函数回到main函数里面</p>
<p><img src="/2023/11/16/linux001/image-20231124220304872.png" alt="image-20231124220304872"></p>
<ol start="12">
<li><p>如果我们想在运行时删除掉某个断点,则可以用到delete命令,输入delete+空格+对应断点编号即可,而输入delete是删除所有断点</p>
</li>
<li><p>info break或者ib可以查看某行的断点信息,以及相应的命中次数</p>
<p><img src="/2023/11/16/linux001/image-20231124221727038.png" alt="image-20231124221727038"></p>
</li>
<li><p>ingnore +空格+ 编号+ 次数 ,意味着忽略某号断点多少次</p>
</li>
</ol>
<h4 id="在gdb查看监视"><a href="#在gdb查看监视" class="headerlink" title="在gdb查看监视"></a>在gdb查看监视</h4><ul>
<li><p>输入print + 对应变量名可以查看变量数据</p>
<p><img src="/2023/11/16/linux001/image-20231124222741554.png" alt="image-20231124222741554"></p>
</li>
<li><p>也可以进行对应计算</p>
<p><img src="/2023/11/16/linux001/image-20231124222841137.png" alt="image-20231124222841137"></p>
<ul>
<li><p>用print显示会有些麻烦 ,而用display加变量名可以在运行时一直显示</p>
<p><img src="/2023/11/16/linux001/image-20231124224030101.png" alt="image-20231124224030101"></p>
</li>
</ul>
</li>
</ul>
<p>​			info display可以查看监视信息,从而得知显示的变量的编号</p>
<p>​			再输入undisplay + 编号即可不再显示该变量 </p>
<h4 id="在gdb中查看内存"><a href="#在gdb中查看内存" class="headerlink" title="在gdb中查看内存"></a>在gdb中查看内存</h4><p>​	需要使用x命令,因为命令很复杂我们可以用help查看如何 使用</p>
<p><img src="/2023/11/16/linux001/image-20231124224553569.png" alt="image-20231124224553569"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">(gdb)x/FMT ADDRESS</span><br><span class="line">	x/count + letter1 + letter2  </span><br></pre></td></tr></table></figure>

<ul>
<li>count代表要看多少单位</li>
<li>letter1选择相应格式o,x,d,u,t,f,a,i,c,s,和printf格式输出类似</li>
<li>letter2选择单位大小b,h,w,g分别为1b,2b,4b,8b</li>
</ul>
<p>例如我们要查看arr数组内存时</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">(gdb) x/3tw arr</span><br><span class="line">以二进制形式查看3个单位的变量,且每个变量大小为4字节,地址是arr的地址</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/16/linux001/image-20231124225246954.png" alt="image-20231124225246954"></p>
<ul>
<li>此时我们也可以通过内存地址查看系统是大端存储(低字节高地址)还是小端存储(低字节低地址)</li>
</ul>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(gdb)</span>x/<span class="number">4</span>tb arr</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/16/linux001/image-20231124225614144.png" alt="image-20231124225614144"></p>
<p>​	发现1存储在低地址,所以是大端存储</p>
<p>​	如果感觉不明显可以修改数据然后查看</p>
<p><img src="/2023/11/16/linux001/image-20231124230601336.png" alt="image-20231124230601336"></p>
<p>​	此时很明显看到高位存储在低地址,确定是大端存储</p>
<h4 id="检查崩溃程序"><a href="#检查崩溃程序" class="headerlink" title="检查崩溃程序"></a>检查崩溃程序</h4><p>黑匣子-&gt;core文件,存储了程序崩溃时刻内存的堆栈情况</p>
<p>例如我们创建一个必定崩溃的代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    *p = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/16/linux001/image-20231126224316202.png" alt="image-20231126224316202"></p>
<p>编译也可以通过</p>
<p>运行时发现,发生段错误,也就是指针指向出错了</p>
<p><img src="/2023/11/16/linux001/image-20231126225110969.png" alt="image-20231126225110969"></p>
<p>此时发现目录下多了一个core文件</p>
<p><img src="/2023/11/16/linux001/image-20231126230825136.png" alt="image-20231126230825136"></p>
<ul>
<li><p>如果没有生成,可以按以下步骤操作</p>
<ol>
<li><p>查看core文件可以创建多大</p>
<p><img src="/2023/11/16/linux001/image-20231126230518829.png" alt="image-20231126230518829"></p>
</li>
<li><p>如果core文件大小为0,根据core文件参数,目前显示是-c</p>
<p>则我们输入以下命令(该修改只是暂时的,下次重新进入系统会恢复默认)</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ulimit -c unlimited</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/16/linux001/image-20231126230750177.png" alt="image-20231126230750177"></p>
<p>发现已经修改成功为unlimited,并再次执行代码查看目录是否有core文件</p>
<p><img src="/2023/11/16/linux001/image-20231126230853232.png" alt="image-20231126230853232"></p>
</li>
</ol>
</li>
<li><p>如果还没有生成</p>
<ol>
<li><p>切换管理员 su root</p>
</li>
<li><p>输入以下命令 echo core &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;core_pattern</p>
<p><img src="/2023/11/16/linux001/image-20231126225852754.png" alt="image-20231126225852754"></p>
</li>
<li><p>退回到当前用户 exit</p>
<p>再次执行代码并查看是否有core文件 </p>
<p><img src="/2023/11/16/linux001/image-20231126230934622.png" alt="image-20231126230934622"></p>
</li>
</ol>
</li>
</ul>
<p>如果core文件生成成功,我们就可以通过gdb查看他是什么时候出错了</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$gdb ./filename core</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/16/linux001/image-20231126231321023.png" alt="image-20231126231321023"></p>
<p>我们再测试另一种情况,并通过gdb查看是哪里出错</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">func</span>(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译成功后运行</p>
<p><img src="/2023/11/16/linux001/image-20231126231706285.png" alt="image-20231126231706285"></p>
<p>通过gdb查看是哪里出错</p>
<p><img src="/2023/11/16/linux001/image-20231126231901562.png" alt="image-20231126231901562"></p>
<p>发现第三行出错,栈爆了</p>
<h4 id="gdb加命令行参数"><a href="#gdb加命令行参数" class="headerlink" title="gdb加命令行参数"></a>gdb加命令行参数</h4><p>过去的c语言main函数中都有两个参数argc和argv[ ]</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;argc = %d\n&quot;</span>,argc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; argc;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>我们可以在编译运行后查看argc和argv都是什么</p>
<p><img src="/2023/11/16/linux001/image-20231126232914678.png" alt="image-20231126232914678"></p>
</li>
<li><p>当我们再运行时添加一些东西时,args和argv的值就会发生变化</p>
<p><img src="/2023/11/16/linux001/image-20231126232958102.png" alt="image-20231126232958102"></p>
</li>
</ul>
<p>也就是说args记录了argv数组有几个元素,argv数组记录了各个参数</p>
<ul>
<li><p>如果用gdb去启动</p>
<p><img src="/2023/11/16/linux001/image-20231126233124517.png" alt="image-20231126233124517"></p>
<p>使用set命令可以为其添加参数(非覆盖)</p>
<p><img src="/2023/11/16/linux001/image-20231126233212352.png" alt="image-20231126233212352"></p>
</li>
</ul>
<h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><h3 id="makefile增量编译"><a href="#makefile增量编译" class="headerlink" title="makefile增量编译"></a>makefile增量编译</h3><p>如果要编译一个系统需要很长时间,且这段时间程序员因为系统cpu等硬件正在满负载工作无法做任何事情,因此需要增量编译来减少编译浪费时间</p>
<p> 增量编译首先要维持一种”目标-依赖”关系,构成树的结构,改变某个节点只会影响他的子树</p>
<h4 id="makefile的实现"><a href="#makefile的实现" class="headerlink" title="makefile的实现"></a>makefile的实现</h4><ol>
<li><p>文件名必须是Makefile&#x2F;makefile</p>
</li>
<li><p>规则的集合:由目标文件的名称,依赖文件的名称,命令,分号作为目标和依赖的分隔符</p>
<p><img src="/2023/11/16/linux001/image-20231127145402132.png" alt="image-20231127145402132"></p>
</li>
<li><p>把最终要生成的文件作为第一个规则</p>
</li>
</ol>
<ul>
<li>创建main.c和add.c文件</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;add(3,4) = %d\n&quot;</span>,<span class="built_in">add</span>(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> lhs,<span class="type">int</span> rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs + rhs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在该目录下生成makefile文件并编辑(注意分号分隔符,和命令需要tab键按下后编辑)</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">main:main.o add.o</span></span><br><span class="line">	gcc main.o add.o -o main</span><br><span class="line"><span class="section">main.o:main.c</span></span><br><span class="line">	gcc -c main.c -o main.o</span><br><span class="line"><span class="section">add.o:add.c</span></span><br><span class="line">	gcc -c add.c -o add.o</span><br></pre></td></tr></table></figure>
</li>
<li><p>保证文件的格式都是正确之后,输入make命令,发现需要生成的文件都生成了</p>
<p><img src="/2023/11/16/linux001/image-20231127150629145.png" alt="image-20231127150629145"></p>
</li>
<li><p>当源文件比目标文件修改时间要新的话,再使用make命令就会进行增量编译</p>
<p>比如我修改了add.c</p>
<p><img src="/2023/11/16/linux001/image-20231127151020144.png" alt="image-20231127151020144"></p>
</li>
</ul>
<p>​		使用make命令,会发现add.o</p>
<p>​		<img src="/2023/11/16/linux001/image-20231127151051257.png" alt="image-20231127151051257"></p>
<p>​		如果要执行特定指令 可以在make后加上对应目标文件,例如 make main.o则是以main.o作为目标起点</p>
<h4 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h4><p>​	特点:目标不存在,执行命令是不会生成目标文件的</p>
<blockquote>
<p> 因为目标不存在,所以导致了每次make都一定执行他的命令</p>
</blockquote>
<p>​	修改makefile文件,添加一个clean目标文件</p>
<p>​	解释原理:原先的main和main.o,add.o都有对应的依赖文件,形成的树结构如下</p>
<p><img src="/2023/11/16/linux001/image-20231127154632409.png" alt="image-20231127154632409"></p>
<p>而clean没有依赖文件,当输入make clean以clean为起点时</p>
<p><img src="/2023/11/16/linux001/image-20231127154745236.png" alt="image-20231127154745236"></p>
<p>clean只会执行属于自己的命令,没有依赖文件也就是没有子树所以main,main.o,add.o的命令都不会执行</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">main:main.o add.o</span></span><br><span class="line">	gcc main.o add.o -o main</span><br><span class="line"><span class="section">main.o:main.c</span></span><br><span class="line">	gcc -c main.c -o main.o</span><br><span class="line"><span class="section">add.o:add.c</span></span><br><span class="line">	gcc -c add.c -o add.o </span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f main.o add.o main</span><br></pre></td></tr></table></figure>

<p>在make时加上clean,每次都会执行对应命令</p>
<p><img src="/2023/11/16/linux001/image-20231127153747597.png" alt="image-20231127153747597"></p>
<h4 id="全量编译"><a href="#全量编译" class="headerlink" title="全量编译"></a>全量编译</h4><p>可以在makefile文件中加入一些东西</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">main:main.o add.o</span></span><br><span class="line">	gcc main.o add.o -o main</span><br><span class="line"><span class="section">main.o:main.c</span></span><br><span class="line">	gcc -c main.c -o main.o</span><br><span class="line"><span class="section">add.o:add.c</span></span><br><span class="line">	gcc -c add.c -o add.o </span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f main.o add.o main</span><br><span class="line"><span class="section">rebuild:clean main</span></span><br></pre></td></tr></table></figure>

<p>rebulid的依赖文件为clean和main,先依赖的clean因此会先执行clean的命令,将main.o,add.o和main都删除,然后再执行main命令,又依次生成了main.o,add.o,main</p>
<p><img src="/2023/11/16/linux001/image-20231127155138209.png" alt="image-20231127155138209"></p>
<p>这样的删除全部生成文件然后又重新生成的操作成为全量编译</p>
<ul>
<li><p>为了makefile规范,我们通常在伪目标之前声明一下</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">main:main.o add.o</span></span><br><span class="line">	gcc main.o add.o -o main</span><br><span class="line"><span class="section">main.o:main.c</span></span><br><span class="line">	gcc -c main.c -o main.o</span><br><span class="line"><span class="section">add.o:add.c</span></span><br><span class="line">	gcc -c add.c -o add.o </span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean rebuild</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f main.o add.o main</span><br><span class="line"><span class="section">rebuild:clean main</span></span><br></pre></td></tr></table></figure>

<p>.PHONY就是声明clean和rebuild是伪目标,没有任何作用</p>
</li>
</ul>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>makefile原内容</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">main:main.o add.o</span></span><br><span class="line">	gcc main.o add.o -o main</span><br><span class="line"><span class="section">main.o:main.c</span></span><br><span class="line">	gcc -c main.c -o main.o</span><br><span class="line"><span class="section">add.o:add.c</span></span><br><span class="line">	gcc -c add.c -o add.o </span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean rebuild</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f main.o add.o main</span><br><span class="line"><span class="section">rebuild:clean main</span></span><br></pre></td></tr></table></figure>



<ol>
<li><p>自定义变量:   变量名:&#x3D;值   (在makefile中,变量中所有值都是字符串类型)</p>
<p>引用变量:      $(变量名)</p>
<p>使用自定义变量后就可以更改原来的内容了</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">OUT:=main <span class="comment">#定义变量</span></span><br><span class="line">OBJS:= main.o add.o</span><br><span class="line"></span><br><span class="line"><span class="variable">$(OUT)</span>:<span class="variable">$(OBJS)</span></span><br><span class="line">	gcc <span class="variable">$(OBJS)</span> -o main</span><br><span class="line"><span class="section">main.o:main.c</span></span><br><span class="line">	gcc -c main.c -o main.o</span><br><span class="line"><span class="section">add.o:add.c</span></span><br><span class="line">	gcc -c add.c -o add.o </span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean rebuild</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f <span class="variable">$(OBJS)</span> <span class="variable">$(OUT)</span></span><br><span class="line"><span class="section">rebuild:clean main </span></span><br></pre></td></tr></table></figure>


</li>
<li><p>预定义变量:预先就有值的意思</p>
<p><img src="/2023/11/16/linux001/image-20231127160351326.png" alt="image-20231127160351326"></p>
<p> 根据预定义变量我们可以把gcc替换成$(CC),rm-f替换成$(RM)</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">OUT:=main</span><br><span class="line">OBJS:= main.o add.o</span><br><span class="line"> </span><br><span class="line"><span class="variable">$(OUT)</span>:<span class="variable">$(OBJS)</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(OBJS)</span> -o main</span><br><span class="line"><span class="section">main.o:main.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> -c main.c -o main.o</span><br><span class="line"><span class="section">add.o:add.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> -c add.c -o add.o </span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean rebuild</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	<span class="variable">$(RM)</span> <span class="variable">$(OBJS)</span> <span class="variable">$(OUT)</span> </span><br><span class="line"><span class="section">rebuild:clean main </span></span><br></pre></td></tr></table></figure>

<p>使用make rebuild发现使用的是cc而不是gcc</p>
<p><img src="/2023/11/16/linux001/image-20231127160726607.png" alt="image-20231127160726607"></p>
<p>我们可以修改预定义变量的值</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">CC:=gcc</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/16/linux001/image-20231127160826075.png" alt="image-20231127160826075"></p>
</li>
<li><p>自动变量:同一变量名根据规则变化自动变化,类似auto</p>
<p><img src="/2023/11/16/linux001/image-20231127160927455.png" alt="image-20231127160927455"></p>
<p>根据表格我们可以如此修改</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">OUT:=main</span><br><span class="line">OBJS:= main.o add.o</span><br><span class="line">CC:=gcc</span><br><span class="line"><span class="variable">$(OUT)</span>:<span class="variable">$(OBJS)</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">main.o:main.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> -c <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">add.o:add.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> -c <span class="variable">$^</span> -o <span class="variable">$@</span> </span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean rebuild</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	<span class="variable">$(RM)</span> <span class="variable">$(OBJS)</span> <span class="variable">$(OUT)</span> </span><br><span class="line"><span class="section">rebuild:clean main </span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="用-字符管理格式关系"><a href="#用-字符管理格式关系" class="headerlink" title="用%字符管理格式关系"></a>用%字符管理格式关系</h4><ul>
<li><p>通过观察我们可以发现main.o和add.o的目标文件,依赖关系,命令格式是完全相同的,我们可以用%来合并为一个,%负责从上一个规则的依赖关系的字符串中把数据匹配出来</p>
<p>我们可以如下修改</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">OUT:=main</span><br><span class="line">OBJS:= main.o add.o</span><br><span class="line">CC:=gcc</span><br><span class="line"><span class="variable">$(OUT)</span>:<span class="variable">$(OBJS)</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">%.o:%.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> -c <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean rebuild</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	<span class="variable">$(RM)</span> <span class="variable">$(OBJS)</span> <span class="variable">$(OUT)</span> </span><br><span class="line"><span class="section">rebuild:clean main </span></span><br></pre></td></tr></table></figure>

<p>%.o第一次匹配到的是main.o,此时的%代表的就是main,执行完这一个规则后再次匹配,匹配到add.o,此时%就是add,如此往复知道没有可匹配的结束这一整个大规则</p>
</li>
<li><p>如果我们想要新增一个函数在main中调用</p>
<p>main.c</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;add(3,4) = %d\n&quot;</span>,<span class="built_in">add</span>(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sub(3,4) = %d\n&quot;</span>,<span class="built_in">sub</span>(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub.c</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> lhs,<span class="type">int</span> rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> lhs - rhs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时我们直接在makefile文件中的OBJS变量中加上sub.o即可</p>
<p>执行make并运行main</p>
<p><img src="/2023/11/16/linux001/image-20231127200102670.png" alt="image-20231127200102670"></p>
<p><img src="/2023/11/16/linux001/image-20231127200132186.png" alt="image-20231127200132186"></p>
</li>
</ul>
<p>​		可以看出makefile方便了我们程序员进行编译的操作</p>
<h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p>​	如果觉得增量编译一个.c文件需要修改一行还是很麻烦,那么还有我们的内置函数</p>
<ul>
<li><p>wildcard通配符</p>
<p>从当前目录所有文件中取出符合要求的文件名</p>
<p>因此我们可以创建一个变量,通过通配符获取当前目录所有的.c文件</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">SRCS:=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br></pre></td></tr></table></figure>

<p>如果相要检查是否完全获取到,可以通过伪目标的命令来查看</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">all:</span></span><br><span class="line">	echo <span class="variable">$(SRCS)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">OUT:=main</span><br><span class="line">SRCS:=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br><span class="line">OBJS:= main.o add.o sub.o</span><br><span class="line">CC:=gcc</span><br><span class="line"><span class="variable">$(OUT)</span>:<span class="variable">$(OBJS)</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">%.o:%.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> -c <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean rebuild all</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	<span class="variable">$(RM)</span> <span class="variable">$(OBJS)</span> <span class="variable">$(OUT)</span> </span><br><span class="line"><span class="section">rebuild:clean main 	</span></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">	echo <span class="variable">$(SRCS)</span></span><br></pre></td></tr></table></figure>

<p>通过make all命令检查</p>
<p><img src="/2023/11/16/linux001/image-20231127202053979.png" alt="image-20231127202053979"></p>
</li>
<li><p>patsubst(pattern substitute)模式匹配</p>
<p>类似一种函数的形式,将指定变量中.c后缀的替换成.o后缀赋值到当前命令中</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">OBJS:=<span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,%(SRCS)</span>)</span><br></pre></td></tr></table></figure>

<p><strong>此时即使我们的代码有调整,有新增的.c文件,makefile也不需要修改任何东西</strong></p>
<p><strong>我们只需要使用make命令即可完成之前的一系列操作</strong></p>
</li>
</ul>
<h4 id="最终版本"><a href="#最终版本" class="headerlink" title="最终版本"></a>最终版本</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">OUT:=main</span><br><span class="line">SRCS:=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br><span class="line"><span class="comment">#OBJS:= main.o add.o sub.o</span></span><br><span class="line">OBJS:=<span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,<span class="variable">$(SRCS)</span>)</span></span><br><span class="line">CC:=gcc</span><br><span class="line"><span class="variable">$(OUT)</span>:<span class="variable">$(OBJS)</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">%.o:%.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> -c <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean rebuild all</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	<span class="variable">$(RM)</span> <span class="variable">$(OBJS)</span> <span class="variable">$(OUT)</span> </span><br><span class="line"><span class="section">rebuild:clean main 	</span></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">	echo <span class="variable">$(SRCS)</span></span><br></pre></td></tr></table></figure>

<p>make命令</p>
<p><img src="/2023/11/16/linux001/image-20231127202834689.png" alt="image-20231127202834689"></p>
<h3 id="第二版makefile"><a href="#第二版makefile" class="headerlink" title="第二版makefile"></a>第二版makefile</h3><p>之前的makefile最终都是只为编译一个最终的目标文件</p>
<p>而当我们正常使用时,一般都会想每个代码分别编译运行,让每个代码单独编译链接</p>
<p><img src="/2023/11/16/linux001/image-20231127203918841.png" alt="image-20231127203918841"></p>
<p>最大的区别是我们可以通过伪目标一次生成不同的目标文件,通过make all实现一次编译多个文件</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">SRCS:=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br><span class="line">EXES:=<span class="variable">$(<span class="built_in">patsubst</span> %.c,%,<span class="variable">$(SRCS)</span>)</span></span><br><span class="line">CC:=gcc</span><br><span class="line"><span class="section">all:<span class="variable">$(EXES)</span></span></span><br><span class="line"><span class="section">%:%.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure>

<p>此时我们发现3个分别输出1,2,3的文件一次编译生成了<img src="/2023/11/16/linux001/image-20231127204756602.png" alt="image-20231127204756602"></p>
<ul>
<li><p>如果说我们代码的源文件在不同目录下,例如存放makefile在根目录下,源代码在根目录的src目录下,比如我们在wildcard下做如此操作即可</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">SRCS:=<span class="variable">$(<span class="built_in">wildcard</span> src/*.c)</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>linux第二部分-操作系统</title>
    <url>/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>本章节延续linux第一部分继续学习</p>
<p>并非仅学习操作系统,实际上学习的是linux的系统编程,之后学习的是各样式的系统调用</p>
</blockquote>
<h1 id="初步认识系统编程"><a href="#初步认识系统编程" class="headerlink" title="初步认识系统编程"></a>初步认识系统编程</h1><h2 id="如何学习系统编程"><a href="#如何学习系统编程" class="headerlink" title="如何学习系统编程"></a>如何学习系统编程</h2><p>资料推荐:man手册</p>
<h3 id="如何阅读man手册"><a href="#如何阅读man手册" class="headerlink" title="如何阅读man手册"></a>如何阅读man手册</h3><p>通过man man命令可以查看如何使用man手册</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231127212814235.png" alt="image-20231127212814235"></p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231127212911553.png" alt="image-20231127212911553"></p>
<h3 id="库函数帮助手册"><a href="#库函数帮助手册" class="headerlink" title="库函数帮助手册"></a>库函数帮助手册</h3><p>某些系统可能没有预装库函数,因此需要先安装</p>
<p>输入以下命令并成功安装</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$sudo apt install manpages-posix-dev</span><br></pre></td></tr></table></figure>

<p>根据手册页编号我们可以查看对应命令或函数对应手册的描述</p>
<p>比如我们要查看的是库调用中的printf函数(注意手册页,3对应是库函数中的printf函数)</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">man 3 printf</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231127213726982.png" alt="image-20231127213726982"></p>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>狭义概念:存储在外部存储设备介质上的数据集合</p>
<p>广义概念:传输速度慢,容量大,可以持久存储</p>
<p>常见的文件类型 :普通文件,目录文件,软链接,字符设备文件(鼠标,键盘等),块设备文件,管道文件,socket(网络通信)</p>
<h3 id="文件使用"><a href="#文件使用" class="headerlink" title="文件使用"></a>文件使用</h3><p>当我们想要访问某个存储设备的文件,肯定不能直接访问,而是通过将文件放到内存,再让cpu从内存读入的方式进行,内存中有一块专门的区域和外部设备进行交换数据,称为文件缓冲区</p>
<h4 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h4><p>fopen应当属于库函数,所以我们想要man时需要看的是3号手册</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231128190643704.png" alt="image-20231128190643704"><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231128190650612.png" alt="image-20231128190650612"> </p>
<ul>
<li>根据FILE *fopen一行可知,参数列表有两个const修饰的字符串,返回值为一个FILE *</li>
<li>pathname表示路径,mode有r(只读打开),w(只写创建),rw(读写创建)</li>
<li>如果返回的是空指针则有可能发生错误,通过perror函数可以查看报错信息</li>
</ul>
<h4 id="准备部分-文件报错"><a href="#准备部分-文件报错" class="headerlink" title="准备部分-文件报错"></a>准备部分-文件报错</h4><p>我们在执行可执行文件时有时候会加上一个参数,此时我们通过main函数中的argc参数可以用于检查</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr,<span class="string">&quot;args error!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但这样的话我们每次新建一个文件都需要这么长几行,影响代码可读性</p>
<p>我们可以通过某些操作将这一操作通过带参数的宏定义封装进.h文件(宏定义一般放到头文件中)</p>
<ul>
<li><p>在&#x2F;usr&#x2F;include中创建一个.h文件 ,可以命名为usually.h,意味着用于我们以后可能经常使用</p>
</li>
<li><p>创建后并给他普通用户可写的权限</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231128194131796.png" alt="image-20231128194131796"></p>
</li>
<li><p>转到usually.h进行编辑</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> <span class="comment">//加入一些常用的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ARGS_CHECK(argc, num)                 \</span></span><br><span class="line"><span class="meta">    &#123;                                         \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (argc != num)                      \</span></span><br><span class="line"><span class="meta">        &#123;                                     \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot;args error!\n&quot;</span>); \</span></span><br><span class="line"><span class="meta">            return -1;                        \</span></span><br><span class="line"><span class="meta">        &#125;                                     \</span></span><br><span class="line"><span class="meta">    &#125;                                         \</span></span><br><span class="line"><span class="meta"><span class="comment">//原本的#define是在一行里</span></span></span><br><span class="line"><span class="comment">//#define ARGS_CHECK(argc,num)&#123;if(argc != num) &#123;fprintf(stderr,&quot;args error!\n&quot;);return -1;&#125;&#125;</span></span><br><span class="line"><span class="comment">//在vscode下选中代码并按快捷键crtl+k,crtl保持按住,然后crtl+f进行自动格式化</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回到fopen.c中,头文件可改为&lt;usually.h&gt;(使用&lt;&gt;引用是因为我们将usually.h放进了include文件夹中,系统根据&lt;&gt;提示优先在&#x2F;usr&#x2F;include目录下寻找对应头文件)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;usually.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ARGS_CHECK</span>(argc,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>此时fopen.c就可以通过ARGS_CHECK代替刚才的操作</p>
<p>我们再加上检查fp是否是NULL的操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;usually.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ARGS_CHECK</span>(argc,<span class="number">2</span>);</span><br><span class="line">    FILE* fp = <span class="built_in">fopen</span>(argv[<span class="number">1</span>],<span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;fopen&quot;</span>);<span class="comment">//perror打印字符串内指定函数的错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>argv[1]代表第一个参数,也就是我们要打开的文件,并以只读的方式打开</li>
<li>perror用于打印报错信息</li>
<li>注意的是一个文件通过fopen打开后一定要通过fclose关闭</li>
</ul>
<ol>
<li><p>通过makefile文件使用make命令创建fopen可执行程序</p>
</li>
<li><p>执行fopen,并添加任意一个参数(目录下没有的文件),检测perror函数是否正常工作</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231128195900046.png" alt="image-20231128195900046"></p>
</li>
<li><p>创建一个文件,检测fopen是否可以正常打开该文件</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231128195922366.png" alt="image-20231128195922366"></p>
</li>
</ol>
<blockquote>
<p>我们发现perror这一操作也可以放到.h文件当中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> <span class="comment">//加入一些常用的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ARGS_CHECK(argc, num)                 \</span></span><br><span class="line"><span class="meta">    &#123;                                         \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (argc != num)                      \</span></span><br><span class="line"><span class="meta">        &#123;                                     \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot;args error!\n&quot;</span>); \</span></span><br><span class="line"><span class="meta">            return -1;                        \</span></span><br><span class="line"><span class="meta">        &#125;                                     \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(ret, num, msg) \</span></span><br><span class="line"><span class="meta">    &#123;                              \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (ret == num)            \</span></span><br><span class="line"><span class="meta">        &#123;                          \</span></span><br><span class="line"><span class="meta">            perror(msg);           \</span></span><br><span class="line"><span class="meta">            return -1;             \</span></span><br><span class="line"><span class="meta">        &#125;                          \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br></pre></td></tr></table></figure>

<p>并且应用于fopen.c中</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;usually.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ARGS_CHECK</span>(argc,<span class="number">2</span>);</span><br><span class="line">    FILE* fp = <span class="built_in">fopen</span>(argv[<span class="number">1</span>],<span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(fp,<span class="literal">NULL</span>,<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="追加模式"><a href="#追加模式" class="headerlink" title="追加模式"></a>追加模式</h4><p>fopen的一种mode模式</p>
<ul>
<li>“a”  append 只写追加(默认从文件结尾写入)</li>
<li>“a+”             读写追加</li>
</ul>
<h4 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h4><p>一种不可修改旧文件,只允许新加记录的系统</p>
<p>我们可以通过fopen.c的代码模拟一个日志系统</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;usually.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ARGS_CHECK</span>(argc,<span class="number">2</span>);</span><br><span class="line">    FILE* fp = <span class="built_in">fopen</span>(argv[<span class="number">1</span>],<span class="string">&quot;a&quot;</span>);<span class="comment">//追加模式</span></span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(fp,<span class="literal">NULL</span>,<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//const void* _ptr,size_t _size,size_t _n,FILE* _stream</span></span><br><span class="line">    <span class="comment">//指针指向的内容(例如字符串,数组),单位大小,几个单位,写到哪个文件</span></span><br><span class="line">    <span class="built_in">fwrite</span>(<span class="string">&quot;how are you&quot;</span>,<span class="number">1</span>,<span class="built_in">sizeof</span>(<span class="string">&quot;how are you&quot;</span>),fp);   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过make再次生成可执行文件后进行测试 </p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231128202007384.png" alt="image-20231128202007384"></p>
<p>发现test文件中多了一行how are you</p>
<p>再次执行发现确实是追加模式</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231128202046444.png" alt="image-20231128202046444"></p>
<ul>
<li><strong>如果我们切换成a+模式,即读写追加模式</strong></li>
</ul>
<p>进行读操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;usually.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ARGS_CHECK</span>(argc,<span class="number">2</span>);</span><br><span class="line">    FILE* fp = <span class="built_in">fopen</span>(argv[<span class="number">1</span>],<span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(fp,<span class="literal">NULL</span>,<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">11</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="built_in">sizeof</span>(<span class="string">&quot;how are you&quot;</span>),fp);</span><br><span class="line">    <span class="comment">//追加模式的文件存储了三种指针,base,end,和_ptr</span></span><br><span class="line">    <span class="comment">//_ptr在每次读写之后都会自动后移,使其符合流的特征</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正常打印出了how are you</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231128203124065.png" alt="image-20231128203124065"></p>
<p>如果我们再把原来的写操作加上就会发现</p>
<p><strong>读入时从文件开始读入,写入时跳到文件末尾写入</strong></p>
<p>此处不再演示</p>
<h4 id="fseek-ftell"><a href="#fseek-ftell" class="headerlink" title="fseek,ftell"></a>fseek,ftell</h4><p>fseek相当于一种游标,改变_ptr的位置</p>
<p>ftell就是告诉你_ptr的位置</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;usually.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ARGS_CHECK</span>(argc,<span class="number">2</span>);</span><br><span class="line">    FILE* fp = <span class="built_in">fopen</span>(argv[<span class="number">1</span>],<span class="string">&quot;a+&quot;</span>);<span class="comment">//追加模式</span></span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(fp,<span class="literal">NULL</span>,<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//const void* _ptr,size_t _size,size_t _n,FILE* _stream</span></span><br><span class="line">    <span class="comment">//指针指向的内容(例如字符串,数组),单位大小,几个单位,写到哪个文件</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="built_in">sizeof</span>(<span class="string">&quot;howareyou&quot;</span>),fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,buf);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//记录一下游标目前的位置</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;before fseek,locate = %ld\n&quot;</span>,<span class="built_in">ftell</span>(fp));</span><br><span class="line">    <span class="comment">//改变游标的位置到开头  </span></span><br><span class="line">    <span class="built_in">fseek</span>(fp,<span class="number">0</span>,SEEK_SET);</span><br><span class="line">    <span class="comment">//查看一下游标目前为止</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;after fseek,locate = %ld\n&quot;</span>,<span class="built_in">ftell</span>(fp));</span><br><span class="line">    <span class="built_in">fwrite</span>(<span class="string">&quot;howareyou&quot;</span>,<span class="number">1</span>,<span class="built_in">sizeof</span>(<span class="string">&quot;howareyou&quot;</span>),fp); </span><br><span class="line">    <span class="comment">//查看一下在改变游标后再写入,游标是在文件末尾还是在改变游标+&quot;how are you&quot;的位置  </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;after fwrite,locate = %ld\n&quot;</span>,<span class="built_in">ftell</span>(fp));</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>fseek中的参数SEEK_SET通过man可知是start of file的意思</li>
</ul>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231128205311417.png" alt="image-20231128205311417"></p>
<p>从结果可得出,即使进行了fseek,追加模式的写入依然会在文件末尾进行</p>
<h3 id="改变文件权限"><a href="#改变文件权限" class="headerlink" title="改变文件权限"></a>改变文件权限</h3><p>命令 chmod</p>
<p>查看命令都有哪些手册可以man -f 命令查看</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231202154147328.png" alt="image-20231202154147328"></p>
<p>可以看到chmod不只是shell命令也可以是系统调用函数 </p>
<p>可以通过man查看他的库函数是sys&#x2F;stat.h</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231202154326884.png" alt="image-20231202154326884"></p>
<p>在我们的usually.h头文件再添加此头文件</p>
<h4 id="查看chmod使用"><a href="#查看chmod使用" class="headerlink" title="查看chmod使用"></a>查看chmod使用</h4><ul>
<li>通过说明可以知道他是用来改变文件权限的</li>
<li>通过参数可知const char* pathname为文件路径,mode_t类型为unsigned int,简要来说只需9bit即可分别代表ugo的读写执行权限</li>
<li>返回值 0成功,-1失败,并可以通过perror查看报错信息</li>
</ul>
<p>使用chmod函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;usually.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//命令行参数为777 dir</span></span><br><span class="line">    <span class="built_in">ARGS_CHECK</span>(argc,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入的777是字符串,需要变为mode_t类型</span></span><br><span class="line">    <span class="type">mode_t</span> mode;</span><br><span class="line">    <span class="built_in">sscanf</span>(argv[<span class="number">1</span>],<span class="string">&quot;%o&quot;</span>,&amp;mode);<span class="comment">//8进制输入进mode里</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> it = <span class="built_in">chmod</span>(argv[<span class="number">2</span>],mode);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(it,<span class="number">-1</span>,<span class="string">&quot;chmod&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>make后执行发现dir目录文件改为777</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231202160417457.png" alt="image-20231202160417457"></p>
<p>再次修改依然可行</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231202160528980.png" alt="image-20231202160528980"></p>
<h3 id="getcwd"><a href="#getcwd" class="headerlink" title="getcwd"></a>getcwd</h3><p>通过man查看说明</p>
<p>获取当前工作目录</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231202160659508.png" alt="image-20231202160659508"></p>
<p>参数解析</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231202160806107.png" alt="image-20231202160806107"></p>
<ul>
<li>库函数为unistd.h</li>
<li>返回值为字符串,buf为传入的字符串参数,传参时长度信息会丢失,因此需要一个size</li>
<li>当buf不为空时返回值为buf</li>
<li>当返回NULL时报错,通过perror查看错误信息</li>
</ul>
<h4 id="getcwd使用"><a href="#getcwd使用" class="headerlink" title="getcwd使用"></a>getcwd使用</h4><p>首先将头文件加入到usually.h头文件当中 </p>
<p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;usually.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span>* ret = <span class="built_in">getcwd</span>(buf,<span class="built_in">sizeof</span>(buf));</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(ret,<span class="literal">NULL</span>,<span class="string">&quot;getcwd&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %p,ret = %s\n&quot;</span>,ret,ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buf = %p,buf = %s\n&quot;</span>,buf,buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>执行结果</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231202163248562.png" alt="image-20231202163248562"></p>
<p>如果传入的参数为NULL,实际上getcwd会自动申请堆空间,此时返回值同样会获得当前目录,但申请的堆空间可能没有释放需要自己进行释放掉</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;usually.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span>* ret = <span class="built_in">getcwd</span>(<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,<span class="built_in">getcwd</span>(<span class="literal">NULL</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">free</span>(ret);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231202163521902.png" alt="image-20231202163521902"></p>
<h3 id="chdir"><a href="#chdir" class="headerlink" title="chdir"></a>chdir</h3><p>man手册查看说明</p>
<p>改变当前工作目录</p>
<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231202165208607.png" alt="image-20231202165208607"></p>
<p>参数解析</p>
<ul>
<li>库函数unistd.h</li>
<li>传入参数为要转到哪个路径下</li>
<li>成功返回失败返回-1,通过perror查看报错信息</li>
</ul>
<h4 id="chdir使用"><a href="#chdir使用" class="headerlink" title="chdir使用"></a>chdir使用</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;usually.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ARGS_CHECK</span>(argc,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* ret = <span class="built_in">getcwd</span>(<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(ret,<span class="literal">NULL</span>,<span class="string">&quot;getcwd&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;before chdir,cwd = %s\n&quot;</span>,ret);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret2 = <span class="built_in">chdir</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(ret2,<span class="number">-1</span>,<span class="string">&quot;chdir&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">getcwd</span>(<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(ret,<span class="literal">NULL</span>,<span class="string">&quot;getcwd&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;after chdir,cwd = %s\n&quot;</span>,ret);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/27/linux%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20231202170056800.png" alt="image-20231202170056800"></p>
<p>我们发现结果输出表示目录已经改变,但实际上我们用户所在的目录并没有改变</p>
<p>这是因为当前工作目录为进程的属性,可以把每一个程序当做一个进程</p>
<p>目前有一个写shell命令的进程,另一个是通过.&#x2F;chdir执行出来的一个进程,输出shell命令进程的孩子,孩子目录更改了,不影响当前的目录,只会影响自己和子进程</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>计算机</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>log4cpp的安装（vs_visual studio版）</title>
    <url>/2023/11/16/log4cpp%E7%9A%84%E5%AE%89%E8%A3%85%EF%BC%88vs_visual%20studio%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h1 id="log4cpp安装"><a href="#log4cpp安装" class="headerlink" title="log4cpp安装"></a>log4cpp安装</h1><h2 id="下载源"><a href="#下载源" class="headerlink" title="下载源"></a>下载源</h2><p><a href="https://sourceforge.net/projects/log4cpp/files/log4cpp-1.1.x%20%28new%29/log4cpp-1.1/">log4cpp</a></p>
<h2 id="visual-studio安装方法"><a href="#visual-studio安装方法" class="headerlink" title="visual studio安装方法"></a>visual studio安装方法</h2><ol>
<li>将下载好的压缩包解压缩后得到下列目录（解压缩的文件夹最好放C盘，不然在编译阶段往往会出现链接不上的问题）<br><img src="https://img-blog.csdnimg.cn/ded3524bdddd46fe96e8882fba28487d.png" alt="在这里插入图片描述"><br>找到mscv10文件夹内的mscv10.sln项目文件，右键log4cppLIB源文件，生成（编译器一定要选WIN32）<br><img src="https://img-blog.csdnimg.cn/789dfe0642e048a3ad050d5d16828d1a.png" alt="在这里插入图片描述"></li>
<li>回到mscv10文件夹中，此时有了release或debug版本，将release文件夹中的log4cppLIB.lib复制，将debug文件夹中的log4cppD.lib复制，并把log4cpp目录下的inclue文件夹复制（建议两个版本都安装一遍）</li>
<li>在一个方便的路径下粘贴三个文件，两个lib文件放在lib文件夹中，include文件夹放在当前目录下<br><img src="https://img-blog.csdnimg.cn/612351f06a8b4324a7b410b2957f8ee3.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4e09fb6dfd374611b4196bd046a276ef.png" alt="在这里插入图片描述"></li>
<li>此时路径已经设置好了，在vs新建一个项目，专门用于写log4cpp相关的代码，配置环境（编译器一定要选WIN32，和前面生成的文件匹配）</li>
<li>在项目属性下找到VC++目录选项，修改包含目录和库目录（注意要先点继承父级目录后再添加路径），包含目录添加include路径，库目录添加lib路径<br>.<img src="https://img-blog.csdnimg.cn/41313c5082ed476fbdf5d9bd80323a3d.png" alt="在这里插入图片描述"></li>
<li>在链接器选项下的输入选项中，修改附加依赖项（也要注意保留父级路径），如果当前编辑器是Release就添加log4cppLIB.lib,如果是Debug就添加log4cppD.lib</li>
<li>此时大概已经配置好了环境<br>测试代码<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FileAppenderExam：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;log4cpp/Category.hh&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;log4cpp/Appender.hh&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;log4cpp/FileAppender.hh&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;log4cpp/Priority.hh&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;log4cpp/PatternLayout.hh&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;log4cpp/RollingFileAppender.hh&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    log4cpp::PatternLayout* pLayout1 = <span class="keyword">new</span> log4cpp::<span class="built_in">PatternLayout</span>();<span class="comment">//创建一个Layout;</span></span><br><span class="line">    pLayout1-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d: %p %c %x: %m%n&quot;</span>);<span class="comment">//指定布局格式;</span></span><br><span class="line"></span><br><span class="line">    log4cpp::PatternLayout* pLayout2 = <span class="keyword">new</span> log4cpp::<span class="built_in">PatternLayout</span>();</span><br><span class="line">    pLayout2-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d: %p %c %x: %m%n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    log4cpp::Appender* fileAppender = <span class="keyword">new</span> log4cpp::<span class="built_in">FileAppender</span>(<span class="string">&quot;fileAppender&quot;</span>, <span class="string">&quot;wxb.log&quot;</span>);<span class="comment">//创建一个Appender;</span></span><br><span class="line">    fileAppender-&gt;<span class="built_in">setLayout</span>(pLayout1);<span class="comment">//将指定的Layout添加到Appender;</span></span><br><span class="line"></span><br><span class="line">    log4cpp::RollingFileAppender* rollfileAppender = <span class="keyword">new</span> log4cpp::<span class="built_in">RollingFileAppender</span>(</span><br><span class="line">        <span class="string">&quot;rollfileAppender&quot;</span>, <span class="string">&quot;rollwxb.log&quot;</span>, <span class="number">5</span> * <span class="number">1024</span>, <span class="number">1</span>);</span><br><span class="line">    rollfileAppender-&gt;<span class="built_in">setLayout</span>(pLayout2);</span><br><span class="line"></span><br><span class="line">    log4cpp::Category&amp; root = log4cpp::Category::<span class="built_in">getRoot</span>().<span class="built_in">getInstance</span>(<span class="string">&quot;RootName&quot;</span>);<span class="comment">//从系统中得到Category的根;</span></span><br><span class="line">    root.<span class="built_in">addAppender</span>(fileAppender);<span class="comment">//将Appender添加到Category;</span></span><br><span class="line">    root.<span class="built_in">addAppender</span>(rollfileAppender);</span><br><span class="line">    root.<span class="built_in">setPriority</span>(log4cpp::Priority::DEBUG);<span class="comment">//设置Category的优先级;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始记录日志;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string strError;</span><br><span class="line">        ostringstream oss;</span><br><span class="line">        oss &lt;&lt; i &lt;&lt; <span class="string">&quot;:Root Error Message!&quot;</span>;</span><br><span class="line">        strError = oss.<span class="built_in">str</span>();</span><br><span class="line">        root.<span class="built_in">error</span>(strError);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log4cpp::Category::<span class="built_in">shutdown</span>();<span class="comment">//关闭Category;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果没有报错就说明配置成功，如果还有报错建议评论问一下我</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>vscode远程连接linux环境配置</title>
    <url>/2023/11/23/vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>​	1.安装vscode</p>
<p>下载64位操作系统到自己windows主机中</p>
<p><a href="https://code.visualstudio.com/">Visual Studio Code - Code Editing. Redefined</a></p>
<p>下载后在扩展中搜索Chinese添加中文插件</p>
<p><img src="/2023/11/23/vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20231123165623839.png" alt="image-20231123165623839"></p>
<ol start="2">
<li><p>安装remote - SSH插件</p>
<p><img src="/2023/11/23/vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20231123165714911.png" alt="image-20231123165714911"></p>
</li>
<li><p>在编辑界面按F1进入命令搜索框或者使用快捷键crtl+shift+p或者在查看中点击打开命令面板 搜索add ssh,选择添加新的 ssh主机</p>
<p><img src="/2023/11/23/vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20231123170106790.png" alt="image-20231123170106790"></p>
</li>
<li><p>输入你的用户名及ip地址</p>
<p><img src="/2023/11/23/vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20231123170301942.png" alt="image-20231123170301942"></p>
</li>
<li><p>一般情况下选择第一个选项即可</p>
<p><img src="/2023/11/23/vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20231123170347038.png" alt="image-20231123170347038"></p>
</li>
<li><p>再次打开命令面板输入connect to host,点击并选择你需要连接的主机</p>
<p><img src="/2023/11/23/vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20231123170433608.png" alt="image-20231123170433608"></p>
</li>
</ol>
<p><img src="/2023/11/23/vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20231123170516905.png" alt="image-20231123170516905"></p>
<ol start="7">
<li><p>等待一段时间初始化后可能需要再终端输入密码,再次等待一段时间后连接成功</p>
<p>使用ls命令检查一下是否可以访问</p>
<p><img src="/2023/11/23/vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20231123171342552.png" alt="image-20231123171342552"></p>
</li>
</ol>
<p>如果觉得输入密码麻烦可以在git bash控制台中使用ssh-copy-id命令复制公钥到远程主机中</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vscode</tag>
        <tag>c++</tag>
        <tag>C语言</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>log4cpp的使用</title>
    <url>/2023/11/16/log4cpp%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="log4cpp的使用"><a href="#log4cpp的使用" class="headerlink" title="log4cpp的使用"></a>log4cpp的使用</h1><h2 id="逻辑构造"><a href="#逻辑构造" class="headerlink" title="逻辑构造"></a>逻辑构造</h2><blockquote>
<p>目的地Appender：用于表示日志系统最后输出到哪<br>布局Layout：表示你输出的格式，类似与printf<br>优先级Priority：常见的优先级有emerg，alert，crit，error，warn，notice，info，debug，优先级从高到低排列，优先级主要针对不同用户设定，如果一个用户设定的优先级是warn，那么notice，info，debug的信息就会忽略掉不输出<br>日志Category：是整个日志系统的主干，目的地的设定添加和模板设置，日志记录都由Category完成</p>
</blockquote>
<p>一个目的地只能有一个布局，一个布局对应一个目的地</p>
<h2 id="基本模板"><a href="#基本模板" class="headerlink" title="基本模板"></a>基本模板</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Appender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/BasicLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//设置目的地对象</span></span><br><span class="line">	<span class="comment">//参数1 目的地的名字 console代表控制台，</span></span><br><span class="line">	<span class="comment">//参数2 流对象</span></span><br><span class="line">	OstreamAppender* posAp = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;console&quot;</span>, &amp;cout);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置目的地布局 BasicLayout函数是创建布局对象</span></span><br><span class="line">	posAp-&gt;<span class="built_in">setLayout</span>(<span class="keyword">new</span> <span class="built_in">BasicLayout</span>());</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建日志对象，getRoot函数返回的是创建的日志对象，用引用符号接取</span></span><br><span class="line">	Category&amp; root = Category::<span class="built_in">getRoot</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//设置日志的目的地</span></span><br><span class="line">	root.<span class="built_in">setAppender</span>(posAp);</span><br><span class="line">	<span class="comment">//设置日志的优先级</span></span><br><span class="line">	root.<span class="built_in">setPriority</span>(Priority::DEBUG);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置模板</span></span><br><span class="line">	Category&amp; model1 = root.<span class="built_in">getInstance</span>(<span class="string">&quot;register&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印日志记录</span></span><br><span class="line">	root.<span class="built_in">emerg</span>(<span class="string">&quot;this is an emrge&quot;</span>);</span><br><span class="line">	root.<span class="built_in">alert</span>(<span class="string">&quot;this is an alert&quot;</span>);</span><br><span class="line">	root.<span class="built_in">crit</span>(<span class="string">&quot;this is a critical&quot;</span>);</span><br><span class="line">	root.<span class="built_in">error</span>(<span class="string">&quot;this is an error&quot;</span>);</span><br><span class="line">	root.<span class="built_in">warn</span>(<span class="string">&quot;this is a warn&quot;</span>);</span><br><span class="line">	root.<span class="built_in">notice</span>(<span class="string">&quot;this is a notice&quot;</span>);</span><br><span class="line">	root.<span class="built_in">info</span>(<span class="string">&quot;this is an info&quot;</span>);</span><br><span class="line">	root.<span class="built_in">debug</span>(<span class="string">&quot;this is a debug&quot;</span>);</span><br><span class="line"></span><br><span class="line">	model1.<span class="built_in">debug</span>(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1684758947 </span>FATAL  : this is an emrge</span><br><span class="line"><span class="symbol">1684758947 </span>ALERT  : this is an alert</span><br><span class="line"><span class="symbol">1684758947 </span>CRIT  : this is a critical</span><br><span class="line"><span class="symbol">1684758947 </span><span class="keyword">ERROR</span>  : this is an <span class="keyword">error</span></span><br><span class="line"><span class="symbol">1684758947 </span>WARN  : this is a warn</span><br><span class="line"><span class="symbol">1684758947 </span>NOTICE  : this is a notice</span><br><span class="line"><span class="symbol">1684758947 </span>INFO  : this is an info</span><br><span class="line"><span class="symbol">1684758947 </span>DEBUG  : this is a debug</span><br><span class="line"><span class="symbol">1684758947 </span>DEBUG register : <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>打印第一列代表时间，单位为秒，第二列为优先级，第三列为模块名，root没有设置所以是空白，最后面为日志内容</p>
<h2 id="布局的格式化"><a href="#布局的格式化" class="headerlink" title="布局的格式化"></a>布局的格式化</h2><p>类似于priintf函数，常以%d代表输出十进制，Layout对象也有着类似的表达方式</p>
<p>PatternLayout</p>
<blockquote>
<p>setConversionPattern成员函数，PatternLayout的格式化函数<br>%c 获取模块名<br>%d 打印日期时间，将第一列时间单位为秒转化为可读性时间<br>%m 打印消息内容<br>%p 打印优先级<br>%n 换行符</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	OstreamAppender* posAp = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;console&quot;</span>, &amp;cout);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置格式化布局</span></span><br><span class="line">	PatternLayout* ptnLayout = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">	ptnLayout-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d [%c] [%p] %m %n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	posAp-&gt;<span class="built_in">setLayout</span>(ptnLayout);</span><br><span class="line"></span><br><span class="line">	Category&amp; root = Category::<span class="built_in">getRoot</span>();</span><br><span class="line"></span><br><span class="line">	root.<span class="built_in">setAppender</span>(posAp);</span><br><span class="line">	root.<span class="built_in">setPriority</span>(Priority::DEBUG);</span><br><span class="line"></span><br><span class="line">	Category&amp; model1 = root.<span class="built_in">getInstance</span>(<span class="string">&quot;register&quot;</span>);</span><br><span class="line"></span><br><span class="line">	model1.<span class="built_in">emerg</span>(<span class="string">&quot;this is an emerg&quot;</span>);</span><br><span class="line">	root.<span class="built_in">emerg</span>(<span class="string">&quot;this is an emerg&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2023</span>-<span class="number">05</span>-<span class="number">23</span> <span class="number">18</span>:<span class="number">57</span>:<span class="number">33</span>,<span class="number">748</span><span class="meta"> [register] [FATAL] this is an emerg</span></span><br><span class="line"><span class="meta">2023-05-23 18:57:33,749 [] [FATAL] this is an emerg</span></span><br></pre></td></tr></table></figure>

<h2 id="目的地对象操作文件"><a href="#目的地对象操作文件" class="headerlink" title="目的地对象操作文件"></a>目的地对象操作文件</h2><p>FileAppender</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">参数列表</span><br><span class="line">参数1 目的地名字</span><br><span class="line">参数2 文件名</span><br><span class="line">参数3 是否以追加模式写入（默认追加）</span><br><span class="line">参数4 文件权限（不写以默认权限为主）</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/FileAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/BasicLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//两个目的地对象创建，最后一个输出在控制台一个写入到文件中去</span></span><br><span class="line">	OstreamAppender* posAp = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;console&quot;</span>, &amp;cout);</span><br><span class="line">	FileAppender* FileAp = <span class="keyword">new</span> <span class="built_in">FileAppender</span>(<span class="string">&quot;FileAp&quot;</span>, <span class="string">&quot;test.log&quot;</span>);</span><br><span class="line"></span><br><span class="line">	PatternLayout* ptnLayout = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">	ptnLayout-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d [%c] [%p] %m %n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//让目的地为控制台的对象打印普通日志信息</span></span><br><span class="line">	<span class="comment">//让目的地为文件的对象打印格式化日志信息</span></span><br><span class="line">	posAp-&gt;<span class="built_in">setLayout</span>(<span class="keyword">new</span> <span class="built_in">BasicLayout</span>());</span><br><span class="line">	FileAp-&gt;<span class="built_in">setLayout</span>(ptnLayout);</span><br><span class="line"></span><br><span class="line">	Category&amp; root = Category::<span class="built_in">getRoot</span>();</span><br><span class="line">	root.<span class="built_in">setAppender</span>(posAp);</span><br><span class="line">	<span class="comment">//追加目的地</span></span><br><span class="line">	root.<span class="built_in">addAppender</span>(FileAp);</span><br><span class="line">	root.<span class="built_in">setPriority</span>(Priority::DEBUG);</span><br><span class="line"></span><br><span class="line">	Category&amp; model = root.<span class="built_in">getInstance</span>(<span class="string">&quot;register&quot;</span>);</span><br><span class="line"></span><br><span class="line">	root.<span class="built_in">emerg</span>(<span class="string">&quot;root emerg&quot;</span>);</span><br><span class="line">	root.<span class="built_in">alert</span>(<span class="string">&quot;root alert&quot;</span>);</span><br><span class="line">	root.<span class="built_in">crit</span>(<span class="string">&quot;root crit&quot;</span>);</span><br><span class="line">	root.<span class="built_in">error</span>(<span class="string">&quot;root error&quot;</span>);</span><br><span class="line">	root.<span class="built_in">warn</span>(<span class="string">&quot;root warn&quot;</span>);</span><br><span class="line">	root.<span class="built_in">notice</span>(<span class="string">&quot;root notice&quot;</span>);</span><br><span class="line">	root.<span class="built_in">info</span>(<span class="string">&quot;root info&quot;</span>);</span><br><span class="line">	root.<span class="built_in">debug</span>(<span class="string">&quot;root debug&quot;</span>);</span><br><span class="line"></span><br><span class="line">	model.<span class="built_in">emerg</span>(<span class="string">&quot;model emerg&quot;</span>);</span><br><span class="line">	model.<span class="built_in">debug</span>(<span class="string">&quot;model debug&quot;</span>);</span><br><span class="line"></span><br><span class="line">	Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1684840653 </span>FATAL  : root emerg</span><br><span class="line"><span class="symbol">1684840653 </span>ALERT  : root alert</span><br><span class="line"><span class="symbol">1684840653 </span>CRIT  : root crit</span><br><span class="line"><span class="symbol">1684840653 </span><span class="keyword">ERROR</span>  : root <span class="keyword">error</span></span><br><span class="line"><span class="symbol">1684840653 </span>WARN  : root warn</span><br><span class="line"><span class="symbol">1684840653 </span>NOTICE  : root notice</span><br><span class="line"><span class="symbol">1684840653 </span>INFO  : root info</span><br><span class="line"><span class="symbol">1684840653 </span>DEBUG  : root debug</span><br><span class="line"><span class="symbol">1684840653 </span>FATAL register : model emerg</span><br><span class="line"><span class="symbol">1684840653 </span>DEBUG register : model debug</span><br></pre></td></tr></table></figure>
<p>同时在该项目目录下可以找到之前生成的文件test.log<br><img src="https://img-blog.csdnimg.cn/10c863217b4840dfbf275aed8db1c7ec.png" alt="在这里插入图片描述"><br>打开后可看到日志内容（我这里生成了两次所以上下时间不同，写入了两次，也可以看出FileAppender默认是以追加模式进行写入的）<img src="https://img-blog.csdnimg.cn/d619d9fd6eb84d0c9f7228fdcf554154.png" alt="在这里插入图片描述"></p>
<h2 id="回卷文件"><a href="#回卷文件" class="headerlink" title="回卷文件"></a>回卷文件</h2><p>RollingFileAppender</p>
<blockquote>
<p>应用场景：用于一些对于存储空间要求较高，不希望日志文件占用过多空间<br>回卷文件说明：假如一次产生连续十个回卷文件，编号为1-10，要求日志文件只能占10M空间，那么每个回卷文件最大大小为1M，当日志信息填入回卷文件1且填满时，会使用回卷文件2继续写入，当10个回卷文件都填满时，会删除最早的回卷文件，重新写入数据，在当前场景下，回卷文件1是最早的一个，于是将他重定向操作，这种结构类似于队列一样，也有着先进先出的特点（再严谨一点是循环队列）</p>
</blockquote>
<blockquote>
<p>参数列表<br>参数1 	目的地名字<br>参数2 	文件名<br>参数3		每个文件大小，单位为字节，5000则为5KB<br>参数4 	需要多少个回卷文件</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/FileAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/RollingFileAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/BasicLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//设置三个对象，分别对应控制台，文件，回卷文件</span></span><br><span class="line">	OstreamAppender* posAp = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;console&quot;</span>,&amp;cout);</span><br><span class="line">	FileAppender* FileAp = <span class="keyword">new</span> <span class="built_in">FileAppender</span>(<span class="string">&quot;FileAp&quot;</span>,<span class="string">&quot;test.log&quot;</span>);</span><br><span class="line">	RollingFileAppender* RollingFileAp = <span class="keyword">new</span> <span class="built_in">RollingFileAppender</span>(<span class="string">&quot;RollingFileAp&quot;</span>,<span class="string">&quot;a.log&quot;</span>,<span class="number">5000</span>,<span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	PatternLayout* ptnLayout1 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">	PatternLayout* ptnLayout2 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">	ptnLayout2-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d [%c] [%p] %m %n&quot;</span>);</span><br><span class="line">	ptnLayout2-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d [%c] [%p] %m %n&quot;</span>);</span><br><span class="line">	<span class="comment">//一个目的地只能对应一个布局，一个布局只能对应一个目的地</span></span><br><span class="line">	</span><br><span class="line">	posAp-&gt;<span class="built_in">setLayout</span>(<span class="keyword">new</span> <span class="built_in">BasicLayout</span>());</span><br><span class="line">	FileAp-&gt;<span class="built_in">setLayout</span>(ptnLayout1);</span><br><span class="line">	RollingFileAp-&gt;<span class="built_in">setLayout</span>(ptnLayout2);</span><br><span class="line">	</span><br><span class="line">	Category&amp; root = Category::<span class="built_in">getRoot</span>();</span><br><span class="line">	root.<span class="built_in">setAppender</span>(posAp);</span><br><span class="line">	root.<span class="built_in">addAppender</span>(FileAp);</span><br><span class="line">	root.<span class="built_in">addAppender</span>(RollingFileAp);</span><br><span class="line">	root.<span class="built_in">setPriority</span>(Priority::DEBUG);</span><br><span class="line">	</span><br><span class="line">	Category&amp; model = root.<span class="built_in">getInstance</span>(<span class="string">&quot;register&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		root.<span class="built_in">emerg</span>(<span class="string">&quot;this is an emrge&quot;</span>);</span><br><span class="line">		root.<span class="built_in">alert</span>(<span class="string">&quot;this is an alert&quot;</span>);</span><br><span class="line">		root.<span class="built_in">crit</span>(<span class="string">&quot;this is a critical&quot;</span>);</span><br><span class="line">		root.<span class="built_in">error</span>(<span class="string">&quot;this is an error&quot;</span>);</span><br><span class="line">		root.<span class="built_in">warn</span>(<span class="string">&quot;this is a warn&quot;</span>);</span><br><span class="line">		root.<span class="built_in">notice</span>(<span class="string">&quot;this is a notice&quot;</span>);</span><br><span class="line">		root.<span class="built_in">info</span>(<span class="string">&quot;this is an info&quot;</span>);</span><br><span class="line">		root.<span class="built_in">debug</span>(<span class="string">&quot;this is a debug&quot;</span>);</span><br><span class="line">	</span><br><span class="line">		model.<span class="built_in">emerg</span>(<span class="string">&quot;this is an emrge&quot;</span>);</span><br><span class="line">		model.<span class="built_in">alert</span>(<span class="string">&quot;this is an alert&quot;</span>);</span><br><span class="line">		model.<span class="built_in">crit</span>(<span class="string">&quot;this is a critical&quot;</span>);</span><br><span class="line">		model.<span class="built_in">error</span>(<span class="string">&quot;this is an error&quot;</span>);</span><br><span class="line">		model.<span class="built_in">warn</span>(<span class="string">&quot;this is a warn&quot;</span>);</span><br><span class="line">		model.<span class="built_in">notice</span>(<span class="string">&quot;this is a notice&quot;</span>);</span><br><span class="line">		model.<span class="built_in">info</span>(<span class="string">&quot;this is an info&quot;</span>);</span><br><span class="line">		model.<span class="built_in">debug</span>(<span class="string">&quot;this is a debug&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Category::shutdown;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="number">1684842384</span> FATAL  : <span class="keyword">this</span> <span class="keyword">is</span> an emrge</span><br><span class="line"><span class="number">1684842384</span> ALERT  : <span class="keyword">this</span> <span class="keyword">is</span> an alert</span><br><span class="line"><span class="number">1684842384</span> CRIT  : <span class="keyword">this</span> <span class="keyword">is</span> a critical</span><br><span class="line"><span class="number">1684842384</span> ERROR  : <span class="keyword">this</span> <span class="keyword">is</span> an error</span><br><span class="line"><span class="number">1684842384</span> WARN  : <span class="keyword">this</span> <span class="keyword">is</span> a warn</span><br><span class="line"><span class="number">1684842384</span> NOTICE  : <span class="keyword">this</span> <span class="keyword">is</span> a notice</span><br><span class="line"><span class="number">1684842384</span> INFO  : <span class="keyword">this</span> <span class="keyword">is</span> an info</span><br><span class="line"><span class="number">1684842384</span> DEBUG  : <span class="keyword">this</span> <span class="keyword">is</span> a debug</span><br><span class="line"><span class="number">1684842384</span> FATAL register : <span class="keyword">this</span> <span class="keyword">is</span> an emrge</span><br><span class="line"><span class="number">1684842384</span> ALERT register : <span class="keyword">this</span> <span class="keyword">is</span> an alert</span><br><span class="line"><span class="number">1684842384</span> CRIT register : <span class="keyword">this</span> <span class="keyword">is</span> a critical</span><br><span class="line"><span class="number">1684842384</span> ERROR register : <span class="keyword">this</span> <span class="keyword">is</span> an error</span><br><span class="line"><span class="number">1684842384</span> WARN register : <span class="keyword">this</span> <span class="keyword">is</span> a warn</span><br><span class="line"><span class="number">1684842384</span> NOTICE register : <span class="keyword">this</span> <span class="keyword">is</span> a notice</span><br><span class="line"><span class="number">1684842384</span> INFO register : <span class="keyword">this</span> <span class="keyword">is</span> an info</span><br><span class="line"><span class="number">1684842384</span> DEBUG register : <span class="keyword">this</span> <span class="keyword">is</span> a debug</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">1684842384</span> FATAL  : <span class="keyword">this</span> <span class="keyword">is</span> an emrge</span><br><span class="line"><span class="number">1684842384</span> ALERT  : <span class="keyword">this</span> <span class="keyword">is</span> an alert</span><br><span class="line"><span class="number">1684842384</span> CRIT  : <span class="keyword">this</span> <span class="keyword">is</span> a critical</span><br><span class="line"><span class="number">1684842384</span> ERROR  : <span class="keyword">this</span> <span class="keyword">is</span> an error</span><br><span class="line"><span class="number">1684842384</span> WARN  : <span class="keyword">this</span> <span class="keyword">is</span> a warn</span><br><span class="line"><span class="number">1684842384</span> NOTICE  : <span class="keyword">this</span> <span class="keyword">is</span> a notice</span><br><span class="line"><span class="number">1684842384</span> INFO  : <span class="keyword">this</span> <span class="keyword">is</span> an info</span><br><span class="line"><span class="number">1684842384</span> DEBUG  : <span class="keyword">this</span> <span class="keyword">is</span> a debug</span><br><span class="line"><span class="number">1684842384</span> FATAL register : <span class="keyword">this</span> <span class="keyword">is</span> an emrge</span><br><span class="line"><span class="number">1684842384</span> ALERT register : <span class="keyword">this</span> <span class="keyword">is</span> an alert</span><br><span class="line"><span class="number">1684842384</span> CRIT register : <span class="keyword">this</span> <span class="keyword">is</span> a critical</span><br><span class="line"><span class="number">1684842384</span> ERROR register : <span class="keyword">this</span> <span class="keyword">is</span> an error</span><br><span class="line"><span class="number">1684842384</span> WARN register : <span class="keyword">this</span> <span class="keyword">is</span> a warn</span><br><span class="line"><span class="number">1684842384</span> NOTICE register : <span class="keyword">this</span> <span class="keyword">is</span> a notice</span><br><span class="line"><span class="number">1684842384</span> INFO register : <span class="keyword">this</span> <span class="keyword">is</span> an info</span><br><span class="line"><span class="number">1684842384</span> DEBUG register : <span class="keyword">this</span> <span class="keyword">is</span> a debug</span><br><span class="line"><span class="number">1684842384</span> FATAL  : <span class="keyword">this</span> <span class="keyword">is</span> an emrge</span><br><span class="line"><span class="number">1684842384</span> ALERT  : <span class="keyword">this</span> <span class="keyword">is</span> an alert</span><br><span class="line"><span class="number">1684842384</span> CRIT  : <span class="keyword">this</span> <span class="keyword">is</span> a critical</span><br><span class="line"><span class="number">1684842384</span> ERROR  : <span class="keyword">this</span> <span class="keyword">is</span> an error</span><br><span class="line"><span class="number">1684842384</span> WARN  : <span class="keyword">this</span> <span class="keyword">is</span> a warn</span><br><span class="line"><span class="number">1684842384</span> NOTICE  : <span class="keyword">this</span> <span class="keyword">is</span> a notice</span><br><span class="line"><span class="number">1684842384</span> INFO  : <span class="keyword">this</span> <span class="keyword">is</span> an info</span><br><span class="line"><span class="number">1684842384</span> DEBUG  : <span class="keyword">this</span> <span class="keyword">is</span> a debug</span><br><span class="line"><span class="number">1684842384</span> FATAL register : <span class="keyword">this</span> <span class="keyword">is</span> an emrge</span><br><span class="line"><span class="number">1684842384</span> ALERT register : <span class="keyword">this</span> <span class="keyword">is</span> an alert</span><br><span class="line"><span class="number">1684842384</span> CRIT register : <span class="keyword">this</span> <span class="keyword">is</span> a critical</span><br><span class="line"><span class="number">1684842384</span> ERROR register : <span class="keyword">this</span> <span class="keyword">is</span> an error</span><br><span class="line"><span class="number">1684842384</span> WARN register : <span class="keyword">this</span> <span class="keyword">is</span> a warn</span><br><span class="line"><span class="number">1684842384</span> NOTICE register : <span class="keyword">this</span> <span class="keyword">is</span> a notice</span><br><span class="line"><span class="number">1684842384</span> INFO register : <span class="keyword">this</span> <span class="keyword">is</span> an info</span><br><span class="line"><span class="number">1684842384</span> DEBUG register : <span class="keyword">this</span> <span class="keyword">is</span> a debug</span><br></pre></td></tr></table></figure>
<p>目录下生成结果<br><img src="https://img-blog.csdnimg.cn/868d06c0f25e4c6882e525573e583d98.png" alt="![在这里插入图片描述](https://img-blog.csdnimg.cn/a1f4133bd1c3459587ef0281c5c029ed.png"></p>
<p><img src="https://img-blog.csdnimg.cn/9405fefb0a1d4ac4a6c6e1a1a194dedf.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/b151e19fe7494f2db10e9178ac0e6481.png" alt="在这里插入图片描述"><br>可以看到通过FileAppender生成了test.log，文件大小为28KB<br>通过RollingFileAppender生成了10个a.log回卷文件，每个文件大小都为5KB，总和为50KB，此时还并不能体现出回卷文件节省空间的能力<br>我们把for循环改为1000次<br><img src="https://img-blog.csdnimg.cn/6c030d08ab5e41769b24fbf2c822fbba.png" alt="在这里插入图片描述"></p>
<p>此时可以看到test.log大小为899KB，a.log回卷文件大小总和依然为50KB</p>
]]></content>
  </entry>
  <entry>
    <title>杨辉三角形</title>
    <url>/2023/11/15/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BB%8F%E5%85%B8%E6%95%B0%E5%AD%A6%E9%A2%98%E3%80%91%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
    <content><![CDATA[<h1 id="杨辉三角一图览"><a href="#杨辉三角一图览" class="headerlink" title="杨辉三角一图览"></a>杨辉三角一图览</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line">			  			<span class="attribute">1</span></span><br><span class="line">					<span class="attribute">1</span>		<span class="number">1</span></span><br><span class="line">				<span class="attribute">1</span>		<span class="number">2</span>      <span class="number">1</span></span><br><span class="line">			<span class="attribute">1</span>       <span class="number">3</span>	    <span class="number">3</span>      <span class="number">1</span></span><br><span class="line">		<span class="attribute">1</span>		<span class="number">4</span>		<span class="number">6</span>		<span class="number">4</span> 		<span class="number">1</span></span><br><span class="line">	<span class="attribute">1</span>		<span class="number">5</span>		<span class="number">10</span>		<span class="number">10</span>		<span class="number">5</span>		<span class="number">1</span></span><br><span class="line"><span class="attribute">1</span>		<span class="number">6</span>		<span class="number">15</span>		<span class="number">20</span>		<span class="number">15</span>		<span class="number">6</span>		<span class="number">1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由图可知杨辉三角具有对称性，很多时候可以折半计算，节省时间<br>同时我们可以以排列组合的方式将杨辉三角展现出来</p>
</blockquote>
<p>借个图先<br><img src="https://img-blog.csdnimg.cn/d2a520baba134d9a9f429c858315b96d.png" alt="在这里插入图片描述"></p>
<blockquote>
<h1 id="求杨辉三角任意一行"><a href="#求杨辉三角任意一行" class="headerlink" title="求杨辉三角任意一行"></a>求杨辉三角任意一行</h1><p>我们在编程界中经常把排列组合中的公式用A（a,b），C(a,b)表示<br>比如C（5,2） &#x3D; 10<br>那么对n-1行的公式可以写成<br>C（n，r） &#x3D; （n-r + 1）&#x2F; r * C(n,r-1);<br> 杨辉三角的每一行初始值为C(n,0) &#x3D; 1</p>
</blockquote>
<p> 又根据杨辉三角的对称性，我们可以折半计算，在计算中心轴左边的值的同时也能将右边的值算出来</p>
<p>该公式的应用<br><a href="https://www.luogu.com.cn/problem/P1118">lP1118 [USACO06FEB]Backward Digit Sums G&#x2F;S</a></p>
<p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,sum;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> delta[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getdelta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	delta[<span class="number">0</span>] = delta[n<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(n &gt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i*<span class="number">2</span> &lt;= n;++i)</span><br><span class="line">			delta[i] = delta[n-i<span class="number">-1</span>] = (n-i) * delta[i<span class="number">-1</span>]/i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> num,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(v &gt; sum) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(u == n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(v == sum)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u] = num;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	st[num] = <span class="literal">true</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!st[i] &amp;&amp; <span class="built_in">dfs</span>(u + <span class="number">1</span>,i,v + delta[u] * i))</span><br><span class="line">		&#123;</span><br><span class="line">			a[u] = num;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	st[num] = <span class="literal">false</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;sum;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">getdelta</span>();<span class="comment">//得到第n层杨辉三角 </span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)) <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h1 id="求杨辉三角某一值起始位置"><a href="#求杨辉三角某一值起始位置" class="headerlink" title="求杨辉三角某一值起始位置"></a>求杨辉三角某一值起始位置</h1><p>经过多数人的研究，已经找到了一种非常精妙的方法来快速确定任意值的起始位置，所耗时间只需4ms</p>
</blockquote>
<p>首先再看一次图</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line">			  			<span class="attribute">1</span></span><br><span class="line">					<span class="attribute">1</span>		<span class="number">1</span></span><br><span class="line">				<span class="attribute">1</span>		<span class="number">2</span>      <span class="number">1</span></span><br><span class="line">			<span class="attribute">1</span>       <span class="number">3</span>	    <span class="number">3</span>      <span class="number">1</span></span><br><span class="line">		<span class="attribute">1</span>		<span class="number">4</span>		<span class="number">6</span>		<span class="number">4</span> 		<span class="number">1</span></span><br><span class="line">	<span class="attribute">1</span>		<span class="number">5</span>		<span class="number">10</span>		<span class="number">10</span>		<span class="number">5</span>		<span class="number">1</span></span><br><span class="line"><span class="attribute">1</span>		<span class="number">6</span>		<span class="number">15</span>		<span class="number">20</span>		<span class="number">15</span>		<span class="number">6</span>		<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>我们可以将杨辉三角的右半边删掉，因为杨辉三角的对称性，显而易见我们能推导出任意值的起始位置一定在左半边</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line">			  			<span class="attribute">1</span></span><br><span class="line">					<span class="attribute">1</span>		</span><br><span class="line">				<span class="attribute">1</span>		<span class="number">2</span>      </span><br><span class="line">			<span class="attribute">1</span>       <span class="number">3</span>	    </span><br><span class="line">		<span class="attribute">1</span>		<span class="number">4</span>		<span class="number">6</span>		</span><br><span class="line">	<span class="attribute">1</span>		<span class="number">5</span>		<span class="number">10</span>	</span><br><span class="line"><span class="attribute">1</span>		<span class="number">6</span>		<span class="number">15</span>		<span class="number">20</span>	</span><br></pre></td></tr></table></figure>
<p>得到该图后我们发现，我们可以通过斜行位置与行位置来确定某一值<br>假设起始行数与斜行都为0<br>比如我们求C（6,3），组合数C（6,3） &#x3D; 20<br>该过程代码</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">//C(a,b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a, j = <span class="number">1</span>;j &lt;= b;--i, ++j)</span><br><span class="line">	&#123;</span><br><span class="line">			res = res * i / j;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>同时我们可以确定，这一斜行找到的值的位置，总会比他上面一个斜行找到同一值的位置要小<br>因此我们可以倒着枚举每一斜行来寻找某一值，找到的位置一定是起始位置</p>
<p>而且每一斜行k的起始行数n，总有一种规律 2*k &#x3D; n</p>
<p>现在我们总结一下前面找到的规律<br>1.通过斜行与行的位置可以推断某一值<br>2.倒着枚举每一斜行可以找到该值的第一次出现位置<br>3.斜行k * 2 &#x3D; 斜行起始行数n<br>4.由123点我们可以通过二分查找行来寻找该值，起始行为2*k，终点行为n（选择n是因为n足够大）<br>补充一点，如果已知某一行数n，可以推断该行之前总共有C（n，2）个数，在把斜行看做列，即可得到某一值的位置公式</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pos</span> = (n + <span class="number">1</span>）*n / <span class="number">2</span> + k +<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>例题<br><a href="https://www.luogu.com.cn/problem/P8749">P8749 [蓝桥杯 2021 省 B] 杨辉三角形</a><br>实现代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">//C(a,b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a, j = <span class="number">1</span>;j &lt;= b;--i, ++j)</span><br><span class="line">	&#123;</span><br><span class="line">		res = res * i / j;</span><br><span class="line">		<span class="keyword">if</span> (res &gt; n) <span class="keyword">return</span> res;<span class="comment">//防止超过n直接爆long long，提前退出</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>)<span class="comment">//因为C（2,1）不存在，需要特判</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">16</span>;i &gt;= <span class="number">1</span>;--i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> l = <span class="number">2</span> * i, r = <span class="built_in">max</span>(l, n);<span class="comment">//有可能l比n大</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (l &lt; r)<span class="comment">//二分查找左端点</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">long</span> <span class="type">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">C</span>(mid, i) &lt; n) l = mid + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> r = mid;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">C</span>(l, i) == n)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; (l + <span class="number">1</span>) * l / <span class="number">2</span> + i + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>为来蓝桥杯打算法-堆</title>
    <url>/2023/11/16/%E4%B8%BA%E6%9D%A5%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%89%93%E7%AE%97%E6%B3%95-%E5%A0%86/</url>
    <content><![CDATA[<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="功能（操作）"><a href="#功能（操作）" class="headerlink" title="功能（操作）"></a>功能（操作）</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">插入一个数</span><br><span class="line">求集合中的最小值</span><br><span class="line">删除最小值</span><br></pre></td></tr></table></figure>

<h3 id="额外的操作"><a href="#额外的操作" class="headerlink" title="额外的操作"></a>额外的操作</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">删除任意一个元素</span><br><span class="line">修改任意一个元素</span><br></pre></td></tr></table></figure>



<h3 id="堆的本质"><a href="#堆的本质" class="headerlink" title="堆的本质"></a>堆的本质</h3><p>二叉树，且是完全二叉树（即除了最后一层的节点，其他层的节点的分支都有两个，最后一层的节点从左到右排列）</p>
<p><img src="https://img-blog.csdnimg.cn/ea4048dc41d849e5986f2aae68acbfdd.jpeg#pic_center" alt="在这里插入图片描述"></p>
<h3 id="小根堆的特点"><a href="#小根堆的特点" class="headerlink" title="小根堆的特点"></a>小根堆的特点</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">从上往下看，每个节点的值依次增高</span><br><span class="line">所以根节点是最小的值</span><br><span class="line">再往下</span><br><span class="line">左边的节点比他下面的两个节点还小，右边的节点也比他下面的两个节点还小</span><br></pre></td></tr></table></figure>

<h3 id="堆的存储"><a href="#堆的存储" class="headerlink" title="堆的存储"></a>堆的存储</h3><p>用一维数组存储所有的节点</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">对于根节点 就存储在<span class="string">q[1]</span></span><br><span class="line"></span><br><span class="line">根节点的左节点 存储在<span class="string">q[2]</span>,右节点存储在<span class="string">q[3]</span></span><br><span class="line"></span><br><span class="line">左节点的左节点存储在<span class="string">q[4]</span>, 右节点存储在<span class="string">q[5]</span></span><br><span class="line"></span><br><span class="line">右节点的左节点存储在<span class="string">q[6]</span>, 右节点存储在<span class="string">q[7]</span></span><br></pre></td></tr></table></figure>

<p>因此可以得出一个规律,从根节点开始，节点设为x</p>
<p>x下面的左节点就存储在q[2 * x],右节点就存储在q[2 * x  + 1]</p>
<p><img src="https://img-blog.csdnimg.cn/a4ad761204bc4554819bdb9724c72798.jpeg#pic_center" alt="在这里插入图片描述"></p>
<h3 id="down操作"><a href="#down操作" class="headerlink" title="down操作"></a>down操作</h3><p><img src="https://img-blog.csdnimg.cn/d6b8415a14c44562971a96fd83e3c1b9.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">简单来说就是把一个节点往下移</span><br><span class="line">如果一个节点的值改变了，那么他在堆里应该放在适合的位置</span><br></pre></td></tr></table></figure>

<p>改变时的树</p>
 <figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">down</span>操作的原理是</span><br><span class="line">如果该节点比他下面的节点大的话，那么就交换一下</span><br><span class="line">如果交换后还比下面的大，那么就再和下面的节点交换</span><br><span class="line">直到符合小根堆的性质</span><br></pre></td></tr></table></figure>



<p>down操作后的树<br><img src="https://img-blog.csdnimg.cn/41b6fe2bff2747bab236b3f509820c7e.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="up操作"><a href="#up操作" class="headerlink" title="up操作"></a>up操作</h3><p>与down操作如出一辙</p>
<p>最后我们可以知道一开始那些操作是如何实现的</p>
<p>用heap存储每一个节点，size作为元素量也是下标</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">插入一个数 </span><br><span class="line"> 把要插入的数放到数组最后一个位置，然后对新节点up操作</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">heap[++size] = x;</span><br><span class="line"><span class="built_in">up</span>(size);</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">求集合中的最小值</span><br><span class="line">就是heap<span class="selector-attr">[1]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">删除最小值</span><br><span class="line">让最后一个节点覆盖掉根节点，然后对根节点<span class="meta">down</span>操作</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">heap[<span class="number">1</span>] = heap[size];</span><br><span class="line">size--;</span><br><span class="line"><span class="built_in">down</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">删除任意一个元素</span><br><span class="line">直接让最后一个节点覆盖掉该节点，然后对他进行<span class="meta">up</span>和<span class="meta">down</span>操作</span><br><span class="line">因为<span class="meta">up</span>和<span class="meta">down</span>只会执行一个，那么他是比原来节点大于等于小于都是无所谓的</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">heap[k] = heap[size];</span><br><span class="line">size--;</span><br><span class="line"><span class="built_in">up</span>(k),<span class="built_in">down</span>(k);</span><br></pre></td></tr></table></figure>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">修改任意一个元素</span><br><span class="line">与删除同理，只不过heap[size]变成了x</span><br></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">heap[k] = x<span class="comment">;</span></span><br><span class="line"><span class="meta">up</span>(k),<span class="meta">down</span>(k)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N],se;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> t = u;</span><br><span class="line">	<span class="keyword">if</span> (u * <span class="number">2</span> &lt;= se &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t])<span class="comment">//左节点比较</span></span><br><span class="line">		t = u * <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= se &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) <span class="comment">//右节点比较</span></span><br><span class="line">		t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (u != t)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">swap</span>(h[u], h[t]);</span><br><span class="line">		<span class="built_in">down</span>(t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; h[u / <span class="number">2</span>] &gt; h[u])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">swap</span>(h[u / <span class="number">2</span>], h[u]);</span><br><span class="line">		u /= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line">	se = n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span>;i;i--) <span class="built_in">down</span>(i);<span class="comment">//时间复杂度接近O(1)</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, h[<span class="number">1</span>]);</span><br><span class="line">		<span class="comment">//删除堆顶元素</span></span><br><span class="line">		h[<span class="number">1</span>] = h[se];</span><br><span class="line">		se--;</span><br><span class="line">		<span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>为蓝桥杯而来-STL</title>
    <url>/2023/11/16/%E4%B8%BA%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%80%8C%E6%9D%A5-STL/</url>
    <content><![CDATA[<h2 id="STL二次学习"><a href="#STL二次学习" class="headerlink" title="STL二次学习"></a>STL二次学习</h2><p>列表</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector<span class="comment">//变长数组，空间扩容时倍增</span></span><br><span class="line">string<span class="comment">//字符串，substr返回字串，c_str()返回字符数组的头指针</span></span><br><span class="line">queue<span class="comment">//队列push（）队尾插入，front（）返回对头元素，pop（）把对头元素弹出，back（）返回队尾</span></span><br><span class="line">priority_queue<span class="comment">//优先队列，一种堆，push（)往堆中插入元素，top（）返回堆顶，pop（）把堆顶弹出</span></span><br><span class="line">stack<span class="comment">//栈，push（）往栈顶添加元素，top（）返回栈顶元素，pop（）弹出栈顶元素</span></span><br><span class="line">deque<span class="comment">//双端队列，对头队尾都可以插入弹出，支持随机访问</span></span><br><span class="line">set,map,multiset,multimap<span class="comment">//基于红黑树，平衡二叉树的一种，本质上是动态维护有序序列</span></span><br><span class="line">unordered_set,unordered_map,unordered_multiset,unordered_multimap<span class="comment">//基于哈希表实现</span></span><br><span class="line">bitset<span class="comment">//位存储，压位</span></span><br></pre></td></tr></table></figure>

<p>系统为某一程序分配空间时，所需时间与空间大小无关，与申请次数有关</p>
<h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> m = <span class="number">3</span>;</span><br><span class="line">	<span class="comment">//vector初始化</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; a;<span class="comment">//1</span></span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;<span class="comment">//2.特定长度</span></span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n, m)</span></span>;<span class="comment">//3,特定长度且数组内每个元素为特定值</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; a[<span class="number">10</span>];<span class="comment">//4,定义vector类型数组</span></span><br><span class="line">	<span class="comment">//函数</span></span><br><span class="line">	<span class="type">int</span> k = a.<span class="built_in">size</span>();<span class="comment">//返回a数组的元素个数</span></span><br><span class="line">	k = a.<span class="built_in">empty</span>();<span class="comment">//返回布尔值，判断是否为空	</span></span><br><span class="line">	<span class="comment">//size和empty是所有STL通用的函数，时间复杂度为O（1）</span></span><br><span class="line">	a.<span class="built_in">clear</span>();<span class="comment">//清空vector,除了队列以外都能用</span></span><br><span class="line">	k = a.<span class="built_in">front</span>();<span class="comment">//返回vector的第一个数</span></span><br><span class="line">	k = a.<span class="built_in">back</span>();<span class="comment">//返回vector的最后一个数</span></span><br><span class="line">	a.<span class="built_in">push_back</span>(k);<span class="comment">//向vector的最后插入一个数</span></span><br><span class="line">	a.<span class="built_in">pop_back</span>();<span class="comment">//删除vector的最后一个数</span></span><br><span class="line">	k = a.<span class="built_in">begin</span>();<span class="comment">//返回vector数组的第0个数</span></span><br><span class="line">	k = a.<span class="built_in">end</span>();<span class="comment">//返回vector数组的最后一个数的后面一个数</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码示范 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;++i) a.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; a.<span class="built_in">size</span>();++i) cout &lt;&lt; a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//迭代器可以看作指针</span></span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = a.<span class="built_in">begin</span>(); i != a.<span class="built_in">end</span>();++i) cout &lt;&lt; *i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//auto遍历</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>vector支持比较运算，按字典序比较</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">4</span>, <span class="number">3</span>)</span></span>;<span class="comment">//4个3</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;<span class="comment">//3个4</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a &lt; b);<span class="comment">//返回布尔值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><p>存储二元组</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pair&lt;<span class="type">int</span>, string&gt; p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//构造pair数组</span></span><br><span class="line">	p = <span class="built_in">make_pair</span>(<span class="number">10</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">	p = &#123; <span class="number">20</span>,<span class="string">&quot;abc&quot;</span> &#125;;<span class="comment">//C++11</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> k = p.first;<span class="comment">//取得pair数组的第一个元素</span></span><br><span class="line">	string s = p.second;<span class="comment">//取得pair数组的第二个元素</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//套娃式，能定义一个对象有多个属性</span></span><br><span class="line">	pair&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; pp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也能够支持比较运算，按字典序比较，以first为第一关键字，second为第二关键字</p>
<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//定义</span></span><br><span class="line">	string s = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">	s += <span class="string">&quot;def&quot;</span>;<span class="comment">//可以直接加字符串;</span></span><br><span class="line">	s += <span class="string">&#x27;g&#x27;</span>;<span class="comment">//可以直接加字符</span></span><br><span class="line">	<span class="comment">//但要注意操作符两边必须有一个是string字符串</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//操作 </span></span><br><span class="line">	<span class="comment">//支持三种操作，size，empty，clear</span></span><br><span class="line">	cout &lt;&lt; s.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">3</span>) &lt;&lt; endl;<span class="comment">//substr返回字串</span></span><br><span class="line">	cout &lt;&lt; s.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">100</span>)&lt;&lt;endl;<span class="comment">//长度超了不会报错，返回的是到字符串结束为止</span></span><br><span class="line">	cout &lt;&lt; s.<span class="built_in">substr</span>(<span class="number">0</span>)&lt;&lt;endl;<span class="comment">//返回从特定下标到结束的字符串</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s.<span class="built_in">c_str</span>());<span class="comment">//直接用s会有问题，用c_str()返回起始地址就可以解决</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>substr的第二个参数代表长度</p>
<h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	queue &lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;++i) q.<span class="built_in">push</span>(i);<span class="comment">//从队尾插入元素</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>;<span class="comment">//返回队头元素</span></span><br><span class="line">		q.<span class="built_in">pop</span>();<span class="comment">//弹出队头元素</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;++i) q.<span class="built_in">push</span>(i);</span><br><span class="line">	cout&lt;&lt;q.<span class="built_in">back</span>()&lt;&lt;endl;<span class="comment">//返回队尾元素</span></span><br><span class="line"></span><br><span class="line">	q = <span class="built_in">queue</span>&lt;<span class="type">int</span>&gt;();<span class="comment">//清空队列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>queue没有clear函数</p>
<h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><p>优先队列，即堆,默认大根堆</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//定义堆，堆的好处之一就是插入的时候就相当于排序了一次</span></span><br><span class="line">	priority_queue&lt;<span class="type">int</span>&gt; pq;<span class="comment">//默认大根堆.由大到小排序</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">10</span>;++i) pq.<span class="built_in">push</span>(i);<span class="comment">//向堆中插入元素</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; pq.<span class="built_in">top</span>()&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">//返回堆顶元素</span></span><br><span class="line">		pq.<span class="built_in">pop</span>();<span class="comment">//弹出堆顶元素</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改成小根堆的两种方法</p>
<p>变号法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	priority_queue&lt;<span class="type">int</span>&gt; pq;<span class="comment">//默认大根堆.由大到小排序</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//改成小根堆的方法，插入一个数时，改成插入一个负数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>;i &gt;= <span class="number">0</span>;--i) pq.<span class="built_in">push</span>(-i);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; -pq.<span class="built_in">top</span>()&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">//输出时再变号</span></span><br><span class="line">		pq.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; heap;<span class="comment">//得到小根堆</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>;i &gt;= <span class="number">0</span>;--i) heap.<span class="built_in">push</span>(i);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; heap.<span class="built_in">top</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		heap.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>栈</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;++i) s.<span class="built_in">push</span>(i);<span class="comment">//向栈顶插入元素</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>;<span class="comment">//返回栈顶元素</span></span><br><span class="line">		s.<span class="built_in">pop</span>();<span class="comment">//弹出栈顶元素</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>双端队列，加强版vector</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//操作</span></span><br><span class="line">	<span class="type">int</span> k = q.<span class="built_in">size</span>();</span><br><span class="line">	k = q.<span class="built_in">empty</span>();<span class="comment">//返回布尔值</span></span><br><span class="line">	q.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">	k = q.<span class="built_in">front</span>();<span class="comment">//返回第一个元素</span></span><br><span class="line">	k = q.<span class="built_in">back</span>();<span class="comment">//返回最后一个元素</span></span><br><span class="line">	q.<span class="built_in">push_back</span>(k);<span class="comment">//在最后一个位置插入元素</span></span><br><span class="line">	q.<span class="built_in">pop_back</span>();<span class="comment">//删除最后一个元素</span></span><br><span class="line">	q.<span class="built_in">push_front</span>(k);<span class="comment">//向队头插入一个元素</span></span><br><span class="line">	q.<span class="built_in">pop_front</span>(k);<span class="comment">//弹出队头元素</span></span><br><span class="line">	<span class="comment">//支持随机寻址，还有begin和end迭代器</span></span><br><span class="line">	<span class="comment">//速度很慢</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="set-multiset"><a href="#set-multiset" class="headerlink" title="set&#x2F;multiset"></a>set&#x2F;multiset</h3><p>set定义数组不允许出现重复元素，如果出现就会忽略掉</p>
<p>multiset是可以有重复元素的</p>
<p>所有set操作的时间复杂度都为logN </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt; s;<span class="comment">//不能有重复元素</span></span><br><span class="line">	multiset &lt;<span class="type">int</span>&gt; Ms;<span class="comment">//可以有重复元素</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//操作</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;++i) s.<span class="built_in">insert</span>(i);	 </span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; *s.<span class="built_in">find</span>(<span class="number">2</span>) &lt;&lt; endl;<span class="comment">//不存在则返回end迭代器,否则返回他的位置地址</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; s.<span class="built_in">count</span>(<span class="number">1</span>) &lt;&lt; endl;<span class="comment">//返回某个数的个数,set只会返回0和1，multiset返回他的个数</span></span><br><span class="line"></span><br><span class="line">	s.<span class="built_in">erase</span>(<span class="number">1</span>);<span class="comment">//如果参数是一个数，则删除所有等于这个数的节点</span></span><br><span class="line">	<span class="comment">//时间复杂度为 O（k + logN）k,为这个数的个数</span></span><br><span class="line">	set&lt;<span class="type">int</span>&gt;::iterator i = s.<span class="built_in">end</span>();</span><br><span class="line">	s.<span class="built_in">erase</span>(i);<span class="comment">//如果参数是一个迭代器，则删除该位置的节点</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//核心操作</span></span><br><span class="line">	<span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">	i = s.<span class="built_in">lower_bound</span>(x);<span class="comment">//返回数组中第一个大于或等于被查数的值的迭代器</span></span><br><span class="line">	i = s.<span class="built_in">upper_bound</span>(x);<span class="comment">//返回数组中第一个大于被查数的值的迭代器</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>迭代器里两个名词的意思</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">前驱：前面的一个数</span><br><span class="line">后继：后面一个数</span><br></pre></td></tr></table></figure>

<h3 id="map-multimap"><a href="#map-multimap" class="headerlink" title="map&#x2F;multimap"></a>map&#x2F;multimap</h3><p>map存储的是一种映射关系</p>
<p>同样可以用insert和erase</p>
<p>insert可以用pair插入</p>
<p>erase的参数可以是pair也可以是迭代器</p>
<p>find操作也和set一样</p>
<p>set操作能做的map大多都能做</p>
<p>实用操作，可以让任意类型作为下标，(时间复杂度为O（logN）)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	map&lt;string, <span class="type">int</span>&gt; a;<span class="comment">//讲string 映射成整数</span></span><br><span class="line"></span><br><span class="line">	a[<span class="string">&quot;abc&quot;</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; a[<span class="string">&quot;abc&quot;</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="unordered"><a href="#unordered" class="headerlink" title="unordered"></a>unordered</h3><p>优化set&#x2F;multiset和map&#x2F;multimap的时间复杂度，基于哈希表，使大多数操作的时间复杂度都为O（1）</p>
<p>但不支持lower_bound和upper_bound</p>
<p>，也不支持迭代器相关的操作</p>
<h3 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h3><p>可以比正常的内存占用省掉八倍</p>
<p>c++中布尔数组为1字节，1024个字节也就是1kb内存</p>
<p>如果用bitset压位的话，让布尔数组每一个位都能被充分利用，那么就只需128个字节 </p>
<p>bitset也支持位运算操作，也支持count操作</p>
]]></content>
  </entry>
  <entry>
    <title>为蓝桥杯而来——数据结构并查集</title>
    <url>/2023/11/16/%E4%B8%BA%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%80%8C%E6%9D%A5%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<blockquote>
<h3 id="需要掌握的前提"><a href="#需要掌握的前提" class="headerlink" title="需要掌握的前提"></a>需要掌握的前提</h3><p><a href="https://blog.csdn.net/niepandou/article/details/128731564?spm=1001.2014.3001.5501">数据结构字典树Trie</a></p>
<h2 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h2></blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">能够两个集合合并</span><br><span class="line">询问两个元素是否在一个集合当中</span><br></pre></td></tr></table></figure>
<p>注：集合指的是trie树那种存储字符串和数组的集合</p>
<pre><code>时间复杂度，接近 O(1)
</code></pre>
<blockquote>
<h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2></blockquote>
<p>每个集合都是一颗树，树根root的编号就是集合的编号，每个节点存储他的父节点，用p[x]表示x的父节点</p>
<h3 id="2-1对于树根的判断"><a href="#2-1对于树根的判断" class="headerlink" title="2.1对于树根的判断"></a>2.1对于树根的判断</h3><blockquote>
<p> 除了树根以外，其余的节点的父节点都不是x<br>   那么就可以通过该行代码来判断</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(p[x] == x)</span><br></pre></td></tr></table></figure>

<h3 id="2-2如何求节点x的集合编号"><a href="#2-2如何求节点x的集合编号" class="headerlink" title="2.2如何求节点x的集合编号"></a>2.2如何求节点x的集合编号</h3><blockquote>
<p>对该节点沿着路径一直找到树根，</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(p[x] != x) x = p[x];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>循环到最后一定是 p[x] &#x3D;&#x3D; x 即树根</p>
</blockquote>
<h3 id="2-3如何合并集合"><a href="#2-3如何合并集合" class="headerlink" title="2.3如何合并集合"></a>2.3如何合并集合</h3><blockquote>
<p>可以让其中一个树的树根直接插到另一个树的某一节点上，这样就实现了集合的合并</p>
</blockquote>
<h5 id="比如要将y的集合插到x里去"><a href="#比如要将y的集合插到x里去" class="headerlink" title="比如要将y的集合插到x里去"></a>比如要将y的集合插到x里去</h5><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">树根编号p[<span class="keyword">x</span>] <span class="operator">=</span><span class="operator">=</span> <span class="keyword">x</span><span class="punctuation">,</span>p[y] <span class="operator">=</span><span class="operator">=</span> y</span><br><span class="line">让p[y] <span class="operator">=</span> <span class="keyword">x</span><span class="comment">;</span></span><br><span class="line">即y树根节点的父节点就是<span class="keyword">x</span>的根节点</span><br></pre></td></tr></table></figure>

<h3 id="2-4对求节点x集合编号的优化（路径压缩）"><a href="#2-4对求节点x集合编号的优化（路径压缩）" class="headerlink" title="2.4对求节点x集合编号的优化（路径压缩）"></a>2.4对求节点x集合编号的优化（路径压缩）</h3><p>在第一次查询x节点的集合编号时，顺带把这条路径上的所有父节点全都指向根节点</p>
<h4 id="实现代码-例题"><a href="#实现代码-例题" class="headerlink" title="实现代码+例题"></a>实现代码+例题</h4><p><img src="https://img-blog.csdnimg.cn/cfc89a2bdf77448b864952d273c33afa.png#pic_center" alt="Alt"><br><img src="https://img-blog.csdnimg.cn/268257a74e934d839e96b3ce1c13b67d.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> p[N];<span class="comment">//父数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//返回x所在集合的编号 + 路径压缩</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">	<span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) p[i] = i;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">		<span class="type">int</span> a, b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>, op,&amp;a,&amp;b);</span><br><span class="line">		<span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;M&#x27;</span>)<span class="comment">//合并操作</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//把a树插到b树里</span></span><br><span class="line">			p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span><span class="comment">//判断两个节点是否在同一集合</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b))<span class="comment">//祖宗相同，则在同一集合</span></span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="3-连通块"><a href="#3-连通块" class="headerlink" title="3.连通块"></a>3.连通块</h3></blockquote>
<pre><code>假设有很多个点，任意几个点连起来形成的线就叫做连通块
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/cfddcb4fcb254624ab2f734e3c4296e5.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>若点自身连线也可以称为一个连通块 </p>
</blockquote>
<h5 id="如何把两个点连接成一个连通块"><a href="#如何把两个点连接成一个连通块" class="headerlink" title="如何把两个点连接成一个连通块"></a>如何把两个点连接成一个连通块</h5><blockquote>
<p>可以把两个点看作是两个集合，也就是两个树，把一棵树插到另一棵树，就形成了连通块<br>    他们的元素量也可以通过一个数组存储，</p>
</blockquote>
<blockquote>
<p>在树插入的过程里，把两个树的元素量放在一起就可以</p>
</blockquote>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以size定义会有歧义，可以换个名字</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">int</span> size[N];<span class="comment">//每个集合点的数量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p[x] != x) p[x] = p[<span class="built_in">find</span>(x)];</span><br><span class="line">	<span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		p[i] = i;</span><br><span class="line">		size[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> op[<span class="number">5</span>];</span><br><span class="line">		<span class="type">int</span> a, b;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; a &gt;&gt; b; </span><br><span class="line">			<span class="comment">//如果两个集合本来就在一起，就跳过</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="comment">//把a的元素量加到b中</span></span><br><span class="line">			size[<span class="built_in">find</span>(b)] += size[<span class="built_in">find</span>(a)];</span><br><span class="line">			p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (op[<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b))</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; a;</span><br><span class="line">			cout &lt;&lt; size[<span class="built_in">find</span>(a)]&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>为蓝桥杯而来-哈希表</title>
    <url>/2023/11/16/%E4%B8%BA%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%80%8C%E6%9D%A5-%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>主要作用</p>
<p>把一个比较大的空间或者值域映射到比较小的空间里</p>
<h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><h4 id="1-开放寻址法"><a href="#1-开放寻址法" class="headerlink" title="1.开放寻址法"></a>1.开放寻址法</h4><p>只需要开一个一维数组，但数组一般来说会开到所定范围的两到三倍</p>
<p>假设有一个宾馆有很长都走廊，之间有足够多的房间互相连接，且每个房间只能住一人</p>
<p>如果想要插入一个数，就将该数插入到一个编号房间中</p>
<p>如果新插入的数的房间刚好有人，那就去找她下一个的房间，直到找到一个空房间</p>
<h4 id="2-拉链法"><a href="#2-拉链法" class="headerlink" title="2.拉链法"></a>2.拉链法</h4><p>假设有一个很长的走道，走道之间有足够长的槽口互相连接</p>
<p>如果想插入一个数，就将该数插入到一个编号槽口中</p>
<p>如果刚好新插入的数所要插入的编号槽口中有数了，即发生冲突了，那么就用一根绳串连槽口中的两个数</p>
<p><img src="https://img-blog.csdnimg.cn/225e27f6cbd04f52b273a790879b6316.png#pic_center" alt="在这里插入图片描述"></p>
<p>顶端就是各个槽口，下方的每个数用一根根拉链串联起来</p>
<p>假设要存x，凹槽有1e5 + 3，那么要存的x就是将x强行放到凹槽内，他对应的凹槽编号就是（ x % （1e + 5） ）</p>
<p>（凹槽为质数时冲突最小）</p>
<h3 id="操作方式"><a href="#操作方式" class="headerlink" title="操作方式"></a>操作方式</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">添加一个数</span><br><span class="line">查询一个数</span><br><span class="line">删除一个数</span><br></pre></td></tr></table></figure>

<p>关于删除一个数</p>
<p>直接在这个地方打个标记，查询的时候就查不到他身上了</p>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p>开放寻址法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200003</span>;</span><br><span class="line"><span class="type">int</span> null = <span class="number">0x3f3f3f3f</span>;<span class="comment">//一个大于1e9的数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//开放寻址法中find函数里如果找到该数返回他的位置</span></span></span><br><span class="line"><span class="function"><span class="comment">//没有找到则返回她应在的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> k = (x % N + N )% N;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (h[k] != null &amp;&amp; h[k] != x)</span><br><span class="line">	&#123;</span><br><span class="line">		k++;</span><br><span class="line">		<span class="keyword">if</span> (k == N) k = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(h, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (n--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, op, &amp;x);</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> k = <span class="built_in">find</span>(x);</span><br><span class="line">		<span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			h[k] = x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (h[k] != null) <span class="built_in">puts</span>(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>拉链法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N];<span class="comment">//槽</span></span><br><span class="line"><span class="type">int</span> e[N],ne[N], idx;<span class="comment">//单链表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//原理与链表如出一辙</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> k = (x % N + N ) % N;<span class="comment">//写这么复杂是为了考虑负数</span></span><br><span class="line"></span><br><span class="line">	e[idx] = x;</span><br><span class="line">	ne[idx] = h[k];</span><br><span class="line">	h[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = h[k];i != <span class="number">-1</span>;i = ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (e[i] == x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (n--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>,op,&amp;x);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span>) <span class="built_in">insert</span>(x);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">find</span>(x)) cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="字符串前缀哈希法"><a href="#字符串前缀哈希法" class="headerlink" title="字符串前缀哈希法"></a>字符串前缀哈希法</h3><p>将一个字符串转换以特定的进制转换，在转换成一个十进制数，最后mod该值作为他所存的位置</p>
<p>该方法无法考虑冲突的情况</p>
<p>设进制数p &#x3D; 131或13331</p>
<p>除数Q &#x3D; 2e64</p>
<p>会大大降低冲突的情况<br><img src="https://img-blog.csdnimg.cn/4c351d0d27754edfa7bb6c8b364bfa5b.jpeg#pic_center" alt="在这里插入图片描述"></p>
<p>设A映射1，B映射2，以此类推，且A不能映射为0，因为0乘任何数都为0</p>
<p>最后再把h[k] % Q 即可存储</p>
<h3 id="例题代码"><a href="#例题代码" class="headerlink" title="例题代码"></a>例题代码</h3><p>快速判断两个字符串相等</p>
<p><img src="https://img-blog.csdnimg.cn/539f0e78a51742df8d3abfe224475fc7.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, P = <span class="number">131</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line">ULL h[N], p[N];</span><br><span class="line"></span><br><span class="line"><span class="function">UUL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%s&quot;</span>, &amp;n, &amp;m, str + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">		h[i] = h[i - <span class="number">1</span>] * P + str[i];<span class="comment">//得到字符串哈希值</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;l1, &amp;r1, &amp;l2, &amp;r2);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">get</span>(l1, r1) == <span class="built_in">get</span>(l2, r2)) <span class="built_in">puts</span>(<span class="string">&quot;yes&quot;</span>);<span class="comment">//只要哈希值相等那么就可以认为两个字符串是相等的</span></span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>对象应用和单例模式</title>
    <url>/2023/11/16/%E5%AF%B9%E8%B1%A1%E5%BA%94%E7%94%A8%E5%92%8C%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<h1 id="this指针和重构"><a href="#this指针和重构" class="headerlink" title="this指针和重构"></a>this指针和重构</h1></blockquote>
<h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><p><strong>this指针用来指向当前对象</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Point</span>(<span class="type">int</span> ix = <span class="number">0</span>, <span class="type">int</span> iy = <span class="number">0</span>)</span><br><span class="line">		:_ix(ix)</span><br><span class="line">		, _iy(iy)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done Create&quot;</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;_ix&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;_iy&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="keyword">this</span>-&gt;_ix&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="keyword">this</span>-&gt;_iy&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _ix;</span><br><span class="line">	<span class="type">int</span> _iy;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>每一个非静态修饰的成员函数都有隐含的this指针（为什么静态没有，后文会说明）</p>
<p>this指针会作为函数成员的一个隐藏的第一个参数，在编译时会自动填充,不需要我们自己填补(会报错)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">p1.<span class="built_in">print</span>();<span class="comment">//== Point::print(&amp;p1);</span></span><br></pre></td></tr></table></figure>

<h2 id="operator重构"><a href="#operator重构" class="headerlink" title="operator重构"></a>operator重构</h2><p>重构（我自己定义的词，根据重载推演的，准确翻译叫什么我也不知道）就是对一个已定义的函数,操作运算符重新定义，重新构造一遍</p>
<p>重构对当前类赋值运算符重构（即重构深拷贝）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">int</span> ix = <span class="number">0</span>, <span class="type">int</span> iy = <span class="number">0</span>)</span><br><span class="line">		:_ix(ix)</span><br><span class="line">		, _iy(iy)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done Create&quot;</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;_ix&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;_iy&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">const</span> Point&amp; p)<span class="comment">//浅拷贝</span></span><br><span class="line">		:_ix(p._ix)</span><br><span class="line">		,_iy(p._iy)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done Copy&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//赋值运算符函数，系统自动提供，可以重构</span></span><br><span class="line">	Point&amp; <span class="keyword">operator</span> = (<span class="type">const</span> Point&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		_ix = p._ix;</span><br><span class="line">		_iy = p._iy;</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done operator=&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="keyword">this</span>-&gt;_ix &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="keyword">this</span>-&gt;_iy &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _ix;</span><br><span class="line">	<span class="type">int</span> _iy;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>深拷贝的两种写法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">p2 = p1;</span><br><span class="line">p2.<span class="keyword">operator</span> = (p1);</span><br></pre></td></tr></table></figure>

<p>完整代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">int</span> ix = <span class="number">0</span>, <span class="type">int</span> iy = <span class="number">0</span>)</span><br><span class="line">		:_ix(ix)</span><br><span class="line">		, _iy(iy)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done Create&quot;</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;_ix&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;_iy&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">const</span> Point&amp; p)</span><br><span class="line">		:_ix(p._ix)</span><br><span class="line">		,_iy(p._iy)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done Copy&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//赋值运算符函数，系统自动提供，可以重构</span></span><br><span class="line">	Point&amp; <span class="keyword">operator</span> = (<span class="type">const</span> Point&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		_ix = p._ix;</span><br><span class="line">		_iy = p._iy;</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done operator=&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="keyword">this</span>-&gt;_ix &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="keyword">this</span>-&gt;_iy &lt;&lt; endl;<span class="comment">//每一个成员函数都有一个隐藏的this指针</span></span><br><span class="line">		<span class="comment">//this指针指向当前的对象</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _ix;</span><br><span class="line">	<span class="type">int</span> _iy;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//this指针作为成员的隐藏的第一个参数</span></span><br><span class="line">	<span class="comment">//编译器在编译时自动加上</span></span><br><span class="line">	p1.<span class="built_in">print</span>();<span class="comment">//== Point::print(&amp;p1);</span></span><br><span class="line"></span><br><span class="line">	<span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	p2 = p1;</span><br><span class="line">	p2.<span class="keyword">operator</span> = (p1);<span class="comment">//两种写法完全相同</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h1 id="数据成员修饰"><a href="#数据成员修饰" class="headerlink" title="数据成员修饰"></a>数据成员修饰</h1></blockquote>
<h2 id="const数据成员"><a href="#const数据成员" class="headerlink" title="const数据成员"></a>const数据成员</h2><h3 id="const初始化"><a href="#const初始化" class="headerlink" title="const初始化"></a>const初始化</h3><p>一般在定义构造函数的时候，通常去初始化一堆数据成员，防止运行出错</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Point</span>(<span class="type">int</span> ix,<span class="type">int</span> iy,<span class="type">int</span> iz)</span><br><span class="line">	:_ix(ix)</span><br><span class="line">	,_iy(iy)</span><br><span class="line">	,_iz(iz)</span><br><span class="line">	<span class="comment">//引用成员必须在此处初始化</span></span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Have done structure&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以在private内部	声明数据成员时用const修饰</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span>  <span class="type">int</span> _ix = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//const int _ix = 10;//为了避免初始化冗余，直接用const初始化数据成员</span></span><br><span class="line"><span class="type">const</span>  <span class="type">int</span> _iy = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>此时即使不使用初始化列表（有参构造函数），对象创建时他的数据成员也已经被初始化了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Point</span>() = <span class="keyword">default</span>;<span class="comment">//简便定义默认构造函数</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">const</span> <span class="type">int</span>&amp; ix,<span class="type">const</span> <span class="type">int</span>&amp; iy)</span><br><span class="line">		:_ix(ix)</span><br><span class="line">		,_iy(iy)</span><br><span class="line">		<span class="comment">//引用成员必须在此处初始化</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done structure&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _ix &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; _iy &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">const</span>  <span class="type">int</span> _ix = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//const int _ix = 10;//为了避免初始化冗余，直接用const初始化数据成员</span></span><br><span class="line">	<span class="type">const</span>  <span class="type">int</span> _iy = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//int&amp; _ref;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Point p;<span class="comment">//无参时调用默认构造函数</span></span><br><span class="line">	p.<span class="built_in">Print</span>();</span><br><span class="line">	<span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	p1.<span class="built_in">print</span>();</span><br><span class="line">	<span class="function"><span class="type">const</span> Point <span class="title">p2</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	p2.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果<br>···<br>10 10<br>Have done structure<br>1 2<br>Have done structure<br>1 2<br>···</p>
<h3 id="const成员函数"><a href="#const成员函数" class="headerlink" title="const成员函数"></a>const成员函数</h3><p>const修饰的成员函数只能读取数据成员不能进行修改，不允许在内部改变<br>const修饰对象只能调用const成员函数<br>非const修饰的对象可以调用const成员函数，也可以调用非const成员函数</p>
<p>const成员函数形式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;_ix&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;_iy&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>const在对象应用的完整代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Point</span>() = <span class="keyword">default</span>;<span class="comment">//简便默认构造函数</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">const</span> <span class="type">int</span>&amp; ix,<span class="type">const</span> <span class="type">int</span>&amp; iy)</span><br><span class="line">		:_ix(ix)</span><br><span class="line">		,_iy(iy)</span><br><span class="line">		<span class="comment">//引用成员必须在此处初始化</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done structure&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const成员函数</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span><span class="comment">//const成员函数只能读取数据成员，不能修改</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//数据成员不允许在const成员函数内部改变，只能读取</span></span><br><span class="line">		<span class="comment">//_ix = 10;</span></span><br><span class="line">		cout &lt;&lt; _ix &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; _iy &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//非const成员函数与const修饰成员函数重名时可以构成重载	</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _ix &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; _iy &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//非const对象可以调用非const成员函数和const成员函数</span></span><br><span class="line">	<span class="comment">//const对象只能调用const成员函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">const</span>  <span class="type">int</span> _ix = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//const int _ix = 10;//为了避免初始化冗余，直接用const初始化数据成员</span></span><br><span class="line">	<span class="type">const</span>  <span class="type">int</span> _iy = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//int&amp; _ref;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Line</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span><br><span class="line">		:_pt1(<span class="built_in">Point</span>(x1,y1))</span><br><span class="line">		,_pt2(<span class="built_in">Point</span>(x2,y2))</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Line(x1,y1,x2,y2)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//默认情况下，类数据成员初始化会调用无参构造函数</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">LinePrint</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		_pt1.<span class="built_in">print</span>();</span><br><span class="line">		_pt2.<span class="built_in">print</span>();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Point _pt1;</span><br><span class="line">	Point _pt2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Point p;</span><br><span class="line">	p.<span class="built_in">print</span>();</span><br><span class="line">	<span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	p1.<span class="built_in">print</span>();</span><br><span class="line">	<span class="function"><span class="type">const</span> Point <span class="title">p2</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	p2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">	<span class="function">Line <span class="title">l1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">	l1.<span class="built_in">LinePrint</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="static数据成员"><a href="#static数据成员" class="headerlink" title="static数据成员"></a>static数据成员</h2><h3 id="static修饰数据成员"><a href="#static修饰数据成员" class="headerlink" title="static修饰数据成员"></a>static修饰数据成员</h3><p>static修饰的数据成员被整个类所有对象所共享<br>static数据成员分布在全局静态区，不占用对象的存储空间<br>static数据成员需要在类之外，全局区初始化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _name;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">	<span class="type">static</span> <span class="type">double</span> TotalPrice;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态数据成员初始化</span></span><br><span class="line"><span class="type">double</span> Computer::_TotalPrice = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设有Computer类，有若干Computer对象，求所有对象的总价，就可以用static修饰的数据成员去求得</p>
<h3 id="静态数据成员需要注意的点"><a href="#静态数据成员需要注意的点" class="headerlink" title="静态数据成员需要注意的点"></a>静态数据成员需要注意的点</h3><p>如果不存在静态数据成员，类的定义可以如下写</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* brand, <span class="type">const</span> <span class="type">int</span>&amp; price)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(brand) + <span class="number">1</span>]())</span><br><span class="line">		, _price(price)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, brand);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done structure!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &amp;_brand &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">delete</span>[] _brand;</span><br><span class="line">		_brand = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Computer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (_brand) <span class="built_in">release</span>();</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have do ne Delete&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Computer&amp; p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		std::<span class="built_in">swap</span>(<span class="keyword">this</span>-&gt;_brand, p._brand);</span><br><span class="line">		std::<span class="built_in">swap</span>(<span class="keyword">this</span>-&gt;_price, p._price);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> Computer&amp; p)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(p._brand) + <span class="number">1</span>]())</span><br><span class="line">		, _price(p._price)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, p._brand);</span><br><span class="line">	&#125;</span><br><span class="line">	Computer&amp; <span class="keyword">operator</span> = (<span class="type">const</span> Computer&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == &amp;p) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">		<span class="function">Computer <span class="title">tmp</span><span class="params">(p._brand, p._price)</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">swap</span>(tmp);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _brand &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		cout &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>当有了静态数据成员TotalPrice时，函数构造，拷贝，折构时都需要对该变量特殊处理</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* brand, <span class="type">const</span> <span class="type">int</span>&amp; price)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(brand) + <span class="number">1</span>]())</span><br><span class="line">		, _price(price)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, brand);</span><br><span class="line">		_TotalPrice += _price; <span class="comment">//记录总价</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done structure!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &amp;_brand &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">delete</span>[] _brand;</span><br><span class="line">		_brand = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Computer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (_brand) <span class="built_in">release</span>();</span><br><span class="line">		_TotalPrice -= _price;<span class="comment">//对象销毁，总价减少</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have do ne Delete&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Computer&amp; p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		std::<span class="built_in">swap</span>(<span class="keyword">this</span>-&gt;_brand, p._brand);</span><br><span class="line">		std::<span class="built_in">swap</span>(<span class="keyword">this</span>-&gt;_price, p._price);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> Computer&amp; p)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(p._brand) + <span class="number">1</span>]())</span><br><span class="line">		, _price(p._price)</span><br><span class="line">	&#123;</span><br><span class="line">		_TotalPrice += _price;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, p._brand);</span><br><span class="line">	&#125;</span><br><span class="line">	Computer&amp; <span class="keyword">operator</span> = (<span class="type">const</span> Computer&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == &amp;p) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//原先的成员需要去掉</span></span><br><span class="line">		_TotalPrice -= _price;</span><br><span class="line"></span><br><span class="line">		<span class="function">Computer <span class="title">tmp</span><span class="params">(p._brand, p._price)</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">swap</span>(tmp);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//新拷贝的price嫁过来</span></span><br><span class="line">		_TotalPrice += _price;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _brand &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		cout &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">	<span class="type">static</span> <span class="type">double</span> _TotalPrice;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h3><p>1.静态函数成员内部只能访问静态数据成员和静态函数成员<br>2.不能访问非静态数据成员和函数成员<br>3.静态成员函数内部没有隐含的this指针（即不能指向非静态数据成员）</p>
<p>静态函数成员形式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">printTotal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; _TotalPrice &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>static在对象应用中的完整代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* brand, <span class="type">const</span> <span class="type">int</span>&amp; price)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(brand) + <span class="number">1</span>]())</span><br><span class="line">		, _price(price)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, brand);</span><br><span class="line">		_TotalPrice += _price; <span class="comment">//记录总价</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done structure!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &amp;_brand &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">delete</span>[] _brand;</span><br><span class="line">		_brand = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Computer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (_brand) <span class="built_in">release</span>();</span><br><span class="line">		_TotalPrice -= _price;<span class="comment">//对象销毁，防止拷贝多余出来price</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have do ne Delete&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Computer&amp; p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		std::<span class="built_in">swap</span>(<span class="keyword">this</span>-&gt;_brand, p._brand);</span><br><span class="line">		std::<span class="built_in">swap</span>(<span class="keyword">this</span>-&gt;_price, p._price);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> Computer&amp; p)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(p._brand) + <span class="number">1</span>]())</span><br><span class="line">		, _price(p._price)</span><br><span class="line">	&#123;</span><br><span class="line">		_TotalPrice += _price;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, p._brand);</span><br><span class="line">	&#125;</span><br><span class="line">	Computer&amp; <span class="keyword">operator</span> = (<span class="type">const</span> Computer&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == &amp;p) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//原先的成员需要去掉</span></span><br><span class="line">		_TotalPrice -= _price;</span><br><span class="line"></span><br><span class="line">		<span class="function">Computer <span class="title">tmp</span><span class="params">(p._brand, p._price)</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">swap</span>(tmp);</span><br><span class="line"></span><br><span class="line">		_TotalPrice += _price;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _brand &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		cout &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">printTotal</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _TotalPrice &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">	<span class="type">static</span> <span class="type">double</span> _TotalPrice;</span><br><span class="line">	<span class="comment">//静态数据成员被整个类的所有对象共享</span></span><br><span class="line">	<span class="comment">//存放在全局静态区，并不占用对象的存储空间</span></span><br><span class="line">	<span class="comment">//静态变量需要在类之外初始化</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> Computer::_TotalPrice = <span class="number">0</span>;<span class="comment">//不用再加一个static,且要在全局区去定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员函数内部只能访问静态数据成员和成员函数</span></span><br><span class="line"><span class="comment">//静态成员函数内部不能访问非静态的数据成员和成员函数</span></span><br><span class="line"><span class="comment">//静态成员的函数列表中没有隐含的this指针 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">copy</span><span class="params">(Computer p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	p.<span class="built_in">print</span>();</span><br><span class="line">	p.<span class="built_in">printTotal</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">p1</span><span class="params">(<span class="string">&quot;abc&quot;</span>, <span class="number">4999</span>)</span></span>;</span><br><span class="line">	Computer p2 = p1;</span><br><span class="line"></span><br><span class="line">	p1.<span class="built_in">print</span>();</span><br><span class="line">	p1.<span class="built_in">printTotal</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">copy</span>(p2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	p1.<span class="built_in">print</span>();</span><br><span class="line">	p1.<span class="built_in">printTotal</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员函数能通过类名直接调用</span></span><br><span class="line">	Computer::<span class="built_in">printTotal</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>特点：一个类只能生成一个对象，且是唯一的对象</p>
</blockquote>
<h2 id="单例模式的定义方法"><a href="#单例模式的定义方法" class="headerlink" title="单例模式的定义方法"></a>单例模式的定义方法</h2><p>1.将构造函数私有化<br>创建的对象就既不能是栈对象，也不能是全局&#x2F;静态对象，只能是堆对象（因为new&#x2F;malloc出来唯一的对象可以用地址访问）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">SingleClass</span>() &#123;cout&lt;&lt;<span class="string">&quot;Have done create!&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>2.在类中定义一个静态指针指向该类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">SingleClass</span>() &#123;cout&lt;&lt;<span class="string">&quot;Have done create!&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">	<span class="type">static</span> SingleClass* _pInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static数据成员初始化在全局</span></span><br><span class="line">SingleClass* Singleclass::_pInstace = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>3.定义一个返回值为静态指针的静态函数<br>非静态函数必须有对象才能调用，static进行修饰后可以直接调用，就能得到唯一对象的地址</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> SingleClass* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(_pInstance = <span class="literal">nullptr</span>)<span class="comment">//保证不会多次new，保证对象的唯一</span></span><br><span class="line">			_pInstance = <span class="keyword">new</span> SingleClass;</span><br><span class="line">		<span class="keyword">return</span> _pInstance;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">SingleClass</span>() &#123;cout&lt;&lt;<span class="string">&quot;Have done create!&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">	<span class="type">static</span> SingleClass* _pInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SingleClass* Singleclass::_pInstace = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure>

<h2 id="单例对象的销毁"><a href="#单例对象的销毁" class="headerlink" title="单例对象的销毁"></a>单例对象的销毁</h2><p>在类内部定义一个函数实现对唯一对象的delete</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> SingleClass* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(_pInstance = <span class="literal">nullptr</span>)<span class="comment">//保证不会多次new，保证对象的唯一</span></span><br><span class="line">			_pInstance = <span class="keyword">new</span> SingleClass;</span><br><span class="line">		<span class="keyword">return</span> _pInstance;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(_pInstance) <span class="keyword">delete</span> _pInstance;	</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">SingleClass</span>() &#123;cout&lt;&lt;<span class="string">&quot;Have done create!&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">	<span class="type">static</span> SingleClass* _pInstance;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>完整代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单例模式</span></span><br><span class="line"><span class="comment">//一个类只能生成一个对象，且是唯一的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.将构造函数私有化,唯一的对象既不能是栈对象，也不能是全局/静态对象</span></span><br><span class="line"><span class="comment">//2.在类中定义一个静态指针指向该类</span></span><br><span class="line"><span class="comment">//3.定义一个返回值为类指针的静态函数</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> SingleClass* <span class="title">getInstance</span><span class="params">()</span><span class="comment">//获取实例</span></span></span><br><span class="line"><span class="function">		<span class="comment">//非静态成员函数必须有对象才能调用，因此用static修饰使得无需对象（或者说是单例模式可用）</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (_pInstance == <span class="literal">nullptr</span>)<span class="comment">//保证不会进行多次new，保证对象的唯一</span></span><br><span class="line">			_pInstance = <span class="keyword">new</span> SingleClass;</span><br><span class="line">		<span class="keyword">return</span> _pInstance;<span class="comment">//在类中可以直接调用构造函数，因此可以进行new操作</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(_pInstance)</span><br><span class="line">		<span class="keyword">delete</span> _pInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">SingleClass</span>() &#123; cout &lt;&lt; <span class="string">&quot;Have done create!&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">SingleClass</span>()<span class="comment">//禁止外部delete</span></span><br><span class="line">	&#123;	cout &lt;&lt; <span class="string">&quot;Have done delete!&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">static</span> SingleClass* _pInstance;<span class="comment">//静态数据成员初始化在类外部</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SingleClass* SingleClass:: _pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SingleClass s3;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//SingleClass s2;</span></span><br><span class="line">	<span class="comment">//SingleClass* sc1 = new SingleClass; new表达式也会调用构造函数</span></span><br><span class="line">	SingleClass* sc2 = SingleClass::<span class="built_in">getInstance</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;abc&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//SingleClass s1;</span></span><br><span class="line">	SingleClass* sc3 = SingleClass::<span class="built_in">getInstance</span>();<span class="comment">//因为只有唯一的对象，所以只会创建一次</span></span><br><span class="line"></span><br><span class="line">	SingleClass::<span class="built_in">release</span>();<span class="comment">//delete操作时调用析构函数</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>对象友元的概念及应用</title>
    <url>/2023/11/16/%E5%AF%B9%E8%B1%A1%E5%8F%8B%E5%85%83%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="友元入门"><a href="#友元入门" class="headerlink" title="友元入门"></a>友元入门</h1><p>友元friend</p>
<blockquote>
<p>可以将一个函数或类进行friend修饰<br>修饰后的函数和类可以直接在外部访问调用本类的所有成员<br>友元的位置无需在意是否为public还是private</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//在类中用friend声明该函数，在外部定义</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span>;</span><br><span class="line">	<span class="comment">//在类中修饰另一个类，另一个类可直接访问该类对象的成员</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Line</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _ix;</span><br><span class="line">	<span class="type">int</span> _iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//friend修饰声明需要friend开头，定义时不需要带</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; p._ix;</span><br><span class="line">	cout &lt;&lt; p._iy &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; p._ix;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>具体实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> Point&amp; p1, <span class="type">const</span> Point&amp; p2)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span>;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Line</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">const</span> <span class="type">int</span>&amp; ix, <span class="type">const</span> <span class="type">int</span>&amp; iy)</span><br><span class="line">		:_ix(ix)</span><br><span class="line">		, _iy(iy)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Point(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _ix;</span><br><span class="line">	<span class="type">int</span> _iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; p._ix &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p._iy &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> Point&amp; p1, <span class="type">const</span> Point&amp; p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//hypot函数可以返回两个参数的平方后的和在开根的值，在应用两点之间距离很常用，包含库为math</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;distance:&quot;</span>&lt;&lt;<span class="built_in">hypot</span>(p1._ix - p2._ix, p1._iy - p2._iy) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; p._ix;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">display</span>(p1);</span><br><span class="line">	<span class="built_in">display</span>(p2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">distance</span>(p1, p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">Point</span>(<span class="type">int</span>,<span class="type">int</span>)</span><br><span class="line"><span class="type">Point</span>(<span class="type">int</span>,<span class="type">int</span>)</span><br><span class="line">(<span class="number">0</span> <span class="number">0</span>)</span><br><span class="line">(<span class="number">3</span> <span class="number">4</span>)</span><br><span class="line">distance:<span class="number">5</span></span><br></pre></td></tr></table></figure>

<h1 id="友元的使用"><a href="#友元的使用" class="headerlink" title="友元的使用"></a>友元的使用</h1><blockquote>
<p>在友元修饰类时，我们发现虽然代码没有语法错误，但在编译过程中往往无法执行</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> Point&amp; p1, <span class="type">const</span> Point&amp; p2)</span></span>;</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;distance:&quot;</span> &lt;&lt; <span class="built_in">hypot</span>(p1._ix - p2._ix, p1._iy - p2._iy) &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">/*friend class Line;*/</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Line::distance</span><span class="params">(<span class="type">const</span> Point&amp; p1, <span class="type">const</span> Point&amp; p2)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">const</span> <span class="type">int</span>&amp; ix, <span class="type">const</span> <span class="type">int</span>&amp; iy)</span><br><span class="line">		:_ix(ix)</span><br><span class="line">		, _iy(iy)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Point(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _ix;</span><br><span class="line">	<span class="type">int</span> _iy;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是因为在编译过程中，Line类作为Point的友元，虽然能够调用Point的成员，但因为Line声明定义在Point的前面，我们目前还不清楚Point类中成员都有什么，无法调用Point的成员</p>
</blockquote>
<blockquote>
<p>这种情况在我们一开始认识命名空间时也有遇到过，解决方法称为带有命名空间的函数声明</p>
</blockquote>
<h2 id="带有命名空间的函数声明"><a href="#带有命名空间的函数声明" class="headerlink" title="带有命名空间的函数声明"></a>带有命名空间的函数声明</h2><p>无法执行的案例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> front &#123;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		back::<span class="built_in">out</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> back&#123;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		front::<span class="built_in">display</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;out&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在编译过程中，front内部的print函数调用了back内的out函数，此时out函数和back命名空间还没有声明或者定义，编译器不知道调用的是什么，就出现了问题</p>
<p>由此可知问题可以概括为:当一个命名空间需要调用另一个命名空间的函数，而另一个命名空间也需要调用当前命名空间的函数</p>
<p>解决方法：将一开始命名空间内需要调用的另一个命名空间内函数提前声明</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只需提前定义命名空间在命名空间内声明该函数</span></span><br><span class="line"><span class="comment">//命名空间可以多次定义，这一特性使得他能够解决这一冲突问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> back &#123;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">out</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> front &#123;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		back::<span class="built_in">out</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> back&#123;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		front::<span class="built_in">display</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;out&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述解决方法我们称之为带有命名空间的函数声明</p>
<h2 id="类的前向声明"><a href="#类的前向声明" class="headerlink" title="类的前向声明"></a>类的前向声明</h2><p>根据带有命名空间的函数声明，我们可以用来解决当前Line类中不能调用Point成员的问题（前提条件是friend已经在Point类内部修饰好了Line）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> Point&amp; p1, <span class="type">const</span> Point&amp; p2)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">/*friend class Line;*/</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Line::distance</span><span class="params">(<span class="type">const</span> Point&amp; p1, <span class="type">const</span> Point&amp; p2)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">const</span> <span class="type">int</span>&amp; ix, <span class="type">const</span> <span class="type">int</span>&amp; iy)</span><br><span class="line">		:_ix(ix)</span><br><span class="line">		, _iy(iy)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Point(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _ix;</span><br><span class="line">	<span class="type">int</span> _iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; p._ix &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p._iy &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Line::distance</span><span class="params">(<span class="type">const</span> Point&amp; p1, <span class="type">const</span> Point&amp; p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;distance:&quot;</span> &lt;&lt; <span class="built_in">hypot</span>(p1._ix - p2._ix, p1._iy - p2._iy) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时我们发现将Point提前声明好，把下方实现部分加上作用域，整个代码就不会报错了（如果直接在Line内部实现，Line还是不知道Point内部有什么，类的前向声明仅仅是让该类知道该另一个的存在）</p>
<p>此时我们可以选择使用static修饰来调用distance函数，或者通过创建Line对象调用(不写static修饰了，省点字数)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">Line temp;</span><br><span class="line"></span><br><span class="line">temp.<span class="built_in">distance</span>(p1, p2);</span><br></pre></td></tr></table></figure>

<p> <strong>对于临时对象调用distance更便捷的写法</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Line</span>().<span class="built_in">distance</span>(p1,p2);</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">Point</span>(<span class="type">int</span>,<span class="type">int</span>)</span><br><span class="line"><span class="type">Point</span>(<span class="type">int</span>,<span class="type">int</span>)</span><br><span class="line">distance:<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>简便的原因</p>
<blockquote>
<p>一方面是作为临时对象，其生命周期明显缩短，由整个test函数的生命周期缩短到了一个语句的生命周期，另一方面，只需要写一行就可以实现两行的功能</p>
</blockquote>
<h3 id="friend直接修饰类的好处"><a href="#friend直接修饰类的好处" class="headerlink" title="friend直接修饰类的好处"></a>friend直接修饰类的好处</h3><p>在之前的代码中，我们用friend修饰了Line中distance函数，如果Line中有很多函数需要调用Point的成员，那么我们可以直接修饰类，此时可以大大降低代码的冗余</p>
<p>复杂写法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> Point&amp; pt1, <span class="type">const</span> Point&amp; pt2)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setPoint</span><span class="params">(Point&amp; pt, <span class="type">int</span> ix, <span class="type">int</span> iy)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">displayPoint</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">checkPoint</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Point&amp; pt)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">double</span> <span class="title">Line::distance</span><span class="params">(<span class="type">const</span> Point&amp; pt1, <span class="type">const</span> Point&amp; pt2)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Line::setPoint</span><span class="params">(Point&amp; pt, <span class="type">int</span> ix, <span class="type">int</span> iy)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Line::displayPoint</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Line::checkPoint</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span>;</span><br></pre></td></tr></table></figure>

<p>简便写法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> Point&amp; pt1, <span class="type">const</span> Point&amp; pt2)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setPoint</span><span class="params">(Point&amp; pt, <span class="type">int</span> ix, <span class="type">int</span> iy)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">displayPoint</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">checkPoint</span><span class="params">(<span class="type">const</span> Point&amp; p)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Point&amp; pt)</span></span>;</span><br><span class="line">	<span class="comment">//为了防止代码冗余，可以直接让Line类成为Point的友元(Line可以使用Point的所有成员)</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Line</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="友元特性"><a href="#友元特性" class="headerlink" title="友元特性"></a>友元特性</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line"> <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Line</span>;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<p>友元的单向性</p>
<blockquote>
<p>Point把Line认为是自己的朋友<br>Line因此可以随便用Point的东西<br>但是Line还没有认为Point是他的朋友，所以Line不许Point去用Line的东西</p>
</blockquote>
<p>友元的非传递性</p>
<blockquote>
<p>A认为B是他的朋友，B认为C是B的朋友，但是A如果不认识C那么A就不认为C是A的朋友。</p>
</blockquote>
<p>友元的非继承性</p>
<blockquote>
<p>a的父亲是A，B是A的朋友，但是B不一定是a的朋友	</p>
</blockquote>
<p><strong>友元最为特殊，不受public&#x2F;protected&#x2F;private影响，可以在类的任何位置声明</strong></p>
<h1 id="友元重构（友元运算符重载）"><a href="#友元重构（友元运算符重载）" class="headerlink" title="友元重构（友元运算符重载）"></a>友元重构（友元运算符重载）</h1><p>假如有一个类专门用来创建复数对象，我们想让两个复数对象相加</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Complex</span>()</span><br><span class="line">		:_dreal(<span class="number">0</span>)</span><br><span class="line">		,_dimage(<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> <span class="type">int</span>&amp; dreal, <span class="type">const</span> <span class="type">int</span>&amp; dimage)</span><br><span class="line">		:_dreal(dreal)</span><br><span class="line">		, _dimage(dimage)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Complex(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">Complex</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~Complex&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _dreal &lt;&lt; <span class="string">&#x27; + &#x27;</span> &lt;&lt; _dimage &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _dreal;</span><br><span class="line">	<span class="type">int</span> _dimage;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">	Complex c3 = c1 + c2;</span><br><span class="line">	c3.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们发现想要用c3保存好相加的结果，是不可行的，无法想string对象一样直接相加，那么string类中是如何实现的</p>
<h2 id="类重构"><a href="#类重构" class="headerlink" title="类重构"></a>类重构</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Complex <span class="keyword">operator</span> +(<span class="type">const</span> Complex&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">temp</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">	temp._dreal = <span class="keyword">this</span>-&gt;_dreal + rhs._dreal;</span><br><span class="line">	temp._dimage = <span class="keyword">this</span>-&gt;_dimage + rhs._dimage;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明</p>
<blockquote>
<p>1：+运算符为双目运算符，有左右两个参数，在类中重构时，this指针指向的对象为左参数，参数1指向右参数，this指针作为隐含的参数不需要我们在参数列表内加上他，所以在类中重构+运算符时，只有一个参数<br>2：函数类型不能带上引用符号，因为我们创建了一个临时对象，返回了右值，无法进行取地址操作，因此中间会多一步拷贝函数(因为一些优化，我们看不到拷贝函数的执行过程)</p>
</blockquote>
<p>输出结果</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Complex</span>(<span class="built_in">int</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">Complex</span>(<span class="built_in">int</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="number">1</span> + <span class="number">2</span>i</span><br><span class="line"><span class="number">3</span> + <span class="number">4</span>i</span><br><span class="line"><span class="built_in">Complex</span>(<span class="built_in">int</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="number">4</span> + <span class="number">6</span>i</span><br><span class="line">~<span class="built_in">Complex</span></span><br><span class="line">~<span class="built_in">Complex</span></span><br><span class="line">~<span class="built_in">Complex</span></span><br></pre></td></tr></table></figure>
<p>这种在类内部重构的方法一般来说不便于理解，在我们印象中，如果需要重构+应该自己写两个参数才对，而不是一个this指针来代替左参数</p>
<h2 id="全局重构"><a href="#全局重构" class="headerlink" title="全局重构"></a>全局重构</h2><p>顾名思义就是在全局区来定义函数，缺点是需要单独在类中开新的函数去访问数据成员</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Complex</span>()</span><br><span class="line">		:_dreal(<span class="number">0</span>)</span><br><span class="line">		,_dimage(<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> <span class="type">int</span>&amp; dreal, <span class="type">const</span> <span class="type">int</span>&amp; dimage)</span><br><span class="line">		:_dreal(dreal)</span><br><span class="line">		, _dimage(dimage)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Complex(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">Complex</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~Complex&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimage &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getdreal</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> _dreal;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getimage</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> _dimage;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _dreal;</span><br><span class="line">	<span class="type">int</span> _dimage;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局重构，需要函数来访问数据成员</span></span><br><span class="line">Complex <span class="keyword">operator</span> +(<span class="type">const</span> Complex&amp; lhs,<span class="type">const</span> Complex&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> dreal = lhs.<span class="built_in">getdreal</span>() + rhs.<span class="built_in">getdreal</span>();</span><br><span class="line">	<span class="type">int</span> dimage = lhs.<span class="built_in">getimage</span>() + rhs.<span class="built_in">getimage</span>();</span><br><span class="line"></span><br><span class="line">	<span class="function">Complex <span class="title">temp</span><span class="params">(dreal,dimage)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">	Complex c3 = c1 + c2;</span><br><span class="line">	c3.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Complex</span>(<span class="built_in">int</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">Complex</span>(<span class="built_in">int</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="number">1</span> + <span class="number">2</span>i</span><br><span class="line"><span class="number">3</span> + <span class="number">4</span>i</span><br><span class="line"><span class="built_in">Complex</span>(<span class="built_in">int</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="number">4</span> + <span class="number">6</span>i</span><br><span class="line">~<span class="built_in">Complex</span></span><br><span class="line">~<span class="built_in">Complex</span></span><br><span class="line">~<span class="built_in">Complex</span></span><br></pre></td></tr></table></figure>
<p>那么有什么方法既可以保证函数内参数列表有两个参数，而且不需要另起新的函数去访问数据成员呢</p>
<h2 id="友元重构"><a href="#友元重构" class="headerlink" title="友元重构"></a>友元重构</h2><p>用到刚刚掌握的友元，可以在类的外部定义，并且可以直接访问所有成员</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Complex</span>()</span><br><span class="line">		:_dreal(<span class="number">0</span>)</span><br><span class="line">		,_dimage(<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> <span class="type">int</span>&amp; dreal, <span class="type">const</span> <span class="type">int</span>&amp; dimage)</span><br><span class="line">		:_dreal(dreal)</span><br><span class="line">		, _dimage(dimage)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Complex(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">Complex</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~Complex&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimage &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> Complex <span class="keyword">operator</span> +(<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _dreal;</span><br><span class="line">	<span class="type">int</span> _dimage;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span> +(<span class="type">const</span> Complex&amp; lhs,<span class="type">const</span> Complex&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> dreal = lhs._dreal + rhs._dreal;</span><br><span class="line">	<span class="type">int</span> dimage = lhs._dimage + rhs._dimage;</span><br><span class="line"></span><br><span class="line">	<span class="function">Complex <span class="title">temp</span><span class="params">(dreal,dimage)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">	Complex c3 = c1 + c2;</span><br><span class="line">	c3.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Complex</span>(<span class="built_in">int</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">Complex</span>(<span class="built_in">int</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="number">1</span> + <span class="number">2</span>i</span><br><span class="line"><span class="number">3</span> + <span class="number">4</span>i</span><br><span class="line"><span class="built_in">Complex</span>(<span class="built_in">int</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="number">4</span> + <span class="number">6</span>i</span><br><span class="line">~<span class="built_in">Complex</span></span><br><span class="line">~<span class="built_in">Complex</span></span><br><span class="line">~<span class="built_in">Complex</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>对象应用：C++字符串和vector，对象的new与delete重构</title>
    <url>/2023/11/16/%E5%AF%B9%E8%B1%A1%E5%BA%94%E7%94%A8%EF%BC%9AC++%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8Cvector%EF%BC%8C%E5%AF%B9%E8%B1%A1%E7%9A%84new%E4%B8%8Edelete%E9%87%8D%E6%9E%84/</url>
    <content><![CDATA[<blockquote>
<h1 id="C-字符串和vector"><a href="#C-字符串和vector" class="headerlink" title="C++字符串和vector"></a>C++字符串和vector</h1><p>C++的字符串是一个对象，存在于std标准库中，是std标准库提供的自定义类类型<br>所占存储空间较大，40字节，数据成员一般都包含<br><img src="https://img-blog.csdnimg.cn/8ae2b398e6b74504945ca205e661acb8.png" alt="在这里插入图片描述"><br>vector是一种动态数组，也存在与std标准库中，一般都有size和capacity两个数据成员</p>
</blockquote>
<h2 id="字符串创建方式"><a href="#字符串创建方式" class="headerlink" title="字符串创建方式"></a>字符串创建方式</h2><p>默认创建</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1;</span><br></pre></td></tr></table></figure>
<p>C语言字符串创建</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">s2</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>指定长度的单个字符创建</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">s3</span><span class="params">(<span class="number">10</span>,<span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>只能用+拼接，+两边必须有一个是string类对象</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s4 = s3 + s2;</span><br><span class="line">s4 = s3 + <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">s4 = <span class="string">&quot;Hello&quot;</span> + s3;</span><br></pre></td></tr></table></figure>
<h3 id="字符串追加"><a href="#字符串追加" class="headerlink" title="字符串追加"></a>字符串追加</h3><p>追加特定长度字符</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s3.<span class="built_in">append</span>(<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>追加字符串</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s3.<span class="built_in">append</span>(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>追加string类对象</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s3.<span class="built_in">append</span>(s2);</span><br></pre></td></tr></table></figure>
<p>追加string类对象指定起始位置指定长度</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s3.<span class="built_in">apend</span>(s2,<span class="number">0</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<h2 id="字符串截断"><a href="#字符串截断" class="headerlink" title="字符串截断"></a>字符串截断</h2><p>&#x2F;&#x2F;参数1，pos，指定起始位置，参数2，len，指定长度</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout&lt;&lt;s3.<span class="built_in">substr</span>(<span class="number">0</span>,<span class="number">3</span>)&lt;&lt;endl;</span><br></pre></td></tr></table></figure>

<h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>C++的一种自动遍历模式，auto是自动推导，如果不带引用可能会浪费空间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; t: s3)</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;t&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="comment">//std::string 标准库提供的自定义类类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sp</span><span class="params">(string&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s:&quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s:sizeof:&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(s) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s.size:&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s.length:&quot;</span> &lt;&lt; s.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//三种构造函数</span></span><br><span class="line">	string s1;</span><br><span class="line">	<span class="function">string <span class="title">s2</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;<span class="comment">//c -to c++</span></span><br><span class="line">	<span class="function">string <span class="title">s3</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sp</span>(s1);</span><br><span class="line">	<span class="built_in">sp</span>(s2);</span><br><span class="line">	<span class="built_in">sp</span>(s3);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符串拼接</span></span><br><span class="line">	string s4 = s3 + s2;</span><br><span class="line">	s4 = s3 + <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">	s4 = <span class="string">&quot;Hello&quot;</span> + s3;</span><br><span class="line">	<span class="built_in">sp</span>(s4);</span><br><span class="line">	<span class="comment">//操作运算符两边必须有一个是string对象</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//追加	</span></span><br><span class="line">	s3.<span class="built_in">append</span>(<span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>);<span class="comment">//追加字符</span></span><br><span class="line">	<span class="built_in">sp</span>(s3);</span><br><span class="line">	s3.<span class="built_in">append</span>(<span class="string">&quot;Hello&quot;</span>);<span class="comment">//追加字符串</span></span><br><span class="line">	s3.<span class="built_in">append</span>(s2);<span class="comment">//追加string对象</span></span><br><span class="line">	s3.<span class="built_in">append</span>(s2,<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//追加特定起始位置特定长度的string对象</span></span><br><span class="line">	<span class="built_in">sp</span>(s3);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//截断</span></span><br><span class="line">	cout &lt;&lt; s3.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">3</span>) &lt;&lt; endl;<span class="comment">//参数一pos，参数2len</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; &amp;s1 &lt;&lt; endl;<span class="comment">//对对象取地址，得到是对象首地址，而不是字符串内容首地址</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//auto是自动推导，&amp;是引用，没有引用会浪费内存</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : s3)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; t &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="vector创建方式"><a href="#vector创建方式" class="headerlink" title="vector创建方式"></a>vector创建方式</h2><p>默认创建</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; numbers;</span><br></pre></td></tr></table></figure>
<p>初始化创建</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">numbers</span><span class="params">(<span class="number">10</span>,<span class="number">0</span>)</span></span>;<span class="comment">//创建大小为10的数组，数组元素皆为0，vector容量为10</span></span><br></pre></td></tr></table></figure>
<h2 id="vector操作"><a href="#vector操作" class="headerlink" title="vector操作"></a>vector操作</h2><p>添加元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">numbers.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>删除末尾元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">numbers.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure>
<p>代码实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;numbers:size:&quot;</span> &lt;&lt; numbers.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;numbers.capacity:&quot;</span> &lt;&lt; numbers.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; numbers;</span><br><span class="line">	<span class="built_in">vp</span>(numbers);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		numbers.<span class="built_in">push_back</span>(i);</span><br><span class="line">		<span class="built_in">vp</span>(numbers);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化操作</span></span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">11</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : a) cout &lt;&lt; t &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vp</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有一个需要我们值得注意的地方<br>vector对象在size为capacity时且还需要再添加新的元素时，会进行扩容</p>
</blockquote>
<blockquote>
<p>扩容步骤<br>申请一个原先x倍的空间<br>将旧空间的元素拷贝到新空间中<br>销毁旧空间，vector数组指向新空间</p>
</blockquote>
<blockquote>
<p>不同编译器在扩容时的倍率不同<br><img src="https://img-blog.csdnimg.cn/afe2227488484dd8a766c8e9e9937835.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cf97a0af338a4a8abb0bf2d25aded0d2.png" alt="在这里插入图片描述"><br>可以看到，一般的编译器扩容一般都是2倍扩容，而vs会以原来的1.5倍扩容</p>
</blockquote>
<blockquote>
<h1 id="new与delete重构"><a href="#new与delete重构" class="headerlink" title="new与delete重构"></a>new与delete重构</h1></blockquote>
<h2 id="new与delete的工作步骤"><a href="#new与delete的工作步骤" class="headerlink" title="new与delete的工作步骤"></a>new与delete的工作步骤</h2><p>new:</p>
<blockquote>
<p>1.调用operator new标准库函数申请未定义的空间<br>2.在该空间调用构造函数初始化对象<br>3.返回一个相应类型的指针<br>形式 void* operator new(size_t)</p>
</blockquote>
<p>delete</p>
<blockquote>
<p>调用析构函数<br>调用operator delete标准库函数回收对象空间</p>
</blockquote>
<p>代码实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Student</span>(<span class="type">const</span> <span class="type">char</span>* name,<span class="type">const</span> <span class="type">int</span>&amp; id)</span><br><span class="line">	:_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name) + <span class="number">1</span>]())</span><br><span class="line">	,_id(id)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_name,name);</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Have done create&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">delete</span>[] _name;</span><br><span class="line">		_name = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Student</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(_name) <span class="built_in">release</span>();</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;~Student&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; _name &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;id:&quot;</span> &lt;&lt; _id &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> sz)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Operator new&quot;</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">malloc</span>(sz);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Operator delete&quot;</span>&lt;&lt;endl;</span><br><span class="line">		<span class="built_in">free</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _name;</span><br><span class="line">	<span class="type">int</span> _id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>size_t 类型无需担心会不会申请出错</p>
<h2 id="new与delete重构应用"><a href="#new与delete重构应用" class="headerlink" title="new与delete重构应用"></a>new与delete重构应用</h2><p>生成栈对象的条件</p>
<blockquote>
<p>1.需要合法的构造函数<br>2.需要合法的析构函数</p>
</blockquote>
<p>生成堆对象的条件</p>
<blockquote>
<p>1.需要合法的operator new库函数<br>2.需要合法的构造函数</p>
</blockquote>
<h3 id="只能生成栈对象"><a href="#只能生成栈对象" class="headerlink" title="只能生成栈对象"></a>只能生成栈对象</h3><p>方法：将	operator new库函数私有化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Student</span>(<span class="type">const</span> <span class="type">char</span>* name,<span class="type">const</span> <span class="type">int</span>&amp; id)</span><br><span class="line">	:_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name) + <span class="number">1</span>]())</span><br><span class="line">	,_id(id)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_name,name);</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Have done create&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">delete</span>[] _name;</span><br><span class="line">		_name = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Student</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(_name) <span class="built_in">release</span>();</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;~Student&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; _name &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;id:&quot;</span> &lt;&lt; _id &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _name;</span><br><span class="line">	<span class="type">int</span> _id;</span><br><span class="line">	<span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> sz)</span></span>&#123;&#125;<span class="comment">//因为不需要创建堆对象，所以去重构的过程没有意义，只需要在private内声明即可</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* p)</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Student <span class="title">s1</span><span class="params">(<span class="string">&quot;Rose&quot;</span>,<span class="number">100</span>)</span></span>;</span><br><span class="line">	s1.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印结果</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">Have done create</span><br><span class="line"><span class="symbol">name:</span>Rose</span><br><span class="line"><span class="symbol">id:</span><span class="number">100</span></span><br><span class="line">~Student</span><br></pre></td></tr></table></figure>
<h3 id="只能生成堆对象"><a href="#只能生成堆对象" class="headerlink" title="只能生成堆对象"></a>只能生成堆对象</h3><p>方法：将析构函数私有化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Student</span>(<span class="type">const</span> <span class="type">char</span>* name,<span class="type">const</span> <span class="type">int</span>&amp; id)</span><br><span class="line">	:_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name) + <span class="number">1</span>]())</span><br><span class="line">	,_id(id)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_name,name);</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Have done create&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">delete</span>[] _name;</span><br><span class="line">		_name = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; _name &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;id:&quot;</span> &lt;&lt; _id &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> sz)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">malloc</span>(sz);</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Operator new&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> *p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">delete</span> p;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Operator delete&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _name;</span><br><span class="line">	<span class="type">int</span> _id;</span><br><span class="line">		~<span class="built_in">Student</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(_name) <span class="built_in">release</span>();</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;~Student&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Student* sp1 = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="string">&quot;Jackie&quot;</span>,<span class="number">101</span>);</span><br><span class="line">	sp1-&gt;<span class="built_in">print</span>();</span><br><span class="line">	sp1-&gt;<span class="keyword">delete</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test2</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时我们运行发现，在sp1-&gt;delete行出错，由此我们知道delete在销毁对象时调用了析构函数，而析构函数因为他的私有化而不可用，因此需要在public里新建一个函数用来替换delete操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;~<span class="built_in">Student</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时我们在内存检测时发现，对象本身没有被真正销毁，因此在destroy内部调用析构函数是错误的，应该直接进行delete操作，由于是在类的内部进行delete，可以访问析构函数，所以其操作是完全可行的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//new 和 delete 都是用operator的标准库函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Student</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">const</span> <span class="type">int</span>&amp; id)</span><br><span class="line">		:_name(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(name) + <span class="number">1</span>]())</span><br><span class="line">		, _id(id)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_name, name);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done create!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">delete</span>[] _name;</span><br><span class="line">		_name = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//直接调用析构函数不能销毁对象</span></span><br><span class="line">		<span class="comment">//this-&gt;~Student();</span></span><br><span class="line">		<span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; _name &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;id:&quot;</span> &lt;&lt; _id &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//这里的new和delete只针对该类的创建销毁，放在全局定义时则会变成对全部的new和delete重构</span></span><br><span class="line">	<span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> sz)</span><span class="comment">//不创建就会系统默认提供</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Operator new&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">malloc</span>(sz);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Operator delete&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">free</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _name;</span><br><span class="line">	<span class="type">int</span> _id;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">Student</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (_name) <span class="built_in">release</span>();</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done delete&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//创建堆对象的条件</span></span><br><span class="line">	<span class="comment">//需要合法的operator new库函数</span></span><br><span class="line">	<span class="comment">//需要合法的构造函数</span></span><br><span class="line">	Student* sp1 = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="string">&quot;Jackie&quot;</span>, <span class="number">100</span>);</span><br><span class="line">	sp1-&gt;<span class="built_in">print</span>();</span><br><span class="line">	sp1-&gt;<span class="built_in">destroy</span>();	</span><br><span class="line">	<span class="comment">//delete sp1; 因为私有化，delete不可用，需要优化</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//如何让一个类只能生成栈对象，不能生成堆对象</span></span><br><span class="line">	<span class="comment">//解决方案</span></span><br><span class="line">	<span class="comment">//将operator new库函数私有化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//new的工作步骤</span></span><br><span class="line">	<span class="comment">//调用operator new标准库函数申请未定义类型的空间</span></span><br><span class="line">	<span class="comment">//在该空间调用构造函数初始化对象</span></span><br><span class="line">	<span class="comment">//返回一个相应类型的指针</span></span><br><span class="line">	<span class="comment">//形式：void* operator new(size_t)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//delete工作步骤</span></span><br><span class="line">	<span class="comment">//调用析构函数</span></span><br><span class="line">	<span class="comment">//调用operator delete标准库函数回收对象空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">test2</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印结果</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Operator</span> <span class="built_in">new</span></span><br><span class="line">Have done <span class="keyword">create</span>!</span><br><span class="line"><span class="type">name</span>:Jackie</span><br><span class="line">id:<span class="number">100</span></span><br><span class="line">Have done <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">Operator</span> <span class="keyword">delete</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>对象的创建，初始化，销毁与拷贝</title>
    <url>/2023/11/16/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E9%94%80%E6%AF%81%E4%B8%8E%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h3 id="一些小细节"><a href="#一些小细节" class="headerlink" title="一些小细节"></a>一些小细节</h3><blockquote>
<p>在c++中，struct的功能已经进行扩展，基本和class的功能一致<br>唯一的区别就在于struct默认为public，class默认为private</p>
</blockquote>
<blockquote>
<h1 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h1></blockquote>
<h3 id="默认创建"><a href="#默认创建" class="headerlink" title="默认创建"></a>默认创建</h3><p>如果不需要任何附加条件，仅仅是创建一个对象的话，直接写是OK的<br>对象创建时，如果是带括号的无参创建，实际意义是函数声明（很奇怪，在函数内部还能声明函数）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setbrand</span><span class="params">(<span class="type">const</span> string&amp; brand)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		_brand = brand;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setprice</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; price)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		_price = price;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Computer p1;	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数成员声明再定义"><a href="#函数成员声明再定义" class="headerlink" title="函数成员声明再定义"></a>函数成员声明再定义</h3><p>函数成员可以像外部函数一样声明后再在类外部进行定义<br>但此时会有一个缺点，我们想要通过函数成员对数据成员进行修改时，数据成员不允许访问，所以一般的，如果想要在类外部定义函数成员，就需要像namespace的引用方法一样去定义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setbrand</span><span class="params">(<span class="type">const</span> string&amp; brand)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setprice</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; price)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类外部定义函数成员，通过作用域来引用，此时可以访问数据成员</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setbrand</span><span class="params">(<span class="type">const</span> string&amp; brand)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	_brand = brand;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::setprice</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; price)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	_price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Computer p1;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h1 id="对象初始化"><a href="#对象初始化" class="headerlink" title="对象初始化"></a>对象初始化</h1></blockquote>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><blockquote>
<p>构造函数就是用来初始化数据成员的<br>形式：没有返回值，非void，函数名与类名必须相同</p>
</blockquote>
<h3 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h3><blockquote>
<p>由系统提供的一个构造函数，因此即使对象的创建过程没有构造函数也是允许的</p>
</blockquote>
<h3 id="构造函数定义"><a href="#构造函数定义" class="headerlink" title="构造函数定义"></a>构造函数定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//构造函数一般写法</span></span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> string&amp; brand, <span class="type">const</span> <span class="type">int</span>&amp; price)<span class="comment">//建议取地址进行引用，可以节省内存占用</span></span><br><span class="line">	&#123;</span><br><span class="line">		_brand = brand;</span><br><span class="line">		_price = price;</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done structure!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">p1</span><span class="params">(<span class="string">&quot;HUAWEI&quot;</span>, <span class="number">4999</span>)</span></span>;<span class="comment">//因为有了显示构造函数，对象的创建也会发生改变</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上述方法只是一般构造函数写法，赋值并非是真正对数据成员初始化</p>
<h3 id="构造函数初始化对象"><a href="#构造函数初始化对象" class="headerlink" title="构造函数初始化对象"></a>构造函数初始化对象</h3><blockquote>
<p>对于类中数据成员的初始化，需要初始化列表进行完成<br>形式：在构造函数的头与构造函数的体之间，用 ‘ : ‘ 进行分隔</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Computer</span>(<span class="type">const</span> string&amp; brand, <span class="type">const</span> <span class="type">int</span>&amp; price)</span><br><span class="line">		:_brand(brand)<span class="comment">//如果brand为字符数组，可以在函数体内部通过strcpy或者memset对brand初始化</span></span><br><span class="line">		, _price(price)<span class="comment">//如果数据成员有多个，为了代码规范，就另起一行并以逗号分隔</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done structure!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>初始化数据成员的顺序与初始化列表无关，如果有两个数据成员ix和iy，当已经把ix初始化了后，用ix去初始化iy，iy的值仍为随机值</p>
</blockquote>
<blockquote>
<h1 id="对象的销毁"><a href="#对象的销毁" class="headerlink" title="对象的销毁"></a>对象的销毁</h1></blockquote>
<h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><blockquote>
<p>用于对象的销毁，系统会默认提供<br>形式：同构造函数一样，没有返回值<br>没有参数，函数名与类名相同，但前面带个 ‘~’，且析构函数只能有一个</p>
</blockquote>
<p>一般形式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> string&amp; brand, <span class="type">const</span> <span class="type">int</span>&amp; price)</span><br><span class="line">		:_brand(brand)</span><br><span class="line">		, _price(price)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done structure!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Computer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done Delete&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">p1</span><span class="params">(<span class="string">&quot;HUAWEI&quot;</span>, <span class="number">4999</span>)</span></span>;</span><br><span class="line">	p1.~<span class="built_in">Computer</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Have <span class="keyword">done</span> structure!</span><br><span class="line">Have <span class="keyword">done</span> Delete</span><br><span class="line">Have <span class="keyword">done</span> Delete</span><br></pre></td></tr></table></figure>
<p>可以看到输出了两次销毁，因此可以断定对象的销毁一定调用了析构函数，但调用析构函数并不一定代表对象的销毁</p>
<h3 id="不同类型对象销毁的次序"><a href="#不同类型对象销毁的次序" class="headerlink" title="不同类型对象销毁的次序"></a>不同类型对象销毁的次序</h3><blockquote>
<p>一般来说，对象的销毁时间与其生命周期有关<br>全局对象生命周期最长，在程序结束时才能销毁<br>静态对象在main函数结束时进行销毁<br>局部对象以及语句块中的变量在函数或代码块结束时进行销毁<br>堆对象在delete或者free时进行销毁，如果不写就会造成内存泄漏</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> string&amp; brand, <span class="type">const</span> <span class="type">int</span>&amp; price)</span><br><span class="line">		:_brand(brand)</span><br><span class="line">		, _price(price)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;Have done structure!&quot; &lt;&lt; endl;</span></span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Computer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;_brand&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt; <span class="string">&quot;Have done Delete&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Computer <span class="title">p4</span><span class="params">(<span class="string">&quot;All&quot;</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">p1</span><span class="params">(<span class="string">&quot;temp&quot;</span>, <span class="number">1</span>)</span></span>;<span class="comment">//局部变量</span></span><br><span class="line">	<span class="function"><span class="type">static</span> Computer <span class="title">p3</span><span class="params">(<span class="string">&quot;static&quot;</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line"></span><br><span class="line">	<span class="function">Computer <span class="title">p2</span><span class="params">(<span class="string">&quot;main&quot;</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	Computer* p5 = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="string">&quot;new&quot;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">delete</span> p5;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">temp Have done <span class="keyword">Delete</span></span><br><span class="line"><span class="keyword">new</span> Have done <span class="keyword">Delete</span></span><br><span class="line">main Have done <span class="keyword">Delete</span></span><br><span class="line"><span class="keyword">static</span> Have done <span class="keyword">Delete</span></span><br><span class="line"><span class="keyword">All</span> Have done <span class="keyword">Delete</span></span><br></pre></td></tr></table></figure>

<h3 id="析构函数的注意事项"><a href="#析构函数的注意事项" class="headerlink" title="析构函数的注意事项"></a>析构函数的注意事项</h3><blockquote>
<p>在Computer类中, 我们用string定义了_brand数据成员<br>如果非要采用字符数组的形式进行定义，会出现不确定数组大小是否合适的问题<br>改用指针的形式，通过new或者malloc分配空间可以解决该类问题 </p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* brand, <span class="type">const</span> <span class="type">int</span>&amp; price)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(brand)+<span class="number">1</span>]())<span class="comment">//通过new分配空间，后面加的小括号可以初始化_brand</span></span><br><span class="line">		, _price(price)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, brand);<span class="comment">//初始化brand</span></span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;Have done structure!&quot; &lt;&lt; endl;</span></span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Computer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;_brand&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt; <span class="string">&quot;Have done Delete&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此时又会出现新的问题，我们无法确定对象在销毁时，new分配的空间是否会被delete掉，通过内存检测工具发现是没有销毁掉的，因此我们需要对析构函数进行改进,而这一情况的讲解我会放在拷贝函数之后</p>
</blockquote>
<blockquote>
<h1 id="对象的拷贝"><a href="#对象的拷贝" class="headerlink" title="对象的拷贝"></a>对象的拷贝</h1></blockquote>
<blockquote>
<p>如果未显示定义，系统会默认提供一个拷贝函数<br>类中定义的固定形式</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Point类名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">const</span> Point&amp; p)</span><br><span class="line">	: _ix(p._ix)</span><br><span class="line">	,_iy(p._iy)</span><br><span class="line">	&#123;</span><br><span class="line">		;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _ix;</span><br><span class="line">	<span class="type">int</span> _iy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对象拷贝时的两种情况"><a href="#对象拷贝时的两种情况" class="headerlink" title="对象拷贝时的两种情况"></a>对象拷贝时的两种情况</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* brand, <span class="type">const</span> <span class="type">int</span>&amp; price)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(brand)+<span class="number">1</span>]())<span class="comment">//通过new分配空间，后面加的小括号可以初始化_brand</span></span><br><span class="line">		, _price(price)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, brand);<span class="comment">//初始化brand</span></span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;Have done structure!&quot; &lt;&lt; endl;</span></span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Computer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;_brand&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt; <span class="string">&quot;Have done Delete&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _brand &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		cout &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">point</span><span class="params">(Computer p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	p.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Computer <span class="title">retu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">pt</span><span class="params">(<span class="string">&quot;xx&quot;</span>, <span class="number">11</span>)</span></span>;</span><br><span class="line">	<span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">p1</span><span class="params">(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//对象未被创建时</span></span><br><span class="line">	Computer p2 = p1;</span><br><span class="line">	<span class="function">Computer <span class="title">p3</span><span class="params">(p1)</span></span>;</span><br><span class="line">	<span class="comment">//对象已被创建时</span></span><br><span class="line">	<span class="comment">//一般形式</span></span><br><span class="line">	<span class="function">Computer <span class="title">p4</span><span class="params">(<span class="string">&quot;2&quot;</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	p4 = p1;</span><br><span class="line">	<span class="comment">//实参传给形参</span></span><br><span class="line">	<span class="built_in">point</span>(p1);</span><br><span class="line">	<span class="comment">//返回值为对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过直接赋值的方式进行拷贝是浅拷贝，可以通过对赋值运算符重构使之成为深拷贝，同时注意函数传参如果采用实参传形参而不是引用的形式，那么传参的拷贝是浅拷贝</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Computer&amp; <span class="keyword">operator</span> = (<span class="type">const</span> Computer&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		Computer <span class="built_in">tmp</span>(<span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">		tmp._brand = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(p._brand) + <span class="number">1</span>]();</span><br><span class="line">		tmp._price = p._price;</span><br><span class="line">		<span class="built_in">strcpy</span>(tmp._brand, p._brand);</span><br><span class="line"></span><br><span class="line">		cout&lt;&lt;tmp._brand&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="string">&quot;Have done copy&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span>  tmp;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="构造拷贝函数时的两个注意点"><a href="#构造拷贝函数时的两个注意点" class="headerlink" title="构造拷贝函数时的两个注意点"></a>构造拷贝函数时的两个注意点</h2><p>1.为什么要使用&amp;</p>
<blockquote>
<p>如果不去使用&amp;符号，函数形式会变成Computer(const Computer p)<br>可以发现如果这么做，参数部分就是创建对象的形式，他会像一个栈递归一样无限创建下去，直到内存爆满<br>又因为进行了指针访问，可以认为形参对象就在类的内部，可以访问数据成员<br>使用指针也可以代替&amp;</p>
</blockquote>
<p>2.为什么需要const修饰</p>
<blockquote>
<p>首先需要了解左值和右值的概念<br>右值：没有写入内存的数据，不能进行取地址访问<br>左值：以及写入内存的数据，可以进行取地址访问<br>值得注意的是，函数如果有返回值，那么他的返回值就是临时变量，这里的临时变量就是右值，无法取地址访问<br>而通过const修饰，可以绑定右值</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a1 = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>&amp; a2 = a1;</span><br><span class="line"><span class="type">int</span>&amp; a3 = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; a4 = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以发现带有a3无法编译通过，去掉a3后，a1a2a4是可以编译通过的，因为1是右值，无法进行取地址访问，而通过const修饰绑定右值后就可以强行访问了<br>同理，函数返回值也是如此</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* brand, <span class="type">const</span> <span class="type">int</span>&amp; price)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(brand)+<span class="number">1</span>]())<span class="comment">//通过new分配空间，后面加的小括号可以初始化_brand</span></span><br><span class="line">		, _price(price)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, brand);<span class="comment">//初始化brand</span></span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;Have done structure!&quot; &lt;&lt; endl;</span></span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Computer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;_brand&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt; <span class="string">&quot;Have done Delete&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> Computer&amp; p)</span><br><span class="line">		:_brand(p._brand)<span class="comment">//此时采用地址赋值的形式，会在后文解释改进方法</span></span><br><span class="line">		,_price(p._price)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;_brand&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="string">&quot;Have done copy&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _brand &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		cout &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Computer <span class="title">retu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">pt</span><span class="params">(<span class="string">&quot;xx&quot;</span>, <span class="number">11</span>)</span></span>;</span><br><span class="line">	<span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">a1</span><span class="params">(<span class="string">&quot;1&quot;</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">	Computer a2 = <span class="built_in">retu</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果在拷贝函数定义过程中去掉了const修饰，a2是无法通过的，通过const绑定右值后即可进行</p>
</blockquote>
<h1 id="关于拷贝函数和析构函数的创建时机"><a href="#关于拷贝函数和析构函数的创建时机" class="headerlink" title="关于拷贝函数和析构函数的创建时机"></a>关于拷贝函数和析构函数的创建时机</h1><blockquote>
<p>前文在析构函数中提到，如果采用字符数组的形式以new分配空间， 在对象销毁时会发生内存泄漏<br>此时我们选择对析构函数进行改进</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">delete</span>[] _brand;</span><br><span class="line">	_brand = <span class="literal">nullptr</span>;<span class="comment">//c++11中更安全的置空方法</span></span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Computer</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">release</span>();</span><br><span class="line">	cout&lt;&lt; <span class="string">&quot;Have done Delete&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此时我们可以避免内存发生泄漏<br>我们通过sizeof查看类的大小时往往不是我们想要的结果，比如_brand为11个字节时，再加上int时，该类的大小实际却为16，这是因为一种对齐数的存在，在64位系统下类和结构体的大小必须为8的倍数，32位系统下必须为4的倍数</p>
</blockquote>
<blockquote>
<p>在拷贝函数中我们注意到，当时我们只是采用地址直接赋值的方式对新的对象复制<br>往往会发生以下情况</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">p1</span><span class="params">(<span class="string">&quot;HUAWEI&quot;</span>, <span class="number">4999</span>)</span></span>;</span><br><span class="line">	Computer p2 = p1;</span><br><span class="line">	p1.~<span class="built_in">Computer</span>();</span><br><span class="line">	p2.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此时我们发现在程序运行过程中发生崩溃，这是因为字符数组我们仅仅复制了地址过去，p1在销毁后，p2中brand的地址仍是p1的brand，brand的值为NULL，进行了非法访问<br>改进方法，在拷贝函数中，不再是复制地址，而是另开辟一个新的空间存放brand，通过strcpy将brand复制过去</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Computer</span>(<span class="type">const</span> Computer&amp; p)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(p._brand) + <span class="number">1</span>]())</span><br><span class="line">		,_price(p._price)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, p._brand);</span><br><span class="line"></span><br><span class="line">		cout&lt;&lt;_brand&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="string">&quot;Have done copy&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="全过程代码"><a href="#全过程代码" class="headerlink" title="全过程代码"></a>全过程代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* brand, <span class="type">const</span> <span class="type">int</span>&amp; price)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(brand)+<span class="number">1</span>]())<span class="comment">//通过new分配空间，后面加的小括号可以初始化_brand</span></span><br><span class="line">		, _price(price)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, brand);<span class="comment">//初始化brand</span></span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;Have done structure!&quot; &lt;&lt; endl;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">delete</span>[] _brand;</span><br><span class="line">		_brand = <span class="literal">nullptr</span>;<span class="comment">//c++11中更安全的置空方法</span></span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Computer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(_brand) <span class="built_in">release</span>();</span><br><span class="line">		cout&lt;&lt; <span class="string">&quot;Have done Delete&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> Computer&amp; p)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(p._brand) + <span class="number">1</span>]())</span><br><span class="line">		, _price(p._price)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; _brand &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="string">&quot;Have done copy&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//对赋值运算符重构</span></span><br><span class="line">	Computer&amp; <span class="keyword">operator</span> = (<span class="type">const</span> Computer&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		Computer <span class="built_in">tmp</span>(<span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">		tmp._brand = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(p._brand) + <span class="number">1</span>]();</span><br><span class="line">		tmp._price = p._price;</span><br><span class="line">		<span class="built_in">strcpy</span>(tmp._brand, p._brand);</span><br><span class="line"></span><br><span class="line">		cout&lt;&lt;tmp._brand&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="string">&quot;Have done copy&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span>  tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _brand &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		cout &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Computer <span class="title">p44</span><span class="params">(<span class="string">&quot;All&quot;</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">p1</span><span class="params">(<span class="string">&quot;temp&quot;</span>, <span class="number">1</span>)</span></span>;<span class="comment">//局部变量</span></span><br><span class="line">	<span class="function"><span class="type">static</span> Computer <span class="title">p3</span><span class="params">(<span class="string">&quot;static&quot;</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">point</span><span class="params">(Computer p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	p.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Computer <span class="title">retu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">pt</span><span class="params">(<span class="string">&quot;xx&quot;</span>, <span class="number">11</span>)</span></span>;</span><br><span class="line">	<span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">p1</span><span class="params">(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//对象未被创建时</span></span><br><span class="line">	Computer p2 = p1;</span><br><span class="line">	<span class="function">Computer <span class="title">p3</span><span class="params">(p1)</span></span>;</span><br><span class="line">	<span class="comment">//对象已被创建时(注意对象已存在时直接赋值为浅拷贝)</span></span><br><span class="line">	<span class="comment">//一般形式</span></span><br><span class="line">	<span class="function">Computer <span class="title">p4</span><span class="params">(p1)</span></span>;</span><br><span class="line">	p4 = p1;</span><br><span class="line">	<span class="comment">//实参传给形参</span></span><br><span class="line">	<span class="built_in">point</span>(p1);</span><br><span class="line">	<span class="comment">//返回值为对象</span></span><br><span class="line">	p4 = <span class="built_in">retu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">a1</span><span class="params">(<span class="string">&quot;1&quot;</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">	Computer a2 = <span class="built_in">retu</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">p1</span><span class="params">(<span class="string">&quot;HUAWEI&quot;</span>, <span class="number">4999</span>)</span></span>;</span><br><span class="line">	<span class="function">Computer <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">	p1.~<span class="built_in">Computer</span>();</span><br><span class="line">	p2.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line"></span><br><span class="line">	<span class="function">Computer <span class="title">p2</span><span class="params">(<span class="string">&quot;main&quot;</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	Computer* p5 = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="string">&quot;new&quot;</span>, <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">delete</span> p5;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test2</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test3</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对象的现代写法<br>深拷贝采用swap的优化方式，而浅拷贝不允许，解释：在函数实参传形参过程中，采用了浅拷贝，当前对象未被创建过，swap后临时变量地址未知，delete时会出现问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> <span class="type">char</span>* brand, <span class="type">const</span> <span class="type">int</span>&amp; price)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(brand) + <span class="number">1</span>]())<span class="comment">//通过new分配空间，后面加的小括号可以初始化_brand</span></span><br><span class="line">		, _price(price)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, brand);<span class="comment">//初始化brand</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have done structure!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &amp;_brand &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">delete</span>[] _brand;</span><br><span class="line">		_brand = <span class="literal">nullptr</span>;<span class="comment">//c++11中更安全的置空方法</span></span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Computer</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (_brand) <span class="built_in">release</span>();</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Have do ne Delete&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Computer&amp; p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		std::<span class="built_in">swap</span>(<span class="keyword">this</span>-&gt;_brand, p._brand);</span><br><span class="line">		std::<span class="built_in">swap</span>(<span class="keyword">this</span>-&gt;_price, p._price);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Computer</span>(<span class="type">const</span> Computer&amp; p)</span><br><span class="line">		:_brand(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(p._brand) + <span class="number">1</span>]())</span><br><span class="line">		,_price(p._price)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(_brand, p._brand);</span><br><span class="line">	&#125;</span><br><span class="line">	Computer&amp; <span class="keyword">operator</span> = (<span class="type">const</span> Computer&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == &amp;p) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">		<span class="function">Computer <span class="title">tmp</span><span class="params">(p._brand, p._price)</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">swap</span>(tmp);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//返回类自己</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; _brand &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		cout &lt;&lt; _price &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _brand;</span><br><span class="line">	<span class="type">int</span> _price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Computer <span class="title">p44</span><span class="params">(<span class="string">&quot;All&quot;</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">p1</span><span class="params">(<span class="string">&quot;temp&quot;</span>, <span class="number">1</span>)</span></span>;<span class="comment">//局部变量</span></span><br><span class="line">	<span class="function"><span class="type">static</span> Computer <span class="title">p3</span><span class="params">(<span class="string">&quot;static&quot;</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Computer a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Computer <span class="title">retu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">pt</span><span class="params">(<span class="string">&quot;xx&quot;</span>, <span class="number">11</span>)</span></span>;</span><br><span class="line">	<span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">p1</span><span class="params">(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//对象未被创建时</span></span><br><span class="line">	Computer p2 = p1;</span><br><span class="line">	<span class="function">Computer <span class="title">p3</span><span class="params">(p1)</span></span>;</span><br><span class="line">	<span class="comment">//对象已被创建时(注意对象已存在时直接赋值为浅拷贝，使用重构改为深拷贝)</span></span><br><span class="line">	<span class="comment">//一般形式</span></span><br><span class="line">	<span class="function">Computer <span class="title">p4</span><span class="params">(p1)</span></span>;</span><br><span class="line">	p4 = p1;</span><br><span class="line">	<span class="comment">//实参传给形参,浅拷贝</span></span><br><span class="line">	<span class="built_in">print</span>(p1);</span><br><span class="line">	<span class="comment">//返回值为对象</span></span><br><span class="line">	p4 = <span class="built_in">retu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">a1</span><span class="params">(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">	Computer a2 = <span class="built_in">retu</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">p1</span><span class="params">(<span class="string">&quot;HUAWEI&quot;</span>, <span class="number">4999</span>)</span></span>;</span><br><span class="line">	<span class="function">Computer <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">	p1.~<span class="built_in">Computer</span>();</span><br><span class="line">	p2.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//test0();</span></span><br><span class="line"></span><br><span class="line">	<span class="function">Computer <span class="title">p2</span><span class="params">(<span class="string">&quot;main&quot;</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	Computer* p5 = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="string">&quot;new&quot;</span>, <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">delete</span> p5;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test2();</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//test3();</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>幸运数的定义与判断</title>
    <url>/2023/11/16/%E5%B9%B8%E8%BF%90%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%85%B6%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h1 id="幸运数的定义与判断"><a href="#幸运数的定义与判断" class="headerlink" title="幸运数的定义与判断"></a>幸运数的定义与判断</h1><hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天作为我校一场比赛的压轴题出场，但可以通过<strong>骗分</strong>得到可观的分数，本人所用方法虽不是骗分，但本质上也是骗过系统得分。</p>
<ul>
<li>原题链接：<a href="https://ac.nowcoder.com/acm/contest/44011/J">牛客网幸运数</a></li>
<li><strong>幸运数的定义</strong>：<br> 1、对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>2、然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>3、如果这个过程 结果为 1，那么这个数就是幸运数。</li>
</ul>
<p><strong>e.g:</strong> </p>
<p> 19–&gt;1,9<br> 1²+9²&#x3D;82<br> 82–&gt;8,2<br> 8²+2²&#x3D;68<br> 68–&gt;6,8<br> 6²+8²&#x3D;100<br> 100–&gt;1,0,0<br> 1²+0²+0²&#x3D;1<br> 此时和为1，无需再往下运算，可认为19为幸运数</p>
<p> <strong>判断思路</strong><br> 1.在输入相应的n值后，利用while循环以及<strong>计数器</strong>算出该数为几位数<br>         2.利用<strong>数组</strong>a[some]存放该数的每一位<br>         3.通过for循环将此时的各位数平方求和，同时讲该值赋给n，让n进入下一次循环（<strong>在赋给n的同时定义的求和sum也要清零</strong>）<br>         4.</p>
<ul>
<li>在每次循环结束前判断n是否为1，若为1则停止循环，输出true</li>
<li>若不为幸运数，则需要在进行无数次循环后跳出循环，所以我们要引入新的计数器cnt2来记录循环次数，在计数器达到某一特定值时选择终止循环，并输出false，<strong>该方法仅适用于一些数比较小的情况</strong>。</li>
</ul>
<h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-引入库"><a href="#1-引入库" class="headerlink" title="1.引入库"></a>1.引入库</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="2-读入数据"><a href="#2-读入数据" class="headerlink" title="2.读入数据"></a>2.读入数据</h2><p>代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>,cnt2 = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(n != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cnt2++;</span><br><span class="line">		<span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a[cnt++] = n%<span class="number">10</span>;</span><br><span class="line">			n /= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> i;</span><br><span class="line">		<span class="keyword">for</span>(i =<span class="number">0</span>;i &lt; cnt;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			sum += a[i]*a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		n = sum;</span><br><span class="line">		sum = <span class="number">0</span>;</span><br><span class="line">		cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>( n == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(cnt2==<span class="number">30</span>)</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(cnt2==<span class="number">30</span>)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 通过骗过系统的测试点来得到分，虽无耻，但有用</p>
<p> <img src="https://img-blog.csdnimg.cn/01f9aceed70746fa89e2a19d40a6bbb3.jpeg#pic_center" alt="胸针骗过世界来到石头门线，我骗过系统拿到满分，本质不是一样的嘛"></p>
]]></content>
  </entry>
  <entry>
    <title>数据结构：字典树Trie</title>
    <url>/2023/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%AD%97%E5%85%B8%E6%A0%91Trie/</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用来高效快速存储和查找字符串集合的一种数据结构</p>
<h3 id="存储图解"><a href="#存储图解" class="headerlink" title="存储图解"></a>存储图解</h3><p>假设有若干个字符串<img src="https://img-blog.csdnimg.cn/58784a9e850b49d2be1ee0784a278569.jpeg#pic_center" alt="在这里插入图片描述"></p>
<p>先创建了一个根结点root，代指字符串集合的开头，对第一个字符串abcdef存储就如上图所示</p>
<p><img src="https://img-blog.csdnimg.cn/67f602a68f8640ffb3eccc33e23aea0a.jpeg#pic_center" alt="在这里插入图片描述"></p>
<p>当存储abdef时，一直走到b都和abcdef相同，于是在b点另开一个分支存储之后的def</p>
<p>当存储aced时，一直走到a都和abcdef相同，于是在a点另开一个分支存储之后的ced</p>
<p>以此类推</p>
<p>…</p>
<p>我们就得到能够以树的形式存储一个字符串集合</p>
<p><img src="https://img-blog.csdnimg.cn/f7f2a649cfea480da72adabdd70669bc.jpeg#pic_center" alt="在这里插入图片描述"></p>
<p>并且在每个字符串的结尾的字母都标记一下，表示以该字母结尾的节点是存在一个字符串的</p>
<p>如果有类似abc这样的字符串，也要在c点标记一下</p>
<h3 id="查找图解"><a href="#查找图解" class="headerlink" title="查找图解"></a>查找图解</h3><p>如果要查找一个不存在的字符串，比如abcf</p>
<p><img src="https://img-blog.csdnimg.cn/e41117918c5f40ea8c734feee1571b07.jpeg#pic_center" alt="在这里插入图片描述"></p>
<p>沿着树枝一直走，走到c之后发现没有f对应的路径，那么就说明该字符串不存在</p>
<p>或者查找一个字符串，该字符串在存储里的字符串不存在，但属于某个存储的字符串的前缀</p>
<p>比如abcdef中的abc作为要查找的字符串</p>
<p>沿着树枝走，发现c点没有标记，即使有对应对应路径也不能说明该字符串存在</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>];<span class="comment">//代表每个节点可以有26个子节点</span></span><br><span class="line"><span class="type">int</span> cnt[N];<span class="comment">//以当前这个点结尾的字符串有多少个</span></span><br><span class="line"><span class="type">int</span> idx;<span class="comment">//操作次数，当前用到了哪个下标</span></span><br><span class="line"><span class="comment">//下标是0的点，既是根节点，也是空节点</span></span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span><span class="comment">//插入新字符串</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> p = <span class="number">0</span>;<span class="comment">//根节点</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;str[i];i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;<span class="comment">//存储编号，字母a-&#x27;a&#x27;就变成了0，b就变成了1</span></span><br><span class="line">		<span class="comment">//如果说该节点之后没有这个字母，即son[p][u] == 0</span></span><br><span class="line">		<span class="keyword">if</span> (!son[p][u]) son[p][u] = ++idx;<span class="comment">//把这个节点加进去</span></span><br><span class="line">		p = son[p][u];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cnt[p]++;<span class="comment">//表示以该点结尾的数量又多了一个	</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> str[])</span><span class="comment">//查询字符串</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;str[i];i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果不存在直接返回0</span></span><br><span class="line">		p = son[p][u] ;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> cnt[p];<span class="comment">//返回以该节点结尾的单词数量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span> (n--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> op[<span class="number">2</span>];<span class="comment">//操作类型+空格</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, op,str);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span>) <span class="built_in">insert</span>(str);<span class="comment">//插入操作</span></span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(str));<span class="comment">//查询操作</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><p><img src="https://img-blog.csdnimg.cn/566204cf449b408bae2f2b3705ea5ab7.png#pic_center" alt="在这里插入图片描述"></p>
<p>暴力做法</p>
<p>利用两重for循环来寻找最大异或</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暴力法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i;++j)</span><br><span class="line">		res = <span class="built_in">max</span>(res, (arr[i] ^ arr[j]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>能被看作是trie树的原因</p>
<p>因为运算方式是异或，而异或看的是二进制，如果两个数的二进制某一位相同则为0，不同则为1</p>
<p>因此可以用31个长度的数组存储两个数的每一位</p>
<p>且对二进制从左往右看时，假设一个数为0，可以用trie树查询最高位为1的数，再找下一位为1的数，以此类推，便可以快速找出异或后的最大数</p>
<p> <img src="https://img-blog.csdnimg.cn/650f3938ce2e437ea3371bcadf94f7aa.jpeg#pic_center" alt="在这里插入图片描述"></p>
<p>因此，对某个数查询能够在存储里的数寻找最大异或时，可以从最高位依次查找每一位相异的数</p>
<p>实现代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = N * <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[N];</span><br><span class="line"><span class="type">int</span> son[M][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> p = <span class="number">0</span>;<span class="comment">//尾节点</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>;i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u = x &gt;&gt; i &amp; <span class="number">1</span>;<span class="comment">//得到该位</span></span><br><span class="line">		<span class="keyword">if</span> (!son[p][u]) son[p][u] = ++idx;</span><br><span class="line">		p = son[p][u];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>;i &gt;= <span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u = x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">		<span class="comment">//如果该位相异的数存在</span></span><br><span class="line">		<span class="keyword">if</span> (son[p][!u])</span><br><span class="line">		&#123;</span><br><span class="line">			p = son[p][!u];</span><br><span class="line">			res = res * <span class="number">2</span> + !u;<span class="comment">//相当于把所有的位数进一再加上u</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			p = son[p][u];</span><br><span class="line">			res = res * <span class="number">2</span> + u;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">insert</span>(arr[i]);</span><br><span class="line">		<span class="comment">//先插入在查询，防止第一次查询不到的情况</span></span><br><span class="line">		<span class="type">int</span> t = <span class="built_in">query</span>(arr[i]);</span><br><span class="line"></span><br><span class="line">		res = <span class="built_in">max</span>(res, (arr[i] ^ t));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>洛谷P1786 帮贡排序</title>
    <url>/2023/11/16/%E6%B4%9B%E8%B0%B7P1786%20%E5%B8%AE%E8%B4%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<h3 id="难度与考察点"><a href="#难度与考察点" class="headerlink" title="难度与考察点"></a>难度与考察点</h3></blockquote>
<p>小模拟题，考察sort函数对结构体的排序，c语言里可以使用qsort函数进行相类似的操作，但会麻烦一点</p>
<blockquote>
<h3 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h3></blockquote>
<p> 1.对各个数据进行输入的同时记录一下他的id位置，用pre保存，在排序时需要用到，因为该题有一个很坑的地方 — 相同等级下原先靠前的要放在前面<br> 2.第一次排序时根据他的分数排序，如果分数相同则看pre<br> 3.排序后对各个分区重新划分职位<br> 4.通过map将string映射为int，在第二次排序时根据第一关键字职位次序与第二关键字等级以及隐藏的第三关键字pre进行排序<br> 4.最后将每个人的姓名职位等级输出即可<br> 5.值得注意的是sort中cmp函数的实现里，除等级和分数要从大到小排序外，其余都是从小到大排序</p>
<blockquote>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3></blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">111</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bang</span> &#123;</span><br><span class="line">	string name;</span><br><span class="line">	string pos;</span><br><span class="line">	<span class="type">int</span> score;</span><br><span class="line">	<span class="type">int</span> level;</span><br><span class="line">	<span class="type">int</span> pre;<span class="comment">//记录原先位置 </span></span><br><span class="line">&#125;p[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">map &lt;string, <span class="type">int</span>&gt; pos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> bang a, <span class="type">const</span> bang b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.score != b.score)</span><br><span class="line">		<span class="keyword">return</span> a.score &gt; b.score;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> a.pre &lt; b.pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">const</span> bang a, <span class="type">const</span> bang b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.pos != b.pos)</span><br><span class="line">		<span class="keyword">return</span> pos[a.pos] &lt; pos[b.pos];</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (a.level != b.level) <span class="keyword">return</span> a.level &gt; b.level;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> a.pre &lt; b.pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; p[i].name &gt;&gt; p[i].pos &gt;&gt; p[i].score &gt;&gt; p[i].level,p[i].pre = i;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(p + <span class="number">4</span>, p + n + <span class="number">1</span>, cmp);<span class="comment">//前三位是不能排序的</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//依据帮贡来重新划分职位</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">1</span>) p[i].pos = <span class="string">&quot;BangZhu&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">2</span> &amp;&amp; i &lt;= <span class="number">3</span>) p[i].pos = <span class="string">&quot;FuBangZhu&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">4</span> &amp;&amp; i &lt;= <span class="number">5</span>) p[i].pos = <span class="string">&quot;HuFa&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">6</span> &amp;&amp; i &lt;= <span class="number">9</span>) p[i].pos = <span class="string">&quot;ZhangLao&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">10</span> &amp;&amp; i &lt;= <span class="number">16</span>) p[i].pos = <span class="string">&quot;TangZhu&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">17</span> &amp;&amp; i &lt;= <span class="number">41</span>) p[i].pos = <span class="string">&quot;JingYing&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> p[i].pos = <span class="string">&quot;BangZhong&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过字符串映射数字来进行职位排序</span></span><br><span class="line">	pos[<span class="string">&quot;BangZhu&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">	pos[<span class="string">&quot;FuBangZhu&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">	pos[<span class="string">&quot;HuFa&quot;</span>] = <span class="number">3</span>;</span><br><span class="line">	pos[<span class="string">&quot;ZhangLao&quot;</span>] = <span class="number">4</span>;</span><br><span class="line">	pos[<span class="string">&quot;TangZhu&quot;</span>] = <span class="number">5</span>;</span><br><span class="line">	pos[<span class="string">&quot;JingYing&quot;</span>] = <span class="number">6</span>;</span><br><span class="line">	pos[<span class="string">&quot;BangZhong&quot;</span>] = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(p + <span class="number">4</span>, p + n + <span class="number">1</span>, cmp2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; p[i].name &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p[i].pos &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p[i].level&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>算法基础-数据结构：栈和队列</title>
    <url>/2023/11/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="栈的特点"><a href="#栈的特点" class="headerlink" title="栈的特点"></a>栈的特点</h3><p>先进后出，和一个半封闭容器类似，放了一堆肉饼，先放的肉饼后倒出来</p>
<p>stk[n]数组代表栈，tt代表栈点</p>
<h3 id="关于栈的插入"><a href="#关于栈的插入" class="headerlink" title="关于栈的插入"></a>关于栈的插入</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//插入元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stk[++t] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于栈的删除"><a href="#关于栈的删除" class="headerlink" title="关于栈的删除"></a>关于栈的删除</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">( )</span><span class="comment">//删除元素，即弹出一个肉饼</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tt--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于判断栈是否为空"><a href="#关于判断栈是否为空" class="headerlink" title="关于判断栈是否为空"></a>关于判断栈是否为空</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">stkempty</span><span class="params">()</span><span class="comment">//判断栈是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (tt &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总实现代码"><a href="#总实现代码" class="headerlink" title="总实现代码"></a>总实现代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stk[N], tt;<span class="comment">//stk表示栈，tt表示栈点下标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//插入元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stk[++t] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">( )</span><span class="comment">//删除元素，即弹出一个肉饼</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">stkempty</span><span class="params">()</span><span class="comment">//判断栈是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (tt &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//栈顶 stk[tt]</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>问题描述</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">有一序列，输出每个数左边第一个比他小的数，没有则输出<span class="string">-1</span></span><br></pre></td></tr></table></figure>

<p>诀窍：在while循环判断条件时，只要想该数不符合条件则跳过即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找出每个数左边离它最近的比它大/小的数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stk[N], tt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//暴力法</span></span><br><span class="line"><span class="comment">//void vio(int n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	for (int i = 0;i &lt; n;;++i)//对每个数的列举</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		int j = 0;</span></span><br><span class="line"><span class="comment">//		for (j = i -1;j &gt;= 0;--j)</span></span><br><span class="line"><span class="comment">//		&#123;</span></span><br><span class="line"><span class="comment">//			if (stk[i] &gt; stk[j])</span></span><br><span class="line"><span class="comment">//			&#123;</span></span><br><span class="line"><span class="comment">//				cout &lt;&lt; stk[j]&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line"><span class="comment">//				break;</span></span><br><span class="line"><span class="comment">//			&#125;</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line"><span class="comment">//		if (j == -1) cout &lt;&lt; -1 &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单调栈法</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>, &amp;x);</span><br><span class="line">		<span class="keyword">while</span> (tt &amp;&amp; stk[tt] &gt;= x) tt--;</span><br><span class="line">		<span class="keyword">if</span> (tt) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, stk[tt]);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">		stk[++tt] = x;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="队列的特点"><a href="#队列的特点" class="headerlink" title="队列的特点"></a>队列的特点</h3><p>先进先出，和枪上膛相似，先插进去的子弹先打出来</p>
<p>q[N]表示队列，hh表示对头，tt表示队尾 </p>
<h3 id="关于队列的插入"><a href="#关于队列的插入" class="headerlink" title="关于队列的插入"></a>关于队列的插入</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//队尾插入元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	q[++tt] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于队列的删除（弹出）"><a href="#关于队列的删除（弹出）" class="headerlink" title="关于队列的删除（弹出）"></a>关于队列的删除（弹出）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">( )</span><span class="comment">//在队头弹出元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	hh++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于队列的判断是否为空"><a href="#关于队列的判断是否为空" class="headerlink" title="关于队列的判断是否为空"></a>关于队列的判断是否为空</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">qempty</span><span class="params">()</span><span class="comment">//判断是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (hh &lt;= tt) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总实现代码-1"><a href="#总实现代码-1" class="headerlink" title="总实现代码"></a>总实现代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N], hh, tt = <span class="number">-1</span>;<span class="comment">//hh表示队头，tt表示队尾 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//队尾插入元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	q[++tt] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">( )</span><span class="comment">//在对头弹出元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	hh++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">qempty</span><span class="params">()</span><span class="comment">//判断是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (hh &lt;= tt) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对头元素q[hh],队尾元素q[tt]</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求出一定序列中，滑动窗口里的最小值和最大值</span></span><br><span class="line"><span class="comment">//第一行输出最小值</span></span><br><span class="line"><span class="comment">//第二行输出最大值 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N],q[N],hh,tt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n,&amp;k);</span><br><span class="line"></span><br><span class="line">	hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//判断队头是否滑出窗口</span></span><br><span class="line">		<span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">		<span class="comment">//出队</span></span><br><span class="line">		<span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--;<span class="comment">//只要队尾比他大</span></span><br><span class="line">		<span class="comment">//就跳出队列，因为之后的滑动窗口都不会选择这个队尾作为输出结果</span></span><br><span class="line">		q[++tt] = i;<span class="comment">//下标入队，从队尾入</span></span><br><span class="line">        <span class="comment">//放在输出前的原因是</span></span><br><span class="line">		<span class="comment">//队列可能一个不剩，那么的数就是最小值</span></span><br><span class="line">		<span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//判断队头是否滑出窗口</span></span><br><span class="line">		<span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">		<span class="comment">//出队</span></span><br><span class="line">		<span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt--;<span class="comment">//只要队尾比他大</span></span><br><span class="line">		<span class="comment">//就跳出队列，因为之后的滑动窗口都不会选择这个队尾作为输出结果</span></span><br><span class="line">		q[++tt] = i;<span class="comment">//下标入队，从队尾入</span></span><br><span class="line">		<span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>算法基础-数据结构：链表</title>
    <url>/2023/11/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="链表与邻链表"><a href="#链表与邻链表" class="headerlink" title="链表与邻链表"></a>链表与邻链表</h2><p>0.传统的链表创建方式在运算速度上非常慢</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">  	<span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ListNode</span>* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">struct</span> <span class="built_in">ListNode</span>();<span class="comment">//new一次很慢,因为new是动态分配 </span></span><br></pre></td></tr></table></figure>

<h3 id="1-数组模拟单链表"><a href="#1-数组模拟单链表" class="headerlink" title="1.数组模拟单链表"></a>1.数组模拟单链表</h3><p>数组模拟链表，也成为静态链表</p>
<p>链表的实现方式：<br><img src="https://img-blog.csdnimg.cn/a32c163e3b6545f9b3663d34b6cc5fef.png#pic_center" alt="在这里插入图片描述"></p>
<p>一开始用head指针存储链表头节点，head之后就是空指针</p>
<p>之后让head之后的指针指向新节点，以此类推，直到最后一个节点，再让下一个节点指向空指针</p>
<p>定义e[n]为该节点的值，ne[n]为该节点的next指针</p>
<p><img src="https://img-blog.csdnimg.cn/5adf1592306146beac73a8098e29ed0a.png#pic_center" alt="在这里插入图片描述"></p>
<p>e[0] &#x3D; 3,ne[0] &#x3D; 1(指节点1)</p>
<p>e[1] &#x3D; 5,ne[1] &#x3D; 2(指节点2)</p>
<p>…</p>
<p>e[3] &#x3D; 9,ne[3] &#x3D; -1(空节点)</p>
<h4 id="如何在头节点插入一个节点（算法题常用）"><a href="#如何在头节点插入一个节点（算法题常用）" class="headerlink" title="如何在头节点插入一个节点（算法题常用）"></a>如何在头节点插入一个节点（算法题常用）</h4><p>链表需要数形结合<br><img src="https://img-blog.csdnimg.cn/48157884963444d88af4026c22a21709.png#pic_center" alt="在这里插入图片描述"></p>
<p>1.将所想要插入的值的next指针指向0节点</p>
<p>2.将head的next指针指向该值</p>
<p>3.存储该值</p>
<p>代码实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> &amp;x)</span><span class="comment">//把一个值插入到头节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[idx] = head;<span class="comment">//将该值的指针指向head所指的next节点	</span></span><br><span class="line">	head = idx;<span class="comment">//将head指向next节点的指针删掉，改成指向该值的指针</span></span><br><span class="line">	e[idx] = x;<span class="comment">//存储该值</span></span><br><span class="line">	idx++;<span class="comment">//该点已使用过，所以将idx改为下一节点下标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="如何在任意位置插入一个值"><a href="#如何在任意位置插入一个值" class="headerlink" title="如何在任意位置插入一个值"></a>如何在任意位置插入一个值</h4><p>1.首先需要直到该位置的上一节点k</p>
<p>2.与头节点插入类似，先让该值的next变为k的next指针</p>
<p>3.让k的next指针指向该节点</p>
<p>4.存储该值</p>
<p>实现代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span>&amp; k, <span class="type">int</span>&amp; x)</span><span class="comment">//一般插入节点,将x插入到k节点之后</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[idx] = ne[k];<span class="comment">//将该值的next改为k的next</span></span><br><span class="line">	ne[k] = idx;<span class="comment">//k的next指向该值</span></span><br><span class="line">	e[idx] = x;<span class="comment">//存储x</span></span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="如何删除一个节点"><a href="#如何删除一个节点" class="headerlink" title="如何删除一个节点"></a>如何删除一个节点</h4><p>链表节点的删除本质上是跳过该节点</p>
<p>实现代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span>&amp; k)</span><span class="comment">//删除某节点后面的点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[k] = ne[ne[k]];<span class="comment">//ne[ne[k]]的意思就是该节点的next的next</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总实现代码"><a href="#总实现代码" class="headerlink" title="总实现代码"></a>总实现代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N];<span class="comment">//head头节点，e节点值，ne指next指针</span></span><br><span class="line"><span class="type">int</span> idx;<span class="comment">//存储当前用到哪个节点,下标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span><span class="comment">//初始化链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	head = <span class="number">-1</span>;</span><br><span class="line">	idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> &amp;x)</span><span class="comment">//把一个值插入到头节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[idx] = head;<span class="comment">//将该值的指针指向head所指的next节点	</span></span><br><span class="line">	head = idx;<span class="comment">//将head指向next节点的指针删掉，改成指向该值的指针</span></span><br><span class="line">	e[idx] = x;<span class="comment">//存储改值</span></span><br><span class="line">	idx++;<span class="comment">//该点已使用过，所以将idx改为下一节点下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span>&amp; k, <span class="type">int</span>&amp; x)</span><span class="comment">//一般插入节点,将x插入到k节点之后</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[idx] = ne[k];<span class="comment">//将该值的next改为k的next</span></span><br><span class="line">	ne[k] = idx;<span class="comment">//k的next指向该值</span></span><br><span class="line">	e[idx] = x;<span class="comment">//存储x</span></span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span>&amp; k)</span><span class="comment">//删除某节点后面的点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[k] = ne[ne[k]];<span class="comment">//ne[ne[k]]的意思就是该节点的next的next</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">Init</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>题目描述</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">实现一个单链表，链表初始为空，支持三种操作：</span><br><span class="line">向链表头插入一个数；</span><br><span class="line">删除第 k个插入的数后面的数；</span><br><span class="line">在第 k个插入的数后插入一个数。</span><br><span class="line">现在要对该链表进行 M次操作，进行完所有操作后，从头到尾输出整个链表。</span><br><span class="line">注意<span class="symbol">:</span>题目中第 k个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 <span class="built_in">n</span> 个数，则按照插入的时间顺序，这 <span class="built_in">n</span> 个数依次为：第 <span class="number">1</span> 个插入的数，第 <span class="number">2</span> 个插入的数，…第 <span class="built_in">n</span> 个插入的数。</span><br></pre></td></tr></table></figure>



<p>输入格式</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">第一行包含整数 M，表示操作次数。</span><br><span class="line">接下来 M行，每行包含一个操作命令，操作命令可能为以下几种：</span><br><span class="line"></span><br><span class="line">H <span class="keyword">x</span>，表示向链表头插入一个数 <span class="keyword">x</span>。</span><br><span class="line">D k，表示删除第 k个插入的数后面的数（当 k 为 <span class="number">0</span>时，表示删除头结点）。</span><br><span class="line">I k <span class="keyword">x</span>，表示在第 k个插入的数后面插入一个数 <span class="keyword">x</span>（此操作中 k 均大于 <span class="number">0</span>）。</span><br></pre></td></tr></table></figure>

<p>输出格式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">共一行，将整个链表从头到尾输出。</span><br><span class="line">数据范围</span><br><span class="line">1≤M≤10000</span><br></pre></td></tr></table></figure>

<p>题解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> idx, e[N], ne[N];</span><br><span class="line"><span class="type">int</span> head;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	head = <span class="number">-1</span>;</span><br><span class="line">	idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx] = x;</span><br><span class="line">	ne[idx] = head;</span><br><span class="line">	head = idx;</span><br><span class="line">	idx++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx] = x;</span><br><span class="line">	ne[idx] = ne[k];</span><br><span class="line">	ne[k] = idx;</span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	cin &gt;&gt; m;</span><br><span class="line">	<span class="built_in">Init</span>();</span><br><span class="line">	<span class="keyword">while</span> (m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> ch;</span><br><span class="line">		<span class="type">int</span> k, x;</span><br><span class="line">		cin &gt;&gt; ch;</span><br><span class="line">		<span class="keyword">if</span> (ch == <span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; x;</span><br><span class="line">			<span class="built_in">add_to_head</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; k;</span><br><span class="line">			<span class="keyword">if</span> (!k) head = ne[head];</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">remove</span>(k<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">			<span class="built_in">add</span>(k<span class="number">-1</span>, x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = head;i != <span class="number">-1</span>;i = ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; e[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//H 9</span></span><br><span class="line"><span class="comment">//I 1 1</span></span><br><span class="line"><span class="comment">//D 1</span></span><br><span class="line"><span class="comment">//D 0</span></span><br><span class="line"><span class="comment">//H 6</span></span><br><span class="line"><span class="comment">//I 3 6</span></span><br><span class="line"><span class="comment">//I 4 5</span></span><br><span class="line"><span class="comment">//I 4 5</span></span><br><span class="line"><span class="comment">//I 3 4</span></span><br><span class="line"><span class="comment">//D 6</span></span><br></pre></td></tr></table></figure>

<p>邻接表：</p>
<p>将每个单链表连接起来，就是邻接表</p>
<p>邻接表的应用：</p>
<p>​	存储树和图</p>
<h3 id="2-数组模拟双链表"><a href="#2-数组模拟双链表" class="headerlink" title="2.数组模拟双链表"></a>2.数组模拟双链表</h3><p>双链表有两个方向，一个指向前，另一个指向后，而单链表只能指向后</p>
<p>因此也可以看出单链表插入时只能插入在往后的方向</p>
<p>需要的数组有e[n],l[n],r[n]和下标idx</p>
<p> e[n]表示该点的值</p>
<p>l[n]表示该点左边节点的指针</p>
<p>r[n]表示右边节点的指针，与单链表next同理</p>
<p>idx表示第几次操作数</p>
<p>head默认为0，tail默认为1<br><img src="https://img-blog.csdnimg.cn/bd052dd4f7ad45e186f39f4d5166a5eb.png#pic_center" alt="在这里插入图片描述"></p>
<p>对于插入节点和删除节点的操作与单链表相类似</p>
<h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><p>1.存储要插入节点的值（可以放在任意位置）</p>
<p>2.改变k的右节点和插入值的左节点，让k和idx连接</p>
<p>3.改变k原先右节点的左节点和插入值的右节点，让k原先的右节点和插入值连接</p>
<p>4.最后操作数+1</p>
<p>实现代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addr</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> &amp;x)</span><span class="comment">//在k节点的右边插入一个点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx] = x;</span><br><span class="line">	r[idx] = r[k];</span><br><span class="line">	l[idx] = k;</span><br><span class="line">	l[r[k]] = idx;<span class="comment">//这两步</span></span><br><span class="line">	r[k] = idx;<span class="comment">//顺序不能变</span></span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想要在k的左边插入一个节点，可以理解为在k的左节点的后面插入一个点，也就是add( l [ k ] , x )</p>
<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>让该节点的左节点所指的next直接指向该节点的右节点</p>
<p>让该节点的右节点所指的last直接指向该节点的左节点</p>
<p>实现代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span><span class="comment">//删除第k个节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	r[l[k]] = r[k];</span><br><span class="line">	l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="总实现代码-1"><a href="#总实现代码-1" class="headerlink" title="总实现代码"></a>总实现代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//r[0] = 1表示右端点即tail，l[1] = 0表示左端点即head</span></span><br><span class="line">	idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> &amp;x)</span><span class="comment">//在k节点的右边插入一个点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx] = x;</span><br><span class="line">	r[idx] = r[k];</span><br><span class="line">	l[idx] = k;</span><br><span class="line">	l[r[k]] = idx;<span class="comment">//这两步</span></span><br><span class="line">	r[k] = idx;<span class="comment">//顺序不能变</span></span><br><span class="line">	</span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span><span class="comment">//删除第k个节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	r[l[k]] = r[k];</span><br><span class="line">	l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">Init</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>快速排序算法</title>
    <url>/2023/11/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%801%EF%BC%9A%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="1-快排"><a href="#1-快排" class="headerlink" title="1. 快排"></a>1. 快排</h3><p>​		确定一组数据 ，即q数组</p>
<p>​		左端点为了，右端点为r</p>
<p>​		（1）确定分界点</p>
<p>​			q[l] 或 q[ (l + r) &#x2F; 2] 或 q[r] 或任意一个数 作为分界点，分界点数为x</p>
<p>​		（2）调整区间 （重点）</p>
<p>​			使 &lt;&#x3D;  x的数放在左半边，使 &gt;&#x3D; x 的数放在右半边，两边的数可以乱序，暂时不用排序</p>
<p>​		（3）利用递归处理左右两端 ，进行排序</p>
<p>​	暴力法</p>
<p>​	（1）开两个额外数组a，b</p>
<p>​	（2）扫描 l 到 r 的所有数，将  &lt;&#x3D; x 的值放到a中，将 &gt;&#x3D; x的数放到b中</p>
<p>​	（3）将a，b排序后放到q数组中 a[ ] -&gt; q[ ], b[ ]-&gt;q[ ];</p>
<p>​	（4）弊端：额外开辟空间，占用内存</p>
<p>​	简便方法（指针）</p>
<p>​	用两个指针i，j指向左端与右端的数</p>
<p>​		（1）判断指针i所指向的数是否小于x，符合条件时往右移一位，当大于等于x时指针i停下</p>
<p>​		（2）判断指针j所指向的数是否大于x，符合条件时往左移一位，当小于等于x时指针停下</p>
<p>​		（3）将i与j指针所指向的数交换，并再次重复1，2，3，直到i，j走到中间位置</p>
<p>​		（4）两边排序</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">// scanf和printf也在iostream里面 ，但cstdio更快一些</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> <span class="comment">//使用swap函数</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> q[ ], <span class="type">int</span> l, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> ; <span class="comment">// 返回一个随机值，该return只是起到一个中止的作用，无需返回特定值</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> x = q[l], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>,;</span><br><span class="line">    <span class="comment">//x = q[(l+r+1 )/2	一定不能取到边界上，上面的x只是举例</span></span><br><span class="line">    <span class="comment">// x = q[l + r &gt;&gt; 1]会更快,以后再理解</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			i++;</span><br><span class="line">		&#125; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			j--;</span><br><span class="line">		&#125; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (i &lt; j) swap(q[i],q[j]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(l &lt; j )quick_sort(q, l, j);<span class="comment">//左半部分</span></span><br><span class="line">	<span class="keyword">if</span>(i &lt; r)quick_sort(q, j + <span class="number">1</span>, r);<span class="comment">//右半部分</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">	quick_sort(q, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>算法基础：位运算</title>
    <url>/2023/11/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>​	最常用的两种操作</p>
<h3 id="1-n的二进制表示中第k位是几"><a href="#1-n的二进制表示中第k位是几" class="headerlink" title="1.n的二进制表示中第k位是几"></a>1.n的二进制表示中第k位是几</h3><p>​	比如</p>
 <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">n</span> <span class="operator">=</span> <span class="number">15</span> 的 二进制 （<span class="number">1111</span>）</span><br><span class="line">    从个位起算第<span class="number">0</span>位，十位为第二位，以此类推</span><br></pre></td></tr></table></figure>

<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符&gt;&gt;"></a>操作符&gt;&gt;</h3><p>把n的第k位移到最后一位</p>
<p>比如</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">n</span> = <span class="number">16</span>, k = <span class="number">3</span>;</span><br><span class="line"><span class="attribute">n</span> == (<span class="number">0001</span> <span class="number">0000</span>)</span><br><span class="line"><span class="attribute">n</span> &gt;&gt; k  == (<span class="number">0010</span>)</span><br><span class="line"><span class="attribute">n</span> = <span class="number">15</span>,k = <span class="number">3</span></span><br><span class="line"><span class="attribute">n</span> == (<span class="number">0000</span> <span class="number">1111</span>)</span><br><span class="line"><span class="attribute">n</span> &gt;&gt; k == (<span class="number">0000</span> <span class="number">0001</span>)</span><br></pre></td></tr></table></figure>



<h3 id="2-n的二进制个位是多少"><a href="#2-n的二进制个位是多少" class="headerlink" title="2.n的二进制个位是多少"></a>2.n的二进制个位是多少</h3><p>比如</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">n</span> <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">n</span> <span class="operator">=</span><span class="operator">=</span> (<span class="number">0010</span>)</span><br><span class="line">n的个位为<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="操作符-1"><a href="#操作符-1" class="headerlink" title="操作符&amp;"></a>操作符&amp;</h3><p>按位与&amp;，两个操作数按位与时，二进制某一位相同则为1，不同则为0</p>
<p>比如</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">n</span> == <span class="number">2</span>,k = <span class="number">1</span></span><br><span class="line"><span class="built_in">n</span> == (<span class="number">0010</span>)</span><br><span class="line">k== (<span class="number">0001</span>)</span><br><span class="line">四位都不相同</span><br><span class="line"><span class="built_in">n</span>&amp;<span class="number">1</span> ==(<span class="number">0000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-进阶运算"><a href="#3-进阶运算" class="headerlink" title="3.进阶运算"></a>3.进阶运算</h3><p>​	计算某数二进制某一位是多少</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算一个数二进制某一位是多少</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,k;<span class="comment">//某个数n，哪一位k</span></span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; ((n &gt;&gt; k) &amp; <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="lowbit函数"><a href="#lowbit函数" class="headerlink" title="lowbit函数"></a>lowbit函数</h3><p>返回n的二进制的最低位1，即返回最后一个是1的数，最后的1之后有多少0就再返回多少个0，再把它转化为十进制数</p>
<h3 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n&amp;(-n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n&amp;(~n+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于按位取反~的解释：<a href="https://blog.csdn.net/niepandou/article/details/128422923?spm=1001.2014.3001.5501"> c语言基础难关：按位取反_涅槃豆的博客-CSDN博客</a></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">n</span> &amp; （-<span class="built_in">n</span>）  实际上按位与的是他们的补码</span><br><span class="line"><span class="built_in">n</span>如果为<span class="number">1</span></span><br><span class="line"><span class="built_in">n</span> 的 补码为<span class="number">0000</span> <span class="number">0000</span></span><br><span class="line">-<span class="built_in">n</span>的补码为 <span class="number">1111</span> <span class="number">1110</span></span><br><span class="line">按位与得到的就是最低位<span class="number">1</span>与其之后的<span class="number">0</span>转化出的十进制数</span><br></pre></td></tr></table></figure>

<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">my_lowbit</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">my_lowbit</span>(n) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求出一个数二进制中的个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;<span class="comment">//计算次数</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (n)</span><br><span class="line">	&#123;</span><br><span class="line">		n -= <span class="built_in">lowbit</span>(n);<span class="comment">//每次减去n的最后一位1</span></span><br><span class="line">		res++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>算法基础总笔记（建议收藏，持续更新）</title>
    <url>/2023/11/22/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%80%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="1-快排"><a href="#1-快排" class="headerlink" title="1. 快排"></a>1. 快排</h3><p>​		确定一组数据 ，即q数组</p>
<p>​		左端点为l，右端点为r</p>
<p>​		（1）确定分界点</p>
<p>​			q[l] 或 q[ (l + r) &#x2F; 2] 或 q[r] 或任意一个数 作为分界点，分界点数为x</p>
<p>​		（2）调整区间 （重点）</p>
<p>​			使 &lt;&#x3D;  x的数放在左半边，使 &gt;&#x3D; x 的数放在右半边，两边的数可以乱序，暂时不用排序</p>
<p>​		（3）利用递归处理左右两端 ，进行排序</p>
<p>​	暴力法</p>
<p>​	（1）开两个额外数组a，b</p>
<p>​	（2）扫描 l 到 r 的所有数，将  &lt;&#x3D; x 的值放到a中，将 &gt;&#x3D; x的数放到b中</p>
<p>​	（3）将a，b排序后放到q数组中 a[ ] -&gt; q[ ], b[ ]-&gt;q[ ];</p>
<p>​	（4）弊端：额外开辟空间，占用内存</p>
<p>​	简便方法（指针）</p>
<p>​	用两个指针i，j指向左端与右端的数</p>
<p>​		（1）判断指针i所指向的数是否小于x，符合条件时往右移一位，当大于等于x时指针i停下</p>
<p>​		（2）判断指针j所指向的数是否大于x，符合条件时往左移一位，当小于等于x时指针停下</p>
<p>​		（3）将i与j指针所指向的数交换，并再次重复1，2，3，直到i，j走到中间位置</p>
<p>​		（4）两边排序</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">// scanf和printf也在iostream里面 ，但cstdio更快一些</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> <span class="comment">//使用swap函数</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[ ], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> ; <span class="comment">// 返回一个随机值，该return只是起到一个中止的作用，无需返回特定值</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> x = q[l], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>,;</span><br><span class="line">    <span class="comment">//x = q[(l+r+1 )/2	一定不能取到边界上，上面的x只是举例</span></span><br><span class="line">    <span class="comment">// x = q[l + r &gt;&gt; 1]会更快,以后再理解</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			i++;</span><br><span class="line">		&#125; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			j--;</span><br><span class="line">		&#125; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i],q[j]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(l &lt; j )<span class="built_in">quick_sort</span>(q, l, j);<span class="comment">//左半部分</span></span><br><span class="line">	<span class="keyword">if</span>(i &lt; r)<span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);<span class="comment">//右半部分</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-归并排序"><a href="#2-归并排序" class="headerlink" title="2. 归并排序"></a>2. 归并排序</h3><p>​		(方法和快排类似，但顺序不同)</p>
<p>​		有一组数据q[ ]</p>
<p>​		(1) 以数组中间作为分界点</p>
<p>​	（2）将两边利用递归排序</p>
<p>​	（3）归并，将两个数组合二为一（重点）</p>
<h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"><span class="type">int</span> tmp[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//确定分界点</span></span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;<span class="comment">// (l+r)/2</span></span><br><span class="line">	<span class="comment">//分成两边</span></span><br><span class="line">	<span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">	<span class="built_in">merge_sort</span>(q, mid+<span class="number">1</span>, r);</span><br><span class="line">	<span class="comment">//归并 合二为一</span></span><br><span class="line">	<span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (q[i] &lt;= q[j] ) tmp[k++] = q[i++];</span><br><span class="line">		<span class="keyword">else</span> tmp[k++] = q[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//两边如果有元素未遍历</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line">	<span class="keyword">while</span> (j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//把tmp赋给q</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = l, j = <span class="number">0</span>;i &lt;= r;i++, j++) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>​		快排的平均时间复杂度为 n * n，归并的时间复杂度为 n * log n 且log 以2为底，因为快排存在递归，所耗时间多，归并每个数据只移动一次，时间是线性的</p>
<h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><h3 id="二分的本质"><a href="#二分的本质" class="headerlink" title="二分的本质"></a>二分的本质</h3><p>如果有单调性一定可以二分，但是可以二分的题目不一定非得有单调性（没有单调性，也有可能可以二分），二分的本质并不是单调性，单调性和二分没有直接的关系</p>
<p>单调性：如果想找一个中间值的话，如果这个点小的话，答案一定在右半边，这个点如果大的话，答案一定在左半边</p>
<p>二分的本质是边界：</p>
<h3 id="1-整数二分"><a href="#1-整数二分" class="headerlink" title="1. 整数二分"></a>1. 整数二分</h3><p>​	（1） 找到中间值</p>
<p>​		模板1（分左半边区域）：mid &#x3D; （ l + r + 1 ）&#x2F;2，并判断该中间值是否满足性质，check该值是否属于左半边区域，如果满足，则一定在左半边区域,如果不满足，则在右半边区域，又继续判断新的mid值是否满足性质，以此类推</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//区间[l,r]被划分成[l,mid - 1]和 [mid,r]时使用</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(l &lt; r) <span class="comment">//直到找出最小下标范围[l,r];</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(	<span class="built_in">check</span>(mid) ) l = mid;<span class="comment">//check判断是否满足性质</span></span><br><span class="line">		<span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">     <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​		目的：在升序，无重复元素的数组中寻找特定值的下标</p>
<p>​		模板2（分右半边区域）：mid &#x3D; （l + r）&#x2F;2，并判断该数是否满足规律，如果不满足，则让 ,r&#x3D;  mid,如果不满足，则让l &#x3D; mid + 1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//区间[l,r]被划分成[l,mid]和[mid + 1,r]时使用</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l ,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">chech</span>(mid)) r= mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>选择哪个模板，重点在于看下一次区间更新是l &#x3D; mid，还是r &#x3D; mid</p>
<p>如果是前者，mid则需要补1，如果是后者，则不需要补1</p>
<p>补1的原因：如果l &#x3D; mid ，由于整数除法是下取整，有可能l 会一直等于mid，r一直不变，l，r不再更新，形成死循环</p>
<h3 id="2-浮点数二分"><a href="#2-浮点数二分" class="headerlink" title="2. 浮点数二分"></a>2. 浮点数二分</h3><p>​	基本和整数二分类似，但无需考虑边界问题，是否会形成死循环</p>
<h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><p>​	位数最大为1e6(10 的6 次方)</p>
<p>​	加减乘除四种存储方式是相同的</p>
<h3 id="1-高精度加法"><a href="#1-高精度加法" class="headerlink" title="1.高精度加法"></a>1.高精度加法</h3><p>​		思想：分别用两个数组逆存储两个整数的值，数组下标为0的值存储个位，为1存在十位，以此类推；</p>
<p>​					再通过模拟加法进位来将得到的值的每一位存储的新数组当中，得到相加数</p>
<h3 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h3> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span><span class="comment">//传址调用，节省占用，无需再另拷贝新数组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>();++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line">		<span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">		C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">		t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string a, b;</span><br><span class="line">	vector &lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b;<span class="comment">// a = &quot;123456&quot;</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>( )<span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);<span class="comment">//&#123;6,5,4,3,2,1&#125;</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>( )<span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> C = <span class="built_in">add</span>(A, B);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-高精度减法"><a href="#2-高精度减法" class="headerlink" title="2.高精度减法"></a>2.高精度减法</h3><p>​	思想：分别用两个数组逆存储两个整数的值，数组下标为0的值存储个位，为1存在十位，以此类推；</p>
<p>​			提前判断A，B的谁大谁小，使得最终能够大数减小数，如果是B-A，还要提前打印一个负号</p>
<p>​			再通过模拟减法运算，将得到的值的每一位存储的新数组当中，得到相减数，最后注意前导0的存在</p>
<h3 id="模板-3"><a href="#模板-3" class="headerlink" title="模板"></a>模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, vector&lt;<span class="type">int</span>&gt;&amp; B)</span><span class="comment">//判断A是否大于等于B</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (A[i] != B[i]) <span class="keyword">return</span> A[i]&gt;B[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, vector&lt;<span class="type">int</span>&gt;&amp; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; A.<span class="built_in">size</span>();++i)</span><br><span class="line">	&#123;</span><br><span class="line">		t = A[i] - t;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];<span class="comment">// 检测B是否越界</span></span><br><span class="line">		C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);<span class="comment">//t为正数与t为负数两种情况判断</span></span><br><span class="line">        <span class="comment">// 比如7-8 是负数，模拟减法后则为10+7-8，之后也要后面一位减1</span></span><br><span class="line">		<span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>(); <span class="comment">//防止前导0的存在，需要去0</span></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string a, b;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">cmp</span>(A, B))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> C = <span class="built_in">Sub</span>(A, B);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) cout &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> C = <span class="built_in">Sub</span>(B, A);</span><br><span class="line">		cout &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) cout &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-高精度相乘-（大整数x小整数）"><a href="#3-高精度相乘-（大整数x小整数）" class="headerlink" title="3.高精度相乘 （大整数x小整数）"></a>3.高精度相乘 （大整数x小整数）</h3><p>​		思想：用一个数组逆存储一个整数的值，数组下标为0的值存储个位，为1存在十位，以此类推；用int 存储一个较小数</p>
<p>​			通过将大数每一位的值与B相乘，并且每次运算只把算得的个位传给C，下一次将上次除去个位的数加上这一次相乘的值，最后将留下来的未能放进C的数再放进C中，得到最终的相乘数</p>
<h3 id="模板-4"><a href="#模板-4" class="headerlink" title="模板"></a>模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; A.<span class="built_in">size</span>();++i)</span><br><span class="line">	&#123;</span><br><span class="line">		t += A[i] * b;</span><br><span class="line">		C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);<span class="comment">//只往C中传个位数，其余位数暂时保留</span></span><br><span class="line">		t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (t)<span class="comment">//排除前导0</span></span><br><span class="line">	&#123;</span><br><span class="line">		C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">			t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string a;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	cin &gt;&gt; a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>()<span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> C = <span class="built_in">Mul</span>(A, b);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>()<span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i) cout &lt;&lt; C[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-高精度相除（大整数-小整数）"><a href="#4-高精度相除（大整数-小整数）" class="headerlink" title="4.高精度相除（大整数&#x2F;小整数）"></a>4.高精度相除（大整数&#x2F;小整数）</h3><p>​	思想：用一个数组逆存储一个整数的值，数组下标为0的值存储个位，为1存在十位，以此类推；用int 存储一个较小数</p>
<p>​	和之前一样，但这次是从高位到低位，目的是模拟除法。并通过每次的余数来推演下一次的运算，比如算1234&#x2F;11，第一位得到的余数r是1，</p>
<p>然后通过将余数r*10+下一位的数，得到12，12&#x2F;11得到余数1，以此类推，最后得到的就是两数之商，同时也可得到最终的余数</p>
<h3 id="模板-5"><a href="#模板-5" class="headerlink" title="模板"></a>模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> &amp;b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">	&#123;</span><br><span class="line">		r = r * <span class="number">10</span> + A[i];<span class="comment">//上一次的余数*10+这一次要除的数，模拟除法</span></span><br><span class="line">		C.<span class="built_in">push_back</span>(r / b);<span class="comment">//每一位的商</span></span><br><span class="line">		r %= b;<span class="comment">//余数</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());<span class="comment">//得到的商是正过来的，而我们想要倒着输出，因此就要让商再倒过来</span></span><br><span class="line">	<span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();<span class="comment">//排除前导0</span></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="type">int</span> r;</span><br><span class="line">	<span class="keyword">auto</span> C = <span class="built_in">Div</span>(A, b,r);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) cout &lt;&lt; C[i];<span class="comment">//商</span></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; r;<span class="comment">//余数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><p>​	思想：假设有原数组a1，a2，a3….an;</p>
<p>​	求前缀和si</p>
<p>​	则si &#x3D; a1 + a2 + … + ai;</p>
<p>​	若要求区间[l,r]之间的前缀和，则只需将r的前缀和减去l - 1的前缀和即可</p>
<p>​	时间复杂度为O（1）；</p>
<h3 id="模板-6"><a href="#模板-6" class="headerlink" title="模板"></a>模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>  N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"><span class="comment">//每项前缀和的初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) s[i] = s[i - <span class="number">1</span>] + q[i];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l, r;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[r] - s[l<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p>​	思想：有一二维数组q，将其看作一个长方形，其二维前缀和s[ i ] [ j ]就是从a[0] [0] 至 a [i] [j] 所有元素的和，</p>
<p>​		如果想要快速得到每一个s[ i ] [ j ],可以用公式推得</p>
<p>​		s[i] [j] &#x3D; s[i - 1] [j] + s[i] [j - 1] - s[i - 1] [j - 1] + a[i] [j];</p>
<p>​		如果想要求出特定长方形x1，y1至x2，y2的长方形前缀和</p>
<p>​		则可以利用公式</p>
<p>​		sum &#x3D; s[x2] [y2] - s[x1 - 1] [y2] - s[x2] [y1 - 1] + s[x1 - 1] [y1 - 1]</p>
<p>模板</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N][N];</span><br><span class="line"><span class="type">int</span> s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n, m,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;m, &amp;n, &amp;k);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//每一项前缀和初始化</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">			s[i][j] = s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i<span class="number">-1</span>][j<span class="number">-1</span>]+q[i][j];</span><br><span class="line">	<span class="comment">//询问</span></span><br><span class="line">	<span class="keyword">while</span> (k--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">		<span class="comment">//求前缀和</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><h3 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h3><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>​		前缀和的逆运算</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>​		有一数组a，b，使得 ai &#x3D; b1 + b2 + b3 +  … + bi</p>
<p>​		例如 b1 &#x3D; a1</p>
<p>​				b2 &#x3D; a2 - a1；</p>
<p>​				b3 &#x3D; a3-a2</p>
<p>​				bn &#x3D; an-a（n-1）；</p>
<p>​		b就称为a的差分，a就称为b的前缀和</p>
<p>​		使某一区域的前缀和被同步改变，</p>
<p>​		本质上是改变边界的值，使得中间连续值得以被间接改变</p>
<p>​	用处：且比原先（n）的时间复杂度优化为O（1）</p>
<h3 id="例题模板"><a href="#例题模板" class="headerlink" title="例题模板"></a>例题模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改变a任意区间的前缀和，使该区间的前缀和+c，其他保持不变</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> b[N];</span><br><span class="line"><span class="comment">//改变两边的值，使得中间连续值得以被间接改变，降低时间复杂度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">	b[l] += c;</span><br><span class="line">	b[r + <span class="number">1</span>] -= c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="comment">//获取前缀和即a数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="comment">//将前缀和赋给b，向b数组插入元素，假设前缀和皆为0</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) insert(i, i, a[i])；</span><br><span class="line"><span class="comment">//改变区间内的前缀和</span></span><br><span class="line">	<span class="keyword">while</span> (m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l, r, c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp; r, &amp;c);</span><br><span class="line">		insert(l, r, c);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) b[i] += b[i - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><h3 id="本质-1"><a href="#本质-1" class="headerlink" title="本质"></a>本质</h3><p>​	与一维差分相同，也是前缀和的逆运算</p>
<h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>​	假设要改变存储前缀和的二维数组中特定矩阵发生改变</p>
<p>​	则使存储前缀和的二维数组某一坐标的右下角全部改变，并使多余部分减掉，由于需改变矩阵的右下角的矩阵被减掉两次，还需要使其重新加回来，成为原本的前缀和，从而得到一个存储前缀和的矩阵中特定的小矩阵发生改变</p>
<h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><p>​	降低原先笨方法的时间复杂度</p>
<h3 id="模板-7"><a href="#模板-7" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改变二维前缀和中的特定矩阵元素</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"><span class="type">int</span> b[N][N];</span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//能使大矩阵中的特定矩阵发生改变</span></span><br><span class="line"><span class="comment">//如果端点处改变，其右下角的所有元素都会被间接改变</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//实现矩阵内的控制小矩阵元素</span></span><br><span class="line">	b[x1][y1] += c;</span><br><span class="line">	b[x2 + <span class="number">1</span>][y1] -= c;</span><br><span class="line">	b[x2][y1 + <span class="number">1</span>] -= c;</span><br><span class="line">	b[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">	<span class="comment">//读入数据,获取前缀和即a数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">	<span class="comment">//初始化b数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">			insert(i, j, i, j, a[i][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (q--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x1, y1, x2, y2,c;</span><br><span class="line">		<span class="comment">//控制特定矩阵的元素</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2,&amp;c);</span><br><span class="line">		insert(x1, y1, x2, y2, c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//得出改变后的前缀和</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">			b[i][j] += b[i - <span class="number">1</span>][j] + b[i][j - <span class="number">1</span>] - b[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//打印输出</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i][j]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h2><h3 id="第一类"><a href="#第一类" class="headerlink" title="第一类"></a>第一类</h3><p>​		两个指针分别指向两个序列，例如归并排序</p>
<h3 id="第二类"><a href="#第二类" class="headerlink" title="第二类"></a>第二类</h3><p>​		两个指针都指向一个序列，一个在区间的开头，另一个在区间的结尾,例如快排</p>
<p>双指针算法并非一定要用指针来表示</p>
<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>先写出一种暴力做法，然后观察i与j之间是否存在关联，比如单调性，从而优化代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(i,j))</span><br><span class="line">		...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将上方原先O（n^2)的朴素算法优化为O（n）</p>
<h3 id="通用模板"><a href="#通用模板" class="headerlink" title="通用模板"></a>通用模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//符合条件 j++</span></span><br><span class="line">	<span class="keyword">while</span>(j &lt; i &amp;&amp; <span class="built_in">check</span>(i,j)) j++;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//每道题后面的具体逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">//实现以空格为分隔符换行打印一个带有多个空格的字符串</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string str;<span class="comment">//string定义字符串</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">getline</span>(cin,str);<span class="comment">//读取一行字符串</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> len = str.<span class="built_in">size</span>();<span class="comment">//得到字符串长度</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; len;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> j = i;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span> (j &lt; len &amp;&amp; str[j] != <span class="string">&#x27; &#x27;</span>) j++;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//具体逻辑</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> k = i;k &lt; j;++k) cout &lt;&lt; str[k];</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		i = j;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">//求一序列中最长连续子序列的长度</span></span><br><span class="line"><span class="comment">//可以跳数，即2，3，5，但子序列不能有重复元素</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"><span class="comment">//a存储序列，s存储每个数字的重复次数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) cin &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		s[a[i]]++;</span><br><span class="line">		<span class="comment">//存储每个数字的重复次数</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//运用双指针算法</span></span><br><span class="line">		<span class="keyword">while</span> (s[a[i]] &gt; <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//当出现重复数字时，让j追上i</span></span><br><span class="line">			s[a[j]]--;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		res = <span class="built_in">max</span>(res, i - j + <span class="number">1</span>);</span><br><span class="line">		<span class="comment">//总共计算n次res</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例题题解说明：</p>
<p>​	a和s分别作为存储序列和存储每个元素重复次数的数组，</p>
<p>​	在每次for循环记录每个重复元素次数</p>
<p>​	如果大于1则利用双指针使得 j 能够追上i，即双指针算法的原理</p>
<p>​	i作为结尾，j作为开头，让j不断自增直到i与j相等</p>
<p>​	**此时 j 就可以作为新子序列的首元素坐标 **</p>
<p>​	并利用res记录每次的子序列长度</p>
<p>​	整个题解可以理解为，用res记录子序列的长度，如果不出现重复元素则让res由i-j+1得出，如果出现重复元素，先记录新子序列的长度，再与上一个子序列进行比较，每次遍历都运算一次，时间复杂度就为O（n），最后快速得出最长连续子序列的长度</p>
<h3 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h3><p>​	优化运算量，时间复杂度</p>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>​	最常用的两种操作</p>
<h3 id="1-n的二进制表示中第k位是几"><a href="#1-n的二进制表示中第k位是几" class="headerlink" title="1.n的二进制表示中第k位是几"></a>1.n的二进制表示中第k位是几</h3><p>​	比如</p>
 <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">n</span> <span class="operator">=</span> <span class="number">15</span> 的 二进制 （<span class="number">1111</span>）</span><br><span class="line">    从个位起算第<span class="number">0</span>位，十位为第二位，以此类推</span><br></pre></td></tr></table></figure>

<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符&gt;&gt;"></a>操作符&gt;&gt;</h3><p>把n的第k位移到最后一位</p>
<p>比如</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">n</span> = <span class="number">16</span>, k = <span class="number">3</span>;</span><br><span class="line"><span class="attribute">n</span> == (<span class="number">0001</span> <span class="number">0000</span>)</span><br><span class="line"><span class="attribute">n</span> &gt;&gt; k  == (<span class="number">0010</span>)</span><br><span class="line"><span class="attribute">n</span> = <span class="number">15</span>,k = <span class="number">3</span></span><br><span class="line"><span class="attribute">n</span> == (<span class="number">0000</span> <span class="number">1111</span>)</span><br><span class="line"><span class="attribute">n</span> &gt;&gt; k == (<span class="number">0000</span> <span class="number">0001</span>)</span><br></pre></td></tr></table></figure>



<h3 id="2-n的二进制个位是多少"><a href="#2-n的二进制个位是多少" class="headerlink" title="2.n的二进制个位是多少"></a>2.n的二进制个位是多少</h3><p>比如</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">n</span> <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">n</span> <span class="operator">=</span><span class="operator">=</span> (<span class="number">0010</span>)</span><br><span class="line">n的个位为<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="操作符-1"><a href="#操作符-1" class="headerlink" title="操作符&amp;"></a>操作符&amp;</h3><p>按位与&amp;，两个操作数按位与时，二进制某一位相同则为1，不同则为0</p>
<p>比如</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">n</span> == <span class="number">2</span>,k = <span class="number">1</span></span><br><span class="line"><span class="built_in">n</span> == (<span class="number">0010</span>)</span><br><span class="line">k== (<span class="number">0001</span>)</span><br><span class="line">四位都不相同</span><br><span class="line"><span class="built_in">n</span>&amp;<span class="number">1</span> ==(<span class="number">0000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-进阶运算"><a href="#3-进阶运算" class="headerlink" title="3.进阶运算"></a>3.进阶运算</h3><p>​	计算某数二进制某一位是多少</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算一个数二进制某一位是多少</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,k;<span class="comment">//某个数n，哪一位k</span></span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; ((n &gt;&gt; k) &amp; <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="lowbit函数"><a href="#lowbit函数" class="headerlink" title="lowbit函数"></a>lowbit函数</h3><p>返回n的二进制的最低位1，即返回最后一个是1的数，最后的1之后有多少0就再返回多少个0，再把它转化为十进制数</p>
<h3 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n&amp;(-n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n&amp;(~n+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于按位取反~的解释：<a href="%5B(2%E6%9D%A1%E6%B6%88%E6%81%AF">按位取反</a> c语言基础难关：按位取反_涅槃豆的博客-CSDN博客](<a href="https://blog.csdn.net/niepandou/article/details/128422923?spm=1001.2014.3001.5501">https://blog.csdn.net/niepandou/article/details/128422923?spm=1001.2014.3001.5501</a>))</p>
<h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">n</span> &amp; （-<span class="built_in">n</span>）  实际上按位与的是他们的补码</span><br><span class="line"><span class="built_in">n</span>如果为<span class="number">1</span></span><br><span class="line"><span class="built_in">n</span> 的 补码为<span class="number">0000</span> <span class="number">0000</span></span><br><span class="line">-<span class="built_in">n</span>的补码为 <span class="number">1111</span> <span class="number">1110</span></span><br><span class="line">按位与得到的就是最低位<span class="number">1</span>与其之后的<span class="number">0</span>转化出的十进制数</span><br></pre></td></tr></table></figure>

<h3 id="模板-8"><a href="#模板-8" class="headerlink" title="模板"></a>模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">my_lowbit</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">my_lowbit</span>(n) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求出一个数二进制中的个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;<span class="comment">//计算次数</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (n)</span><br><span class="line">	&#123;</span><br><span class="line">		n -= <span class="built_in">lowbit</span>(n);<span class="comment">//每次减去n的最后一位1</span></span><br><span class="line">		res++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="整数离散化"><a href="#整数离散化" class="headerlink" title="整数离散化"></a>整数离散化</h2><h3 id="离散化的概念"><a href="#离散化的概念" class="headerlink" title="离散化的概念"></a>离散化的概念</h3><p>对一组序列进行升序排列，然后用0映射，代表序列的最小数，1映射第二小的数，以此类推，与利用数组存储相似</p>
<p>如果序列中有重复元素，应当先去重删除重复元素再排序映射</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">对序列1<span class="number"> 2 </span>2<span class="number"> 3 </span>5离散化</span><br><span class="line">排序得到1<span class="number"> 2 </span>2<span class="number"> 3 </span>5</span><br><span class="line">去重并删除得到1<span class="number"> 2 </span>3 5</span><br><span class="line">离散化映射</span><br><span class="line">序列1<span class="number"> 2 </span>3 5</span><br><span class="line">映射0<span class="number"> 1 </span>2 3</span><br></pre></td></tr></table></figure>

<h3 id="模板-9"><a href="#模板-9" class="headerlink" title="模板"></a>模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; alls;<span class="comment">//存储将要离散化的数据</span></span><br><span class="line">	<span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());<span class="comment">//对所有值排序</span></span><br><span class="line">    <span class="comment">//unique对所有元素去重，重复的元素会被放在最后</span></span><br><span class="line">	<span class="comment">//unique返回值为去重排序后前排未去重元素的总数</span></span><br><span class="line">	<span class="comment">//用erase函数对已放在后排的元素删除</span></span><br><span class="line">	alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()),alls.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure>



<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//寻找序列离散化后特定值对应的映射坐标</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,x;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;<span class="comment">//存储将要离散化的数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;<span class="comment">//映射到0,1,2,3</span></span><br><span class="line">	<span class="comment">//r + 1 映射到1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//输入n个数据</span></span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; number;</span><br><span class="line">		alls.<span class="built_in">push_back</span>(number);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());<span class="comment">//对所有值排序</span></span><br><span class="line">	alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()),alls.<span class="built_in">end</span>());</span><br><span class="line">	<span class="comment">//unique对所有元素去重，重复的元素会被放在最后</span></span><br><span class="line">	<span class="comment">//unique返回值为去重排序后前排未去重元素的总数</span></span><br><span class="line">	<span class="comment">//用erase函数对已放在后排的元素删除</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//求出离散化的值</span></span><br><span class="line">	<span class="comment">//二分查找其下标</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">find</span>(x) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">假定有一个无限长的数轴，数轴上每个坐标上的数都是 <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">现在，我们首先进行 n 次操作，每次操作将某一位置 <span class="keyword">x</span> 上的数加 <span class="keyword">c</span>。</span><br><span class="line"></span><br><span class="line">接下来，进行 m 次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l<span class="punctuation">,</span>r] 之间的所有数的和。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line"></span><br><span class="line">第一行包含两个整数 n 和 m。</span><br><span class="line"></span><br><span class="line">接下来 n 行，每行包含两个整数 <span class="keyword">x</span> 和 <span class="keyword">c</span>。</span><br><span class="line"></span><br><span class="line">再接下来 m 行，每行包含两个整数 l 和 r。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line"></span><br><span class="line">共 m 行，每行输出一个询问中所求的区间内数字和。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line"></span><br><span class="line">−<span class="number">109</span>≤<span class="keyword">x</span>≤<span class="number">109</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">1</span>≤n<span class="punctuation">,</span>m≤<span class="number">105</span><span class="punctuation">,</span></span><br><span class="line">−<span class="number">109</span>≤l≤r≤<span class="number">109</span><span class="punctuation">,</span></span><br><span class="line">−<span class="number">10000</span>≤<span class="keyword">c</span>≤<span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>输入样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 2</span><br><span class="line">3 6</span><br><span class="line">7 5</span><br><span class="line">1 3</span><br><span class="line">4 6</span><br><span class="line">7 8</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">0</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<p>题解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line">vector &lt;<span class="type">int</span>&gt; alls;</span><br><span class="line">vector&lt;PII&gt; add, query;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x, c;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; c;</span><br><span class="line">		add.<span class="built_in">push_back</span>(&#123; x,c &#125;);</span><br><span class="line"></span><br><span class="line">		alls.<span class="built_in">push_back</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l, r;</span><br><span class="line">		cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">		query.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line"></span><br><span class="line">		alls.<span class="built_in">push_back</span>(l);</span><br><span class="line">		alls.<span class="built_in">push_back</span>(r);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//去重</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());</span><br><span class="line">	alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>()),alls.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">	<span class="comment">//处理插入</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> item : add)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x = <span class="built_in">find</span>(item.first);</span><br><span class="line">		a[x] += item.second;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//预处理前缀和</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= alls.<span class="built_in">size</span>();++i) s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 处理询问</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> item : query)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l = <span class="built_in">find</span>(item.first), r = <span class="built_in">find</span>(item.second);</span><br><span class="line">		cout &lt;&lt; s[r] - s[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h2><p>​	概念：在有序升序序列中，如果某一区间合另一区间存在交集，则两个区间可以合并为一个区间</p>
<p>​	思考情况：</p>
<p><img src="/2023/11/22/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%80%BB%E7%AC%94%E8%AE%B0/75a73960e38c48879bde94b667d5ff36.png" alt="75a73960e38c48879bde94b667d5ff36"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1.绿色区间在蓝色区间内部</span><br><span class="line">2.橙色区间与蓝色区间有交集</span><br><span class="line">3.粉色区间与蓝色区间无关联</span><br></pre></td></tr></table></figure>

<p>最终得到新的合并区间[ st , ed ] </p>
<p>st全称start，ed全称end</p>
<h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">题目描述</span><br><span class="line">给定 n 个区间 <span class="selector-attr">[li , ri]</span>，要求合并所有有交集的区间。</span><br><span class="line">注意如果在端点处相交，也算有交集。</span><br><span class="line">输出合并完成后的区间个数。</span><br><span class="line">例如：<span class="selector-attr">[1,3]</span> 和 <span class="selector-attr">[2,6]</span> 可以合并为一个区间 <span class="selector-attr">[1,6]</span>。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行包含整数 n。</span><br><span class="line">接下来 n 行，每行包含两个整数 l 和 r。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">共一行，包含一个整数，表示合并区间完成后的区间个数。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line"><span class="number">1</span> ≤ n ≤ <span class="number">100000</span> ,</span><br><span class="line">−<span class="number">1</span>e9 ≤ <span class="selector-tag">li</span> ≤ ri ≤ <span class="number">1</span>e9</span><br></pre></td></tr></table></figure>

<p>输入样例</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">8</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>输出样例</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">//将所有 有交集的区间合并</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;PII&gt; segs;<span class="comment">//存储左端点与右端点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt;&amp; segs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;PII&gt; res;</span><br><span class="line">	<span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(), segs.<span class="built_in">end</span>());<span class="comment">//pair的sort排序优先以左端点排序，左端点相同则看右端点</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> seg : segs)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ed &lt; seg.first)<span class="comment">//区间在所维护区间的左端，没有任何区间</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (ed != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123; st,ed &#125;);</span><br><span class="line">			st = seg.first, ed = seg.second;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">//存在交集</span></span><br><span class="line">		&#123;</span><br><span class="line">			ed = <span class="built_in">max</span>(ed, seg.second);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123; st,ed &#125;);</span><br><span class="line">	segs = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l, r;</span><br><span class="line">		cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">		segs.<span class="built_in">push_back</span>(&#123; l,r &#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">merge</span>(segs);<span class="comment">//对区间合并</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; segs.<span class="built_in">size</span>() &lt;&lt; endl;<span class="comment">//segs的size刚好就是其区间数量</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="链表与邻链表"><a href="#链表与邻链表" class="headerlink" title="链表与邻链表"></a>链表与邻链表</h2><p>0.传统的链表创建方式在运算速度上非常慢</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">  	<span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ListNode</span>* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">struct</span> <span class="built_in">ListNode</span>();<span class="comment">//new一次很慢,因为new是动态分配 </span></span><br></pre></td></tr></table></figure>

<h3 id="1-数组模拟单链表"><a href="#1-数组模拟单链表" class="headerlink" title="1.数组模拟单链表"></a>1.数组模拟单链表</h3><p>数组模拟链表，也成为静态链表</p>
<p>链表的实现方式：<br><img src="/2023/11/22/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%80%BB%E7%AC%94%E8%AE%B0/a32c163e3b6545f9b3663d34b6cc5fef.png" alt="a32c163e3b6545f9b3663d34b6cc5fef"></p>
<p>一开始用head指针存储链表头节点，head之后就是空指针</p>
<p>之后让head之后的指针指向新节点，以此类推，直到最后一个节点，再让下一个节点指向空指针</p>
<p>定义e[n]为该节点的值，ne[n]为该节点的next指针</p>
<p><img src="/2023/11/22/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%80%BB%E7%AC%94%E8%AE%B0/5adf1592306146beac73a8098e29ed0a.png" alt="5adf1592306146beac73a8098e29ed0a"></p>
<p>e[0] &#x3D; 3,ne[0] &#x3D; 1(指节点1)</p>
<p>e[1] &#x3D; 5,ne[1] &#x3D; 2(指节点2)</p>
<p>…</p>
<p>e[3] &#x3D; 9,ne[3] &#x3D; -1(空节点)</p>
<h4 id="如何在头节点插入一个节点（算法题常用）"><a href="#如何在头节点插入一个节点（算法题常用）" class="headerlink" title="如何在头节点插入一个节点（算法题常用）"></a>如何在头节点插入一个节点（算法题常用）</h4><p>链表需要数形结合<br><img src="/2023/11/22/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%80%BB%E7%AC%94%E8%AE%B0/48157884963444d88af4026c22a21709.png" alt="48157884963444d88af4026c22a21709"></p>
<p>1.将所想要插入的值的next指针指向0节点</p>
<p>2.将head的next指针指向该值</p>
<p>3.存储该值</p>
<p>代码实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> &amp;x)</span><span class="comment">//把一个值插入到头节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[idx] = head;<span class="comment">//将该值的指针指向head所指的next节点	</span></span><br><span class="line">	head = idx;<span class="comment">//将head指向next节点的指针删掉，改成指向该值的指针</span></span><br><span class="line">	e[idx] = x;<span class="comment">//存储该值</span></span><br><span class="line">	idx++;<span class="comment">//该点已使用过，所以将idx改为下一节点下标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="如何在任意位置插入一个值"><a href="#如何在任意位置插入一个值" class="headerlink" title="如何在任意位置插入一个值"></a>如何在任意位置插入一个值</h4><p>1.首先需要直到该位置的上一节点k</p>
<p>2.与头节点插入类似，先让该值的next变为k的next指针</p>
<p>3.让k的next指针指向该节点</p>
<p>4.存储该值</p>
<p>实现代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span>&amp; k, <span class="type">int</span>&amp; x)</span><span class="comment">//一般插入节点,将x插入到k节点之后</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[idx] = ne[k];<span class="comment">//将该值的next改为k的next</span></span><br><span class="line">	ne[k] = idx;<span class="comment">//k的next指向该值</span></span><br><span class="line">	e[idx] = x;<span class="comment">//存储x</span></span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="如何删除一个节点"><a href="#如何删除一个节点" class="headerlink" title="如何删除一个节点"></a>如何删除一个节点</h4><p>链表节点的删除本质上是跳过该节点</p>
<p>实现代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span>&amp; k)</span><span class="comment">//删除某节点后面的点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[k] = ne[ne[k]];<span class="comment">//ne[ne[k]]的意思就是该节点的next的next</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总实现代码"><a href="#总实现代码" class="headerlink" title="总实现代码"></a>总实现代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N];<span class="comment">//head头节点，e节点值，ne指next指针</span></span><br><span class="line"><span class="type">int</span> idx;<span class="comment">//存储当前用到哪个节点,下标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span><span class="comment">//初始化链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	head = <span class="number">-1</span>;</span><br><span class="line">	idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> &amp;x)</span><span class="comment">//把一个值插入到头节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[idx] = head;<span class="comment">//将该值的指针指向head所指的next节点	</span></span><br><span class="line">	head = idx;<span class="comment">//将head指向next节点的指针删掉，改成指向该值的指针</span></span><br><span class="line">	e[idx] = x;<span class="comment">//存储改值</span></span><br><span class="line">	idx++;<span class="comment">//该点已使用过，所以将idx改为下一节点下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span>&amp; k, <span class="type">int</span>&amp; x)</span><span class="comment">//一般插入节点,将x插入到k节点之后</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[idx] = ne[k];<span class="comment">//将该值的next改为k的next</span></span><br><span class="line">	ne[k] = idx;<span class="comment">//k的next指向该值</span></span><br><span class="line">	e[idx] = x;<span class="comment">//存储x</span></span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span>&amp; k)</span><span class="comment">//删除某节点后面的点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[k] = ne[ne[k]];<span class="comment">//ne[ne[k]]的意思就是该节点的next的next</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">Init</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h3><p>题目描述</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">实现一个单链表，链表初始为空，支持三种操作：</span><br><span class="line">向链表头插入一个数；</span><br><span class="line">删除第 k个插入的数后面的数；</span><br><span class="line">在第 k个插入的数后插入一个数。</span><br><span class="line">现在要对该链表进行 M次操作，进行完所有操作后，从头到尾输出整个链表。</span><br><span class="line">注意<span class="symbol">:</span>题目中第 k个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 <span class="built_in">n</span> 个数，则按照插入的时间顺序，这 <span class="built_in">n</span> 个数依次为：第 <span class="number">1</span> 个插入的数，第 <span class="number">2</span> 个插入的数，…第 <span class="built_in">n</span> 个插入的数。</span><br></pre></td></tr></table></figure>



<p>输入格式</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">第一行包含整数 M，表示操作次数。</span><br><span class="line">接下来 M行，每行包含一个操作命令，操作命令可能为以下几种：</span><br><span class="line"></span><br><span class="line">H <span class="keyword">x</span>，表示向链表头插入一个数 <span class="keyword">x</span>。</span><br><span class="line">D k，表示删除第 k个插入的数后面的数（当 k 为 <span class="number">0</span>时，表示删除头结点）。</span><br><span class="line">I k <span class="keyword">x</span>，表示在第 k个插入的数后面插入一个数 <span class="keyword">x</span>（此操作中 k 均大于 <span class="number">0</span>）。</span><br></pre></td></tr></table></figure>

<p>输出格式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">共一行，将整个链表从头到尾输出。</span><br><span class="line">数据范围</span><br><span class="line">1≤M≤10000</span><br></pre></td></tr></table></figure>

<p>题解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> idx, e[N], ne[N];</span><br><span class="line"><span class="type">int</span> head;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	head = <span class="number">-1</span>;</span><br><span class="line">	idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx] = x;</span><br><span class="line">	ne[idx] = head;</span><br><span class="line">	head = idx;</span><br><span class="line">	idx++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx] = x;</span><br><span class="line">	ne[idx] = ne[k];</span><br><span class="line">	ne[k] = idx;</span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	cin &gt;&gt; m;</span><br><span class="line">	<span class="built_in">Init</span>();</span><br><span class="line">	<span class="keyword">while</span> (m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> ch;</span><br><span class="line">		<span class="type">int</span> k, x;</span><br><span class="line">		cin &gt;&gt; ch;</span><br><span class="line">		<span class="keyword">if</span> (ch == <span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; x;</span><br><span class="line">			<span class="built_in">add_to_head</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; k;</span><br><span class="line">			<span class="keyword">if</span> (!k) head = ne[head];</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">remove</span>(k<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">			<span class="built_in">add</span>(k<span class="number">-1</span>, x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = head;i != <span class="number">-1</span>;i = ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; e[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//H 9</span></span><br><span class="line"><span class="comment">//I 1 1</span></span><br><span class="line"><span class="comment">//D 1</span></span><br><span class="line"><span class="comment">//D 0</span></span><br><span class="line"><span class="comment">//H 6</span></span><br><span class="line"><span class="comment">//I 3 6</span></span><br><span class="line"><span class="comment">//I 4 5</span></span><br><span class="line"><span class="comment">//I 4 5</span></span><br><span class="line"><span class="comment">//I 3 4</span></span><br><span class="line"><span class="comment">//D 6</span></span><br></pre></td></tr></table></figure>

<p>邻接表：</p>
<p>将每个单链表连接起来，就是邻接表</p>
<p>邻接表的应用：</p>
<p>​	存储树和图</p>
<h3 id="2-数组模拟双链表"><a href="#2-数组模拟双链表" class="headerlink" title="2.数组模拟双链表"></a>2.数组模拟双链表</h3><p>双链表有两个方向，一个指向前，另一个指向后，而单链表只能指向后</p>
<p>因此也可以看出单链表插入时只能插入在往后的方向</p>
<p>需要的数组有e[n],l[n],r[n]和下标idx</p>
<p> e[n]表示该点的值</p>
<p>l[n]表示该点左边节点的指针</p>
<p>r[n]表示右边节点的指针，与单链表next同理</p>
<p>idx表示第几次操作数</p>
<p>head默认为0，tail默认为1<br><img src="/2023/11/22/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%80%BB%E7%AC%94%E8%AE%B0/bd052dd4f7ad45e186f39f4d5166a5eb.png" alt="bd052dd4f7ad45e186f39f4d5166a5eb"></p>
<p>对于插入节点和删除节点的操作与单链表相类似</p>
<h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><p>1.存储要插入节点的值（可以放在任意位置）</p>
<p>2.改变k的右节点和插入值的左节点，让k和idx连接</p>
<p>3.改变k原先右节点的左节点和插入值的右节点，让k原先的右节点和插入值连接</p>
<p>4.最后操作数+1</p>
<p>实现代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addr</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> &amp;x)</span><span class="comment">//在k节点的右边插入一个点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx] = x;</span><br><span class="line">	r[idx] = r[k];</span><br><span class="line">	l[idx] = k;</span><br><span class="line">	l[r[k]] = idx;<span class="comment">//这两步</span></span><br><span class="line">	r[k] = idx;<span class="comment">//顺序不能变</span></span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想要在k的左边插入一个节点，可以理解为在k的左节点的后面插入一个点，也就是add( l [ k ] , x )</p>
<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>让该节点的左节点所指的next直接指向该节点的右节点</p>
<p>让该节点的右节点所指的last直接指向该节点的左节点</p>
<p>实现代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span><span class="comment">//删除第k个节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	r[l[k]] = r[k];</span><br><span class="line">	l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="总实现代码-1"><a href="#总实现代码-1" class="headerlink" title="总实现代码"></a>总实现代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//r[0] = 1表示右端点即tail，l[1] = 0表示左端点即head</span></span><br><span class="line">	idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> &amp;x)</span><span class="comment">//在k节点的右边插入一个点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx] = x;</span><br><span class="line">	r[idx] = r[k];</span><br><span class="line">	l[idx] = k;</span><br><span class="line">	l[r[k]] = idx;<span class="comment">//这两步</span></span><br><span class="line">	r[k] = idx;<span class="comment">//顺序不能变</span></span><br><span class="line">	</span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span><span class="comment">//删除第k个节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	r[l[k]] = r[k];</span><br><span class="line">	l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">Init</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="栈的特点"><a href="#栈的特点" class="headerlink" title="栈的特点"></a>栈的特点</h3><p>先进后出，和一个半封闭容器类似，放了一堆肉饼，先放的肉饼后倒出来</p>
<p>stk[n]数组代表栈，tt代表栈点</p>
<h3 id="关于栈的插入"><a href="#关于栈的插入" class="headerlink" title="关于栈的插入"></a>关于栈的插入</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//插入元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stk[++t] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于栈的删除"><a href="#关于栈的删除" class="headerlink" title="关于栈的删除"></a>关于栈的删除</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">( )</span><span class="comment">//删除元素，即弹出一个肉饼</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tt--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于判断栈是否为空"><a href="#关于判断栈是否为空" class="headerlink" title="关于判断栈是否为空"></a>关于判断栈是否为空</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">stkempty</span><span class="params">()</span><span class="comment">//判断栈是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (tt &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总实现代码-2"><a href="#总实现代码-2" class="headerlink" title="总实现代码"></a>总实现代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stk[N], tt;<span class="comment">//stk表示栈，tt表示栈点下标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//插入元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stk[++t] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">( )</span><span class="comment">//删除元素，即弹出一个肉饼</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">stkempty</span><span class="params">()</span><span class="comment">//判断栈是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (tt &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//栈顶 stk[tt]</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h3><p>问题描述</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">有一序列，输出每个数左边第一个比他小的数，没有则输出<span class="string">-1</span></span><br></pre></td></tr></table></figure>

<p>诀窍：在while循环判断条件时，只要想该数不符合条件则跳过即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找出每个数左边离它最近的比它大/小的数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stk[N], tt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//暴力法</span></span><br><span class="line"><span class="comment">//void vio(int n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	for (int i = 0;i &lt; n;;++i)//对每个数的列举</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		int j = 0;</span></span><br><span class="line"><span class="comment">//		for (j = i -1;j &gt;= 0;--j)</span></span><br><span class="line"><span class="comment">//		&#123;</span></span><br><span class="line"><span class="comment">//			if (stk[i] &gt; stk[j])</span></span><br><span class="line"><span class="comment">//			&#123;</span></span><br><span class="line"><span class="comment">//				cout &lt;&lt; stk[j]&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line"><span class="comment">//				break;</span></span><br><span class="line"><span class="comment">//			&#125;</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line"><span class="comment">//		if (j == -1) cout &lt;&lt; -1 &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单调栈法</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>, &amp;x);</span><br><span class="line">		<span class="keyword">while</span> (tt &amp;&amp; stk[tt] &gt;= x) tt--;</span><br><span class="line">		<span class="keyword">if</span> (tt) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, stk[tt]);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">		stk[++tt] = x;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="队列的特点"><a href="#队列的特点" class="headerlink" title="队列的特点"></a>队列的特点</h3><p>先进先出，和枪上膛相似，先插进去的子弹先打出来</p>
<p>q[N]表示队列，hh表示对头，tt表示队尾 </p>
<h3 id="关于队列的插入"><a href="#关于队列的插入" class="headerlink" title="关于队列的插入"></a>关于队列的插入</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//队尾插入元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	q[++tt] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于队列的删除（弹出）"><a href="#关于队列的删除（弹出）" class="headerlink" title="关于队列的删除（弹出）"></a>关于队列的删除（弹出）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">( )</span><span class="comment">//在队头弹出元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	hh++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于队列的判断是否为空"><a href="#关于队列的判断是否为空" class="headerlink" title="关于队列的判断是否为空"></a>关于队列的判断是否为空</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">qempty</span><span class="params">()</span><span class="comment">//判断是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (hh &lt;= tt) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总实现代码-3"><a href="#总实现代码-3" class="headerlink" title="总实现代码"></a>总实现代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N], hh, tt = <span class="number">-1</span>;<span class="comment">//hh表示队头，tt表示队尾 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//队尾插入元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	q[++tt] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">( )</span><span class="comment">//在对头弹出元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	hh++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">qempty</span><span class="params">()</span><span class="comment">//判断是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (hh &lt;= tt) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对头元素q[hh],队尾元素q[tt]</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题-5"><a href="#例题-5" class="headerlink" title="例题"></a>例题</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求出一定序列中，滑动窗口里的最小值和最大值</span></span><br><span class="line"><span class="comment">//第一行输出最小值</span></span><br><span class="line"><span class="comment">//第二行输出最大值 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N],q[N],hh,tt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n,&amp;k);</span><br><span class="line"></span><br><span class="line">	hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//判断队头是否滑出窗口</span></span><br><span class="line">		<span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">		<span class="comment">//出队</span></span><br><span class="line">		<span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--;<span class="comment">//只要队尾比他大</span></span><br><span class="line">		<span class="comment">//就跳出队列，因为之后的滑动窗口都不会选择这个队尾作为输出结果</span></span><br><span class="line">		q[++tt] = i;<span class="comment">//下标入队，从队尾入</span></span><br><span class="line">        <span class="comment">//放在输出前的原因是</span></span><br><span class="line">		<span class="comment">//队列可能一个不剩，那么的数就是最小值</span></span><br><span class="line">		<span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//判断队头是否滑出窗口</span></span><br><span class="line">		<span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">		<span class="comment">//出队</span></span><br><span class="line">		<span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt--;<span class="comment">//只要队尾比他大</span></span><br><span class="line">		<span class="comment">//就跳出队列，因为之后的滑动窗口都不会选择这个队尾作为输出结果</span></span><br><span class="line">		q[++tt] = i;<span class="comment">//下标入队，从队尾入</span></span><br><span class="line">		<span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="大佬您都看完了，不妨点个关注或者点赞收藏一下吧"><a href="#大佬您都看完了，不妨点个关注或者点赞收藏一下吧" class="headerlink" title=" 大佬您都看完了，不妨点个关注或者点赞收藏一下吧"></a><font color="red"> 大</font><font color="orange">佬</font><font color="brown">您</font><font color="green">都</font><font color="cyan">看</font><font color="blue">完</font><font color="red">了</font><font color="orange">，</font><font color="brown">不</font><font color="green">妨</font><font color="cyan">点个</font><font color="blue">关</font><font color="purple">注</font><font color="red">或</font><font color="orange">者</font><font color="brown">点</font><font color="green">赞</font><font color="cyan">收</font><font color="blue">藏</font><font color="red">一</font><font color="red">下</font><font color="orange">吧</font></h1>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法基础：前缀和</title>
    <url>/2023/11/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><p>​	思想：假设有原数组a1，a2，a3….an;</p>
<p>​	求前缀和si</p>
<p>​	则si &#x3D; a1 + a2 + … + ai;</p>
<p>​	若要求区间[l,r]之间的前缀和，则只需将r的前缀和减去l - 1的前缀和即可</p>
<p>​	时间复杂度为O（1）；</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>  N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"><span class="comment">//每项前缀和的初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) s[i] = s[i - <span class="number">1</span>] + q[i];</span><br><span class="line"><span class="comment">//询问每次</span></span><br><span class="line">	<span class="keyword">while</span> (m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l, r;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[r] - s[l<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p>​	思想：有一二维数组q，将其看作一个长方形，其二维前缀和s[ i ] [ j ]就是从a[0] [0] 至 a [i] [j] 所有元素的和，</p>
<p>​		如果想要快速得到每一个s[ i ] [ j ],可以用公式推得</p>
<p>​		s[i] [j] &#x3D; s[i - 1] [j] + s[i] [j - 1] - s[i - 1] [j - 1] + a[i] [j];</p>
<p>​		如果想要求出特定长方形x1，y1至x2，y2的长方形前缀和</p>
<p>​		则可以利用公式</p>
<p>​		sum &#x3D; s[x2] [y2] - s[x1 - 1] [y2] - s[x2] [y1 - 1] + s[x1 - 1] [y1 - 1]</p>
<p>模板</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N][N];</span><br><span class="line"><span class="type">int</span> s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n, m,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;m, &amp;n, &amp;k);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//每一项前缀和初始化</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">			s[i][j] = s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i<span class="number">-1</span>][j<span class="number">-1</span>]+q[i][j];</span><br><span class="line">	<span class="comment">//询问</span></span><br><span class="line">	<span class="keyword">while</span> (k--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">		<span class="comment">//求前缀和</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>算法基础：区间合并</title>
    <url>/2023/11/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h2><p>​	概念：在有序升序序列中，如果某一区间合另一区间存在交集，则两个区间可以合并为一个区间</p>
<p>​	思考情况：</p>
<p><img src="https://img-blog.csdnimg.cn/d22fffc8f6dc4416a5212efd7f8c0a0a.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1.绿色区间在蓝色区间内部</span><br><span class="line">2.橙色区间与蓝色区间有交集</span><br><span class="line">3.粉色区间与蓝色区间无关联</span><br></pre></td></tr></table></figure>

<p>最终得到新的合并区间[ st , ed ] </p>
<p>st全称start，ed全称end</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">题目描述</span><br><span class="line">给定 n 个区间 <span class="selector-attr">[li , ri]</span>，要求合并所有有交集的区间。</span><br><span class="line">注意如果在端点处相交，也算有交集。</span><br><span class="line">输出合并完成后的区间个数。</span><br><span class="line">例如：<span class="selector-attr">[1,3]</span> 和 <span class="selector-attr">[2,6]</span> 可以合并为一个区间 <span class="selector-attr">[1,6]</span>。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行包含整数 n。</span><br><span class="line">接下来 n 行，每行包含两个整数 l 和 r。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">共一行，包含一个整数，表示合并区间完成后的区间个数。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line"><span class="number">1</span> ≤ n ≤ <span class="number">100000</span> ,</span><br><span class="line">−<span class="number">1</span>e9 ≤ <span class="selector-tag">li</span> ≤ ri ≤ <span class="number">1</span>e9</span><br></pre></td></tr></table></figure>

<p>输入样例</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">8</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>输出样例</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">//将所有 有交集的区间合并</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;PII&gt; segs;<span class="comment">//存储左端点与右端点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt;&amp; segs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;PII&gt; res;</span><br><span class="line">	<span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(), segs.<span class="built_in">end</span>());<span class="comment">//pair的sort排序优先以左端点排序，左端点相同则看右端点</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> seg : segs)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ed &lt; seg.first)<span class="comment">//区间在所维护区间的左端，没有任何区间</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (ed != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123; st,ed &#125;);</span><br><span class="line">			st = seg.first, ed = seg.second;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">//存在交集</span></span><br><span class="line">		&#123;</span><br><span class="line">			ed = <span class="built_in">max</span>(ed, seg.second);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123; st,ed &#125;);</span><br><span class="line">	segs = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l, r;</span><br><span class="line">		cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">		segs.<span class="built_in">push_back</span>(&#123; l,r &#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">merge</span>(segs);<span class="comment">//对区间合并</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; segs.<span class="built_in">size</span>() &lt;&lt; endl;<span class="comment">//segs的size刚好就是其区间数量</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>算法基础：双指针算法</title>
    <url>/2023/11/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="第一类"><a href="#第一类" class="headerlink" title="第一类"></a>第一类</h3><p>​		两个指针分别指向两个序列，例如归并排序</p>
<h3 id="第二类"><a href="#第二类" class="headerlink" title="第二类"></a>第二类</h3><p>​		两个指针都指向一个序列，一个在区间的开头，另一个在区间的结尾,例如快排</p>
<p>双指针算法并非一定要用指针来表示</p>
<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>先写出一种暴力做法，然后观察i与j之间是否存在关联，比如单调性，从而优化代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;++j)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(i,j))</span><br><span class="line">		...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将上方原先O（n^2)的朴素算法优化为O（n）</p>
<h3 id="通用模板"><a href="#通用模板" class="headerlink" title="通用模板"></a>通用模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//符合条件 j++</span></span><br><span class="line">	<span class="keyword">while</span>(j &lt; i &amp;&amp; <span class="built_in">check</span>(i,j)) j++;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//每道题后面的具体逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">//实现以空格为分隔符换行打印一个带有多个空格的字符串</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string str;<span class="comment">//string定义字符串</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">getline</span>(cin,str);<span class="comment">//读取一行字符串</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> len = str.<span class="built_in">size</span>();<span class="comment">//得到字符串长度</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; len;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> j = i;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span> (j &lt; len &amp;&amp; str[j] != <span class="string">&#x27; &#x27;</span>) j++;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//具体逻辑</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> k = i;k &lt; j;++k) cout &lt;&lt; str[k];</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		i = j;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">//求一序列中最长连续子序列的长度</span></span><br><span class="line"><span class="comment">//可以跳数，即2，3，5，但子序列不能有重复元素</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"><span class="comment">//a存储序列，s存储每个数字的重复次数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) cin &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		s[a[i]]++;</span><br><span class="line">		<span class="comment">//存储每个数字的重复次数</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//运用双指针算法</span></span><br><span class="line">		<span class="keyword">while</span> (s[a[i]] &gt; <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//当出现重复数字时，让j追上i</span></span><br><span class="line">			s[a[j]]--;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		res = <span class="built_in">max</span>(res, i - j + <span class="number">1</span>);</span><br><span class="line">		<span class="comment">//总共计算n次res</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例题题解说明：</p>
<p>​	a和s分别作为存储序列和存储每个元素重复次数的数组，</p>
<p>​	在每次for循环记录每个重复元素次数</p>
<p>​	如果大于1则利用双指针使得 j 能够追上i，即双指针算法的原理</p>
<p>​	i作为结尾，j作为开头，让j不断自增直到i与j相等</p>
<p>​	**此时 j 就可以作为新子序列的首元素坐标 **</p>
<p>​	并利用res记录每次的子序列长度</p>
<p>​	整个题解可以理解为，用res记录子序列的长度，如果不出现重复元素则让res由i-j+1得出，如果出现重复元素，先记录新子序列的长度，再与上一个子序列进行比较，每次遍历都运算一次，时间复杂度就为O（n），最后快速得出最长连续子序列的长度</p>
<h3 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h3><p>​	优化运算量，时间复杂度</p>
<h1 id="请给本菜鸟一个点赞和收藏吧"><a href="#请给本菜鸟一个点赞和收藏吧" class="headerlink" title=" 请给本菜鸟一个点赞和收藏吧 "></a><font color="red"> 请</font><font color="orange">给</font><font color="brown">本</font><font color="green">菜</font><font color="cyan">鸟</font><font color="blue">一</font><font color="red">个</font><font color="orange">点</font><font color="brown">赞</font><font color="green">和</font><font color="cyan">收</font><font color="blue">藏</font><font color="purple">吧 </font></h1>]]></content>
  </entry>
  <entry>
    <title>算法基础：差分</title>
    <url>/2023/11/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<h2 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h2><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>​		前缀和的逆运算<br>        想要更容易搞懂差分，前提是要先搞懂前缀和如何求<br>        <a href="https://blog.csdn.net/niepandou/article/details/128387109?spm=1001.2014.3001.5502">前缀和链接</a></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>​		有一数组a，b，使得 ai &#x3D; b1 + b2 + b3 +  … + bi</p>
<p>​		例如 b1 &#x3D; a1</p>
<p>​				b2 &#x3D; a2 - a1；</p>
<p>​				b3 &#x3D; a3-a2</p>
<p>​				bn &#x3D; an-a（n-1）；</p>
<p>​		b就称为a的差分，a就称为b的前缀和</p>
<p>​		使某一区域的前缀和被同步改变，</p>
<p>​		本质上是改变边界的值，使得中间连续值得以被间接改变</p>
<p>​	用处：且比原先（n）的时间复杂度优化为O（1）</p>
<h3 id="例题模板"><a href="#例题模板" class="headerlink" title="例题模板"></a>例题模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改变a任意区间的前缀和，使该区间的前缀和+c，其他保持不变</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> b[N];</span><br><span class="line"><span class="comment">//改变两边的值，使得中间连续值得以被间接改变，降低时间复杂度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">	b[l] += c;</span><br><span class="line">	b[r + <span class="number">1</span>] -= c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="comment">//获取前缀和即a数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="comment">//将前缀和赋给b，向b数组插入元素，假设前缀和皆为0</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) insert(i, i, a[i])；</span><br><span class="line"><span class="comment">//改变区间内的前缀和</span></span><br><span class="line">	<span class="keyword">while</span> (m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l, r, c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp; r, &amp;c);</span><br><span class="line">		insert(l, r, c);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) b[i] += b[i - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h2><h3 id="本质-1"><a href="#本质-1" class="headerlink" title="本质"></a>本质</h3><p>​	与一维差分相同，也是前缀和的逆运算</p>
<h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>​	假设要改变存储前缀和的二维数组中特定矩阵发生改变</p>
<p>​	则使存储前缀和的二维数组某一坐标的右下角全部改变，并使多余部分减掉，由于需改变矩阵的右下角的矩阵被减掉两次，还需要使其重新加回来，成为原本的前缀和，从而得到一个存储前缀和的矩阵中特定的小矩阵发生改变</p>
<h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><p>​	降低原先笨方法的时间复杂度</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改变二维前缀和中的特定矩阵元素</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"><span class="type">int</span> b[N][N];</span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//能使大矩阵中的特定矩阵发生改变</span></span><br><span class="line"><span class="comment">//如果端点处改变，其右下角的所有元素都会被间接改变</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//实现矩阵内的控制小矩阵元素</span></span><br><span class="line">	b[x1][y1] += c;</span><br><span class="line">	b[x2 + <span class="number">1</span>][y1] -= c;</span><br><span class="line">	b[x2][y1 + <span class="number">1</span>] -= c;</span><br><span class="line">	b[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">	<span class="comment">//读入数据,获取前缀和即a数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">	<span class="comment">//初始化b数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">			insert(i, j, i, j, a[i][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (q--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x1, y1, x2, y2,c;</span><br><span class="line">		<span class="comment">//控制特定矩阵的元素</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2,&amp;c);</span><br><span class="line">		insert(x1, y1, x2, y2, c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//得出改变后的前缀和</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">			b[i][j] += b[i - <span class="number">1</span>][j] + b[i][j - <span class="number">1</span>] - b[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//打印输出</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i][j]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​	</p>
]]></content>
  </entry>
  <entry>
    <title>算法基础：离散化</title>
    <url>/2023/11/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%EF%BC%9A%E7%A6%BB%E6%95%A3%E5%8C%96/</url>
    <content><![CDATA[<h2 id="整数离散化"><a href="#整数离散化" class="headerlink" title="整数离散化"></a>整数离散化</h2><h3 id="离散化的概念"><a href="#离散化的概念" class="headerlink" title="离散化的概念"></a>离散化的概念</h3><p>对一组序列进行升序排列，然后用0映射，代表序列的最小数，1映射第二小的数，以此类推，与利用数组存储相似</p>
<p>如果序列中有重复元素，应当先去重删除重复元素再排序映射</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">对序列1<span class="number"> 2 </span>2<span class="number"> 3 </span>5离散化</span><br><span class="line">排序得到1<span class="number"> 2 </span>2<span class="number"> 3 </span>5</span><br><span class="line">去重并删除得到1<span class="number"> 2 </span>3 5</span><br><span class="line">离散化映射</span><br><span class="line">序列1<span class="number"> 2 </span>3 5</span><br><span class="line">映射0<span class="number"> 1 </span>2 3</span><br></pre></td></tr></table></figure>

<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; alls;<span class="comment">//存储将要离散化的数据</span></span><br><span class="line">	<span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());<span class="comment">//对所有值排序</span></span><br><span class="line">    <span class="comment">//unique对所有元素去重，重复的元素会被放在最后</span></span><br><span class="line">	<span class="comment">//unique返回值为去重排序后前排未去重元素的总数</span></span><br><span class="line">	<span class="comment">//用erase函数对已放在后排的元素删除</span></span><br><span class="line">	alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()),alls.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure>



<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//寻找序列离散化后特定值对应的映射坐标</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,x;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;<span class="comment">//存储将要离散化的数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;<span class="comment">//映射到0,1,2,3</span></span><br><span class="line">	<span class="comment">//r + 1 映射到1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//输入n个数据</span></span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; number;</span><br><span class="line">		alls.<span class="built_in">push_back</span>(number);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());<span class="comment">//对所有值排序</span></span><br><span class="line">	alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()),alls.<span class="built_in">end</span>());</span><br><span class="line">	<span class="comment">//unique对所有元素去重，重复的元素会被放在最后</span></span><br><span class="line">	<span class="comment">//unique返回值为去重排序后前排未去重元素的总数</span></span><br><span class="line">	<span class="comment">//用erase函数对已放在后排的元素删除</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//求出离散化的值</span></span><br><span class="line">	<span class="comment">//二分查找其下标</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">find</span>(x) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题2</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">假定有一个无限长的数轴，数轴上每个坐标上的数都是 <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">现在，我们首先进行 n 次操作，每次操作将某一位置 <span class="keyword">x</span> 上的数加 <span class="keyword">c</span>。</span><br><span class="line"></span><br><span class="line">接下来，进行 m 次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l<span class="punctuation">,</span>r] 之间的所有数的和。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line"></span><br><span class="line">第一行包含两个整数 n 和 m。</span><br><span class="line"></span><br><span class="line">接下来 n 行，每行包含两个整数 <span class="keyword">x</span> 和 <span class="keyword">c</span>。</span><br><span class="line"></span><br><span class="line">再接下来 m 行，每行包含两个整数 l 和 r。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line"></span><br><span class="line">共 m 行，每行输出一个询问中所求的区间内数字和。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line"></span><br><span class="line">−<span class="number">109</span>≤<span class="keyword">x</span>≤<span class="number">109</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">1</span>≤n<span class="punctuation">,</span>m≤<span class="number">105</span><span class="punctuation">,</span></span><br><span class="line">−<span class="number">109</span>≤l≤r≤<span class="number">109</span><span class="punctuation">,</span></span><br><span class="line">−<span class="number">10000</span>≤<span class="keyword">c</span>≤<span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>输入样例：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>输出样例：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">0</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<p>题解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line">vector &lt;<span class="type">int</span>&gt; alls;</span><br><span class="line">vector&lt;PII&gt; add, query;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x, c;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; c;</span><br><span class="line">		add.<span class="built_in">push_back</span>(&#123; x,c &#125;);</span><br><span class="line"></span><br><span class="line">		alls.<span class="built_in">push_back</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l, r;</span><br><span class="line">		cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">		query.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line"></span><br><span class="line">		alls.<span class="built_in">push_back</span>(l);</span><br><span class="line">		alls.<span class="built_in">push_back</span>(r);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//去重</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());</span><br><span class="line">	alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>()),alls.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">	<span class="comment">//处理插入</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> item : add)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x = <span class="built_in">find</span>(item.first);</span><br><span class="line">		a[x] += item.second;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//预处理前缀和</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= alls.<span class="built_in">size</span>();++i) s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 处理询问</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> item : query)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l = <span class="built_in">find</span>(item.first), r = <span class="built_in">find</span>(item.second);</span><br><span class="line">		cout &lt;&lt; s[r] - s[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>高精度算法</title>
    <url>/2023/11/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%EF%BC%9A%E8%BD%BB%E6%9D%BE%E6%90%9E%E6%87%82%E9%AB%98%E7%B2%BE%E5%BA%A6%EF%BC%88%E5%8E%9F%E7%90%86+%E5%8F%AF%E5%A5%97%E7%94%A8%E6%A8%A1%E6%9D%BF%EF%BC%89/</url>
    <content><![CDATA[<h3 id="1-高精度加法"><a href="#1-高精度加法" class="headerlink" title="1.高精度加法"></a>1.高精度加法</h3><p>​		思想：分别用两个数组逆存储两个整数的值，数组下标为0的值存储个位，为1存在十位，以此类推；</p>
<p>​					再通过模拟加法进位来将得到的值的每一位存储的新数组当中，得到相加数</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; &amp;B)</span><span class="comment">//传址调用，节省占用，无需再另拷贝新数组</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; A.size() || i &lt; B.size();++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; A.size()) t += A[i];</span><br><span class="line">		<span class="keyword">if</span> (i &lt; B.size()) t += B[i];</span><br><span class="line">		C.push_back(t % <span class="number">10</span>);</span><br><span class="line">		t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t) C.push_back(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> a, b;</span><br><span class="line">	<span class="built_in">vector</span> &lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;<span class="comment">// a = &quot;123456&quot;</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.size( )<span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);<span class="comment">//&#123;6,5,4,3,2,1&#125;</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = b.size( )<span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i) B.push_back(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> C = add(A, B);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = C.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-高精度减法"><a href="#2-高精度减法" class="headerlink" title="2.高精度减法"></a>2.高精度减法</h3><p>​	思想：分别用两个数组逆存储两个整数的值，数组下标为0的值存储个位，为1存在十位，以此类推；</p>
<p>​			提前判断A，B的谁大谁小，使得最终能够大数减小数，如果是B-A，还要提前打印一个负号</p>
<p>​			再通过模拟减法运算，将得到的值的每一位存储的新数组当中，得到相减数，最后注意前导0的存在</p>
<h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; B)</span><span class="comment">//判断A是否大于等于B</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (A.size() != B.size()) <span class="keyword">return</span> A.size() &gt; B.size();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = A.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (A[i] != B[i]) <span class="keyword">return</span> A[i]&gt;B[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">Sub</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; B)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; A.size();++i)</span><br><span class="line">	&#123;</span><br><span class="line">		t = A[i] - t;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; B.size()) t -= B[i];<span class="comment">// 检测B是否越界</span></span><br><span class="line">		C.push_back((t + <span class="number">10</span>) % <span class="number">10</span>);<span class="comment">//t为正数与t为负数两种情况判断</span></span><br><span class="line">        <span class="comment">// 比如7-8 是负数，模拟减法后则为10+7-8，之后也要后面一位减1</span></span><br><span class="line">		<span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back(); <span class="comment">//防止前导0的存在，需要去0</span></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> a, b;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = b.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) B.push_back(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (cmp(A, B))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> C = Sub(A, B);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = C.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) <span class="built_in">cout</span> &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> C = Sub(B, A);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = C.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) <span class="built_in">cout</span> &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-高精度相乘-（大整数x小整数）"><a href="#3-高精度相乘-（大整数x小整数）" class="headerlink" title="3.高精度相乘 （大整数x小整数）"></a>3.高精度相乘 （大整数x小整数）</h3><p>​		思想：用一个数组逆存储一个整数的值，数组下标为0的值存储个位，为1存在十位，以此类推；用int 存储一个较小数</p>
<p>​			通过将大数每一位的值与B相乘，并且每次运算只把算得的个位传给C，下一次将上次除去个位的数加上这一次相乘的值，最后将留下来的未能放进C的数再放进C中，得到最终的相乘数</p>
<h3 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">Mul</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> &amp;b)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; A.size();++i)</span><br><span class="line">	&#123;</span><br><span class="line">		t += A[i] * b;</span><br><span class="line">		C.push_back(t % <span class="number">10</span>);<span class="comment">//只往C中传个位数，其余位数暂时保留</span></span><br><span class="line">		t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (t)<span class="comment">//排除前导0</span></span><br><span class="line">	&#123;</span><br><span class="line">		C.push_back(t % <span class="number">10</span>);</span><br><span class="line">			t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> a;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.size()<span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> C = Mul(A, b);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = C.size()<span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i) <span class="built_in">cout</span> &lt;&lt; C[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-高精度相除（大整数-小整数）"><a href="#4-高精度相除（大整数-小整数）" class="headerlink" title="4.高精度相除（大整数&#x2F;小整数）"></a>4.高精度相除（大整数&#x2F;小整数）</h3><p>​	思想：用一个数组逆存储一个整数的值，数组下标为0的值存储个位，为1存在十位，以此类推；用int 存储一个较小数</p>
<p>​	和之前一样，但这次是从高位到低位，目的是模拟除法。并通过每次的余数来推演下一次的运算，比如算1234&#x2F;11，第一位得到的余数r是1，</p>
<p>然后通过将余数r*10+下一位的数，得到12，12&#x2F;11得到余数1，以此类推，最后得到的就是两数之商，同时也可得到最终的余数</p>
<h3 id="模板-3"><a href="#模板-3" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">Div</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> &amp;b, <span class="type">int</span> &amp;r)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = A.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">	&#123;</span><br><span class="line">		r = r * <span class="number">10</span> + A[i];<span class="comment">//上一次的余数*10+这一次要除的数，模拟除法</span></span><br><span class="line">		C.push_back(r / b);<span class="comment">//每一位的商</span></span><br><span class="line">		r %= b;<span class="comment">//余数</span></span><br><span class="line">	&#125;</span><br><span class="line">	reverse(C.begin(), C.end());<span class="comment">//得到的商是正过来的，而我们想要倒着输出，因此就要让商再倒过来</span></span><br><span class="line">	<span class="keyword">while</span> (C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();<span class="comment">//排除前导0</span></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="type">int</span> r;</span><br><span class="line">	<span class="keyword">auto</span> C = Div(A, b,r);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = C.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) <span class="built_in">cout</span> &lt;&lt; C[i];<span class="comment">//商</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; r;<span class="comment">//余数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="小注"><a href="#小注" class="headerlink" title="小注"></a>小注</h2><p>​	位数最大为1e6(10 的6 次方)</p>
<p>​	加减乘除四种存储方式是相同的</p>
]]></content>
  </entry>
  <entry>
    <title>虚拟机Ubuntu网络开机或突然断连解决方法</title>
    <url>/2023/11/16/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E7%BD%91%E7%BB%9C%E5%BC%80%E6%9C%BA%E6%88%96%E7%AA%81%E7%84%B6%E6%96%AD%E8%BF%9E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>1.打开有线连接设置<br>2.点开右边小齿轮<br><img src="/2023/11/16/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E7%BD%91%E7%BB%9C%E5%BC%80%E6%9C%BA%E6%88%96%E7%AA%81%E7%84%B6%E6%96%AD%E8%BF%9E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/d03fd62ae1be4898ab502f16626c3410.png" alt="d03fd62ae1be4898ab502f16626c3410"><br>3.忘记连接配置<br><img src="/2023/11/16/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E7%BD%91%E7%BB%9C%E5%BC%80%E6%9C%BA%E6%88%96%E7%AA%81%E7%84%B6%E6%96%AD%E8%BF%9E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/b22007d62b4846f885058e24fee219fa.png" alt="b22007d62b4846f885058e24fee219fa"><br>4.重启网络，如果要修改为静态ip则根据该图将ipv4地址，子网掩码填写255.255.255.0，网关填写路由地址填写到下方<br><img src="/2023/11/16/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E7%BD%91%E7%BB%9C%E5%BC%80%E6%9C%BA%E6%88%96%E7%AA%81%E7%84%B6%E6%96%AD%E8%BF%9E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/cb0a02436557427e8805915d9b52148f.png" alt="cb0a02436557427e8805915d9b52148f"></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>计算机</tag>
        <tag>ubuntu</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符重载(重构)</title>
    <url>/2023/11/16/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%EF%BC%88%E9%87%8D%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<h1 id="自增运算符重载"><a href="#自增运算符重载" class="headerlink" title="自增运算符重载"></a>自增运算符重载</h1><p>之前我们了解了如何实现对两个复数对象实现相加操作，而我们熟知的运算符比如+&#x3D;,++i,i++等操作暂时还没能正常使用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> <span class="type">double</span>&amp; dreal, <span class="type">const</span> <span class="type">double</span>&amp; dimage)</span><br><span class="line">		:_dreal(dreal)</span><br><span class="line">		, _dimage(dimage)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Complex(double,double)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;F(x) = &quot;</span> &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimage &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> Complex&amp; c)</span><br><span class="line">		:_dreal(c._dreal)</span><br><span class="line">		, _dimage(c._dimage)</span><br><span class="line">	&#123;</span><br><span class="line">		;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Complex</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~Complex&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _dreal;</span><br><span class="line">	<span class="type">double</span> _dimage;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">temp</span><span class="params">(lhs._dreal + rhs._dreal, lhs._dimage + rhs._dimage)</span></span>;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	Complex c3 = c1 + c2;</span><br><span class="line">	</span><br><span class="line">	c3 += c1;<span class="comment">//error</span></span><br><span class="line">	++c3;<span class="comment">//error</span></span><br><span class="line">	c3++;<span class="comment">//error</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重构-操作"><a href="#重构-操作" class="headerlink" title="重构+&#x3D;操作"></a>重构+&#x3D;操作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Complex&amp; <span class="keyword">operator</span> += (<span class="type">const</span> Complex&amp; rhs)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;_dreal += rhs._dreal;</span><br><span class="line">		<span class="keyword">this</span>-&gt;_dimage += rhs._dimage;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _dreal;</span><br><span class="line">	<span class="type">double</span> _dimage;	</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="重构-i操作"><a href="#重构-i操作" class="headerlink" title="重构++i操作"></a>重构++i操作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Complex <span class="keyword">operator</span> ++()</span><br><span class="line">	&#123;</span><br><span class="line">		_dreal++;</span><br><span class="line">		_dimage++;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _dreal;</span><br><span class="line">	<span class="type">double</span> _dimage;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="重构i-操作"><a href="#重构i-操作" class="headerlink" title="重构i++操作"></a>重构i++操作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Complex <span class="keyword">operator</span> ++(<span class="type">int</span>)<span class="comment">//int仅仅是用来标识重构的是i++操作，int没有任何实际意义</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">Complex <span class="title">temp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">		</span><br><span class="line">		++_dreal;</span><br><span class="line">		++_dimage;</span><br><span class="line">		<span class="keyword">return</span> temp;<span class="comment">//还原i++操作，i++为先反应后自增</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _dreal;</span><br><span class="line">	<span class="type">double</span> _dimage;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>上述操作中有一些函数定义中+&#x3D;和++i带有引用符号，而i++则没有带，原因是i++返回的是临时变量，为右值无法进行取地址操作，而前两个返回的是this指针</p>
<p>由此也看出++i操作比i++操作要简便不少</p>
<h2 id="总实现代码"><a href="#总实现代码" class="headerlink" title="总实现代码"></a>总实现代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> <span class="type">double</span>&amp; dreal, <span class="type">const</span> <span class="type">double</span>&amp; dimage)</span><br><span class="line">		:_dreal(dreal)</span><br><span class="line">		, _dimage(dimage)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Complex(double,double)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;F(x) = &quot;</span> &lt;&lt; _dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; _dimage &lt;&lt; <span class="string">&#x27;i&#x27;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> Complex&amp; c)</span><br><span class="line">		:_dreal(c._dreal)</span><br><span class="line">		, _dimage(c._dimage)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Complex(const Complex&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Complex</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~Complex&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"></span><br><span class="line">	Complex&amp; <span class="keyword">operator</span> += (<span class="type">const</span> Complex&amp; rhs)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;_dreal += rhs._dreal;</span><br><span class="line">		<span class="keyword">this</span>-&gt;_dimage += rhs._dimage;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Complex&amp; <span class="keyword">operator</span> ++()</span><br><span class="line">	&#123;</span><br><span class="line">		_dreal++;</span><br><span class="line">		_dimage++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Complex <span class="keyword">operator</span> ++(<span class="type">int</span>)<span class="comment">//int仅仅是用来标识重构的是i++操作，int没有任何实际意义</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">Complex <span class="title">temp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">		++_dreal;</span><br><span class="line">		++_dimage;</span><br><span class="line">		<span class="keyword">return</span> temp;<span class="comment">//还原i++操作，i++为先反应后自增</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _dreal;</span><br><span class="line">	<span class="type">double</span> _dimage;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex&amp; lhs, <span class="type">const</span> Complex&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">temp</span><span class="params">(lhs._dreal + rhs._dreal, lhs._dimage + rhs._dimage)</span></span>;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">	Complex c3 = c1 + c2;</span><br><span class="line">	c3.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">	c3 += c1;</span><br><span class="line">	c3.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">	(++c3).<span class="built_in">print</span>();</span><br><span class="line">	(c3++).<span class="built_in">print</span>();</span><br><span class="line">	c3.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(double,double)</span></span></span><br><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(double,double)</span></span></span><br><span class="line"><span class="function"><span class="title">F</span><span class="params">(x)</span></span> = <span class="number">1</span> + <span class="number">2</span>i</span><br><span class="line"><span class="function"><span class="title">F</span><span class="params">(x)</span></span> = <span class="number">3</span> + <span class="number">4</span>i</span><br><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(double,double)</span></span></span><br><span class="line"><span class="function"><span class="title">F</span><span class="params">(x)</span></span> = <span class="number">4</span> + <span class="number">6</span>i</span><br><span class="line"><span class="function"><span class="title">F</span><span class="params">(x)</span></span> = <span class="number">5</span> + <span class="number">8</span>i</span><br><span class="line"><span class="function"><span class="title">F</span><span class="params">(x)</span></span> = <span class="number">6</span> + <span class="number">9</span>i</span><br><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(const Complex&amp;)</span></span></span><br><span class="line"><span class="function"><span class="title">F</span><span class="params">(x)</span></span> = <span class="number">6</span> + <span class="number">9</span>i</span><br><span class="line">~Complex</span><br><span class="line"><span class="function"><span class="title">F</span><span class="params">(x)</span></span> = <span class="number">7</span> + <span class="number">10</span>i</span><br><span class="line">~Complex</span><br><span class="line">~Complex</span><br><span class="line">~Complex</span><br></pre></td></tr></table></figure>
<h1 id="输入输出重载运算符"><a href="#输入输出重载运算符" class="headerlink" title="输入输出重载运算符"></a>输入输出重载运算符</h1><blockquote>
<p>重构输入输出的操作就在于他们的输入输出运算符&gt;&gt;,&lt;&lt;</p>
</blockquote>
<h2 id="输出运算符重载"><a href="#输出运算符重载" class="headerlink" title="输出运算符重载"></a>输出运算符重载</h2><p>首先我们先对print成员函数优化一下，使他复数的表现形式更加标准规范</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> <span class="type">double</span>&amp; dreal, <span class="type">const</span> <span class="type">double</span>&amp; dimage)</span><br><span class="line">		:_dreal(dreal)</span><br><span class="line">		, _dimage(dimage)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Complex(double,double)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Complex</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~Complex&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;f(x) = &quot;</span>;</span><br><span class="line">		<span class="keyword">if</span> (!_dreal &amp;&amp; !_dimage) cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (_dreal)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; _dreal;</span><br><span class="line">			<span class="keyword">if</span> (_dimage &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;+&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (_dimage)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (_dimage == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (_dimage == <span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;-i&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span> cout &lt;&lt; _dimage &lt;&lt; <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _dreal;</span><br><span class="line">	<span class="type">double</span> _dimage;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c2</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c3</span><span class="params">(<span class="number">1</span>, <span class="number">-2</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c4</span><span class="params">(<span class="number">-1</span>, <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c5</span><span class="params">(<span class="number">-1</span>, <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c6</span><span class="params">(<span class="number">-1</span>, <span class="number">-2</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c7</span><span class="params">(<span class="number">0</span>, <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c8</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c9</span><span class="params">(<span class="number">0</span>, <span class="number">-2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c2.<span class="built_in">print</span>();</span><br><span class="line">	c3.<span class="built_in">print</span>();</span><br><span class="line">	c4.<span class="built_in">print</span>();</span><br><span class="line">	c5.<span class="built_in">print</span>();</span><br><span class="line">	c6.<span class="built_in">print</span>();</span><br><span class="line">	c7.<span class="built_in">print</span>();</span><br><span class="line">	c8.<span class="built_in">print</span>();</span><br><span class="line">	c9.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现在我们输出一连串对象的时候会频繁调用print函数（因为调用需要一个.所以用起来非常难受）</p>
<blockquote>
<p>&lt;&lt; 也是一种运算符，我们可以利用重构&lt;&lt;的方法省去调用函数的操作，观察可得，重构&lt;&lt;运算符需要两个参数，类似于cout的输出函数和其右边相应的值<br>那么我们就可以得到重构&lt;&lt;的运算符重载声明<br>ostream&amp; operator &lt;&lt;(ostream&amp; os,const Complex&amp; rhs)</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//在类中定义时的写法</span></span><br><span class="line">	<span class="comment">//std::ostream&amp; operator &lt;&lt;(std::ostream&amp; os)</span></span><br><span class="line">	<span class="comment">//该写法将右边的参数当做隐藏参数放在了第一个参数的位置上，违反了操作数的左右位置，于是我们更希望使用friend友元的方式完整的写出参数列表</span></span><br><span class="line">	<span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt;(std::ostream&amp; os,<span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _dreal;</span><br><span class="line">	<span class="type">double</span> _dimage;</span><br><span class="line">&#125;;</span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt;(std::ostream&amp; os,<span class="type">const</span> Complex&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//先把输出的值放在os流中（单独一个cout）</span></span><br><span class="line">	os &lt;&lt; <span class="string">&quot;f(x) = &quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (!rhs._dreal &amp;&amp; !rhs._dimage) os &lt;&lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (rhs._dreal)</span><br><span class="line">	&#123;</span><br><span class="line">		os &lt;&lt; rhs._dreal;</span><br><span class="line">		<span class="keyword">if</span> (rhs._dimage &gt; <span class="number">0</span>) os &lt;&lt; <span class="string">&quot;+&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (rhs._dimage)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (rhs._dimage == <span class="number">1</span>) os &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (rhs._dimage == <span class="number">-1</span>) os &lt;&lt; <span class="string">&quot;-i&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> os &lt;&lt; rhs._dimage &lt;&lt; <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	os &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将os流中的数据全数输出</span></span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优化后代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> <span class="type">double</span>&amp; dreal, <span class="type">const</span> <span class="type">double</span>&amp; dimage)</span><br><span class="line">		:_dreal(dreal)</span><br><span class="line">		, _dimage(dimage)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Complex(double,double)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Complex</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~Complex&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _dreal;</span><br><span class="line">	<span class="type">double</span> _dimage;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//先把输出的值放在os流中（单独一个cout）</span></span><br><span class="line">	os &lt;&lt; <span class="string">&quot;f(x) = &quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (!rhs._dreal &amp;&amp; !rhs._dimage) os &lt;&lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (rhs._dreal)</span><br><span class="line">	&#123;</span><br><span class="line">		os &lt;&lt; rhs._dreal;</span><br><span class="line">		<span class="keyword">if</span> (rhs._dimage &gt; <span class="number">0</span>) os &lt;&lt; <span class="string">&quot;+&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (rhs._dimage)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (rhs._dimage == <span class="number">1</span>) os &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (rhs._dimage == <span class="number">-1</span>) os &lt;&lt; <span class="string">&quot;-i&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> os &lt;&lt; rhs._dimage &lt;&lt; <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	os &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将os流中的数据全数输出</span></span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c2</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c3</span><span class="params">(<span class="number">1</span>, <span class="number">-2</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c4</span><span class="params">(<span class="number">-1</span>, <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c5</span><span class="params">(<span class="number">-1</span>, <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c6</span><span class="params">(<span class="number">-1</span>, <span class="number">-2</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c7</span><span class="params">(<span class="number">0</span>, <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c8</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">		, <span class="title">c9</span><span class="params">(<span class="number">0</span>, <span class="number">-2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; c3 &lt;&lt; c4 &lt;&lt; c5 &lt;&lt;c6 &lt;&lt; c7 &lt;&lt; c8 &lt;&lt; c9 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(double,double)</span></span></span><br><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(double,double)</span></span></span><br><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(double,double)</span></span></span><br><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(double,double)</span></span></span><br><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(double,double)</span></span></span><br><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(double,double)</span></span></span><br><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(double,double)</span></span></span><br><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(double,double)</span></span></span><br><span class="line"><span class="function"><span class="title">Complex</span><span class="params">(double,double)</span></span></span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">(x)</span></span> = <span class="number">1</span>+<span class="number">2</span>i</span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">(x)</span></span> = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">(x)</span></span> = <span class="number">1</span>-<span class="number">2</span>i</span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">(x)</span></span> = -<span class="number">1</span>+<span class="number">2</span>i</span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">(x)</span></span> = -<span class="number">1</span></span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">(x)</span></span> = -<span class="number">1</span>-<span class="number">2</span>i</span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">(x)</span></span> = <span class="number">2</span>i</span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">(x)</span></span> = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">(x)</span></span> = -<span class="number">2</span>i</span><br><span class="line"></span><br><span class="line">~Complex</span><br><span class="line">~Complex</span><br><span class="line">~Complex</span><br><span class="line">~Complex</span><br><span class="line">~Complex</span><br><span class="line">~Complex</span><br><span class="line">~Complex</span><br><span class="line">~Complex</span><br><span class="line">~Complex</span><br></pre></td></tr></table></figure>

<h2 id="输入运算符重载"><a href="#输入运算符重载" class="headerlink" title="输入运算符重载"></a>输入运算符重载</h2><p>实际上就是对对象内的私有成员输入，重构格式与输出类似</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">friend</span> std::istream&amp; <span class="keyword">operator</span> &gt;&gt;(std::istream&amp; is,Complex&amp; rhs);<span class="comment">//不能带const因为对象的值需要修改</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _dreal;</span><br><span class="line">	<span class="type">double</span> _dimage;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readDouble</span><span class="params">(std::istream&amp; is,<span class="type">double</span>&amp; number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(is&gt;&gt;number,!is.<span class="built_in">eof</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(is.<span class="built_in">bad</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;istream has broken&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(is.<span class="built_in">fail</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			is.<span class="built_in">clear</span>();</span><br><span class="line">			<span class="comment">//第一个参数为流的最大输入字节数</span></span><br><span class="line">			is.<span class="built_in">ignore</span>(std::numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(),<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;please input a interger number&quot;</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;number:&quot;</span>&lt;&lt;number&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">return</span>; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">std::istream&amp; <span class="keyword">operator</span> &gt;&gt;(std::istream&amp; is.Complex&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">readDouble</span>(rhs._dreal);</span><br><span class="line">	<span class="built_in">readDouble</span>(rhs._dimage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Complex</span>()</span><br><span class="line">	:_dreal(<span class="number">0</span>)</span><br><span class="line">	,_dimage(<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Complex()&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> <span class="type">double</span>&amp; dreal, <span class="type">const</span> <span class="type">double</span>&amp; dimage)</span><br><span class="line">		:_dreal(dreal)</span><br><span class="line">		, _dimage(dimage)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Complex(double,double)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Complex</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~Complex&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> std::istream&amp; <span class="keyword">operator</span> &gt;&gt;(std::istream&amp; is, Complex&amp; rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _dreal;</span><br><span class="line">	<span class="type">double</span> _dimage;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readDouble</span><span class="params">(std::istream&amp; is, <span class="type">double</span>&amp; number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (is &gt;&gt; number, !is.<span class="built_in">eof</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (is.<span class="built_in">bad</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;istream has broken&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (is.<span class="built_in">fail</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			is.<span class="built_in">clear</span>();</span><br><span class="line">			<span class="comment">//第一个参数为流的最大输入字节数</span></span><br><span class="line">			is.<span class="built_in">ignore</span>(std::numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;please input a interger number&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;number:&quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">std::istream&amp; <span class="keyword">operator</span> &gt;&gt;(std::istream&amp; is,Complex&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">readDouble</span>(is,rhs._dreal);</span><br><span class="line">	<span class="built_in">readDouble</span>(is,rhs._dimage);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Complex c1;</span><br><span class="line"></span><br><span class="line">	std::cin&gt;&gt;c1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="函数调用重载"><a href="#函数调用重载" class="headerlink" title="函数调用重载"></a>函数调用重载</h1><p>函数调用重载是一种比较特殊的函数重载，之前的函数重载是对同一名称的函数以不同参数为根据重载，函数调用重载在此基础上，通过对象来进行调用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Func</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Func</span>()</span><br><span class="line">		:<span class="built_in">count</span>(<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		++count;</span><br><span class="line">		<span class="keyword">return</span> x + y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		++count;</span><br><span class="line">		<span class="keyword">return</span> x + y + z;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Func fun;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Func两种调用方式</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">fun</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">fun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; fun.<span class="built_in">operator</span>()(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; fun.<span class="built_in">operator</span>()(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//普通函数调用以及重载</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针调用</span></span><br><span class="line">	<span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*aptr)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line">	aptr addptr = add;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">addptr</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="下标访问运算符重载"><a href="#下标访问运算符重载" class="headerlink" title="下标访问运算符重载"></a>下标访问运算符重载</h1><p>在我们采用string类创建对象时，我们发现string对象可以直接用下标访问对应的字符，并且可以进行修改，接下来我们可以尝试模仿string类的这一特点来重载下表访问运算符</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CharArray</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CharArray</span>(<span class="type">size_t</span>&amp; sz)</span><br><span class="line">	:_data(<span class="keyword">new</span> <span class="type">char</span>[sz]())</span><br><span class="line">	,_sz(sz)</span><br><span class="line">	&#123;</span><br><span class="line">		;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">sz</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> _sz;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">delete</span> [] _data;</span><br><span class="line">		_data = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">CharArray</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(_data) <span class="built_in">release</span>();</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;~Complex&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">size_t</span> _sz;</span><br><span class="line">	<span class="type">char</span>* _data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* pstr = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">CharArray</span>(<span class="built_in">strlen</span>(pstr) + <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; ca.<span class="built_in">sz</span>();++i)</span><br><span class="line">	&#123;</span><br><span class="line">		ca[i] = pstr[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时报错显示	没有与这些操作数匹配的 “[]” 运算符</p>
<p>所以我们还需要重构[]运算符</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CharArray</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="type">char</span>&amp; <span class="keyword">operator</span> [](<span class="type">size_t</span> idx)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;char&amp; operator []&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (idx &gt; _sz)<span class="comment">//因为类型为size_t,不会有负数的情况</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Beyond the Array!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			</span><br><span class="line">			<span class="type">static</span> <span class="type">char</span> charnull = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">			<span class="keyword">return</span>  charnull;<span class="comment">//因为返回的临时对象，加上static修饰使其在全局区，让charnull生命周期比函数更大</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> _data[idx];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">size_t</span> _sz;</span><br><span class="line">	<span class="type">char</span>* _data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>此时我们还想模仿string，使得我们的CharArray对象能够通过cout直接输出</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CharArray</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt;(std::ostream&amp; os,<span class="type">const</span> CharArray&amp; ca);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* _data;</span><br><span class="line">	<span class="type">size_t</span> _sz;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt;(std::ostream&amp; os,<span class="type">const</span> CharArray&amp; ca)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>;i &lt; ca.<span class="built_in">sz</span>();++i)</span><br><span class="line">	&#123;</span><br><span class="line">		os&lt;&lt;ca[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CharArray</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CharArray</span>(<span class="type">const</span> <span class="type">size_t</span>&amp; sz)</span><br><span class="line">		:_data(<span class="keyword">new</span> <span class="type">char</span>[sz]())</span><br><span class="line">		, _sz(sz)</span><br><span class="line">	&#123;</span><br><span class="line">		;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">size_t</span> <span class="title">sz</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> _sz;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">delete</span>[] _data;</span><br><span class="line">		_data = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">CharArray</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (_data) <span class="built_in">release</span>();</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~Complex&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>&amp; <span class="keyword">operator</span> [] (<span class="type">size_t</span>&amp; idx)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;char&amp; operator []&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (idx &gt; _sz)<span class="comment">//因为类型为size_t,不会有负数的情况</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Beyond the Array!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">			<span class="type">static</span> <span class="type">char</span> charnull = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">			<span class="keyword">return</span>  charnull;</span><br><span class="line">			<span class="comment">//因为返回的临时对象，加上static修饰使其在全局区，让charnull生命周期比函数更大</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> _data[idx];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt;(std::ostream&amp; os, CharArray&amp; ca);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">size_t</span> _sz;</span><br><span class="line">	<span class="type">char</span>* _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt;(std::ostream&amp; os, CharArray&amp; ca)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ca.<span class="built_in">sz</span>(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		os &lt;&lt; ca[i] &lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* pstr = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">CharArray <span class="title">ca</span><span class="params">(strlen(pstr) + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ca.<span class="built_in">sz</span>(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		ca[i] = pstr[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; ca &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test0</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&lt;&lt;重载时对象不能带const的原因</p>
<blockquote>
<p>在函数过程中，如果发生了数组越界，那么我们之前所构建的下标重构中会返回charnull，虽然charnull是全局区，但因为引用符号实际上对ca的某个值发生了赋值操作，修改了对象，const不允许这样的操作出现，因此带上const发生了报错</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>如何运用strcpy函数</title>
    <url>/2023/11/15/%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89%E5%A6%82%E4%BD%95%E8%BF%90%E7%94%A8strcpy%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="如何运用strcpy函数"><a href="#如何运用strcpy函数" class="headerlink" title="如何运用strcpy函数"></a>如何运用strcpy函数</h1><h2 id="1-strcpy所需要的库函数"><a href="#1-strcpy所需要的库函数" class="headerlink" title="1.strcpy所需要的库函数"></a>1.strcpy所需要的库函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="2-strcpy函数的基本格式与注意事项"><a href="#2-strcpy函数的基本格式与注意事项" class="headerlink" title="2.strcpy函数的基本格式与注意事项"></a>2.strcpy函数的基本格式与注意事项</h2><ul>
<li><p><a href="https://legacy.cplusplus.com/reference/cstring/strcpy/?kw=strcpy">cplusplus对strcpy的描述</a></p>
</li>
<li><p>本人理解<br> strcpy全称为string copy，即字符串拷贝<br>  strcpy的基本格式为strpy（目的地即被拷贝者，源头即拷贝者）<br>  他所代表的含义为：将strcpy函数中源头（即后者）拷贝给相应的目的地（即前者）</p>
</li>
<li><p>举例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> arr1[] = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">	<span class="type">char</span> arr2[] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">	<span class="built_in">strcpy</span>(arr2,arr1);<span class="comment">//strcpy(目的地被复制者，复制源头复制者) </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,arr2)； </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;`</span><br></pre></td></tr></table></figure></li>
</ul>
<p>其输出结果应当为abcde，其中fg为被打印的原因为：在strcpy函数中，arr1拷贝给arr2时，arr1中末尾存在\0，在拷贝后arr2的字符串为”abcde\0fg“，\0代表了终止符，于是打印arr2仅能打印到e。</p>
]]></content>
  </entry>
  <entry>
    <title>算法练习</title>
    <url>/2024/02/27/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><h2 id="排序数组找区间"><a href="#排序数组找区间" class="headerlink" title="排序数组找区间"></a>排序数组找区间</h2><p>题目链接:</p>
<p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/">34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode）</a></p>
<p>我发现二分有时候还真不会,应该是自己有的地方没搞明白,做了一下还真是</p>
<p>这次差不多算是了解一些细节了</p>
<p>详细的放注释里</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by niepandou on 2024/3/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断为空,不多赘述</span></span><br><span class="line">		<span class="keyword">if</span>(nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//寻找最左端</span></span><br><span class="line">		<span class="type">int</span> l = <span class="number">0</span>,r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(l &lt; r)<span class="comment">//这里特意用的左闭右开区间,写起来简单一些,不过效率低个几ms</span></span><br><span class="line">            <span class="comment">//通常来讲,用左闭右闭的都是算法佬</span></span><br><span class="line">            <span class="comment">//即写l=0,r=nums.size()区间的</span></span><br><span class="line">            <span class="comment">//这样的情况终止条件为right = right + 1,此时终止,l的值记为答案</span></span><br><span class="line">            <span class="comment">//左闭右开就是l=0,r=nums.size()-1的</span></span><br><span class="line">            <span class="comment">//while(left &lt; right) 终止的条件是 left == right，此时搜索区间 [left, left) 为空，所以可以正确终止。</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> mid = ( l + r )&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//在这里就要看看check值与target位置关系,在mid在左那就要用l向右逼近缩小范围,在右就向左逼近</span></span><br><span class="line">            <span class="comment">//因为要找最左的下标,当遇到了target时,依然要向左逼近</span></span><br><span class="line">            <span class="comment">//临界情况</span></span><br><span class="line">            <span class="comment">//if(nums[mid] == target) r = mid;</span></span><br><span class="line">			<span class="keyword">if</span>(nums[mid] &lt; target) l = mid + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> r = mid;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> ans1 = l;</span><br><span class="line">		<span class="keyword">if</span>(l == nums.<span class="built_in">size</span>() || nums[l] != target) <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			r = nums.<span class="built_in">size</span>();</span><br><span class="line">			<span class="keyword">while</span>(l &lt; r)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//同上,但遇到target时,要向右逼近</span></span><br><span class="line">                <span class="comment">//临界情况</span></span><br><span class="line">            <span class="comment">//if(nums[mid] == target) l = mid + 1;</span></span><br><span class="line">				<span class="keyword">if</span>(nums[mid] &gt; target) r = mid;</span><br><span class="line">				<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;ans1,l&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="完全二叉树的节点个数"><a href="#完全二叉树的节点个数" class="headerlink" title="完全二叉树的节点个数"></a>完全二叉树的节点个数</h2><p>递归迭代也能做,但效率差一些,这次不写了,说说二分怎么做</p>
<p>二分做这题要搭配位运算,为什么呢</p>
<p>在最后一行,我们的节点个数大致范围已经确定,那个什么k-1到那个什么k的区间里取值,此时二分里的check函数要写什么呢</p>
<p>写的就是判断某个节点存不存在,而这就需要搭配位运算进行</p>
<p>例如我们要找到节点12号,他的2进制表示为1100,以1为right,0为left,去除开头的1,我们得到的就是根节点到此节点的路径</p>
<p>以上,我们就可以写出对应的二分答案</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二分+位运算</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">find_Height</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(root)</span><br><span class="line">		&#123;</span><br><span class="line">			root = root-&gt;left;</span><br><span class="line">			res++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">count_Full_Nodes</span><span class="params">(<span class="type">int</span> height)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; height;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			res += <span class="built_in">pow</span>(<span class="number">2</span>,i);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">check_Node</span><span class="params">(TreeNode* root,<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">		<span class="keyword">while</span>(index)</span><br><span class="line">		&#123;</span><br><span class="line">			nums.<span class="built_in">push_back</span>(index % <span class="number">2</span>);</span><br><span class="line">			index /= <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		nums.<span class="built_in">pop_back</span>();<span class="comment">//删除一条走向根节点的不存在路线</span></span><br><span class="line">		std::<span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> t : nums)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(t) root = root-&gt;right;</span><br><span class="line">			<span class="keyword">else</span> root = root-&gt;left;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> root;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//一直往左遍历寻找高度</span></span><br><span class="line">		<span class="type">int</span> h = <span class="built_in">find_Height</span>(root);</span><br><span class="line">		<span class="type">int</span> l = <span class="built_in">count_Full_Nodes</span>(h<span class="number">-1</span>);</span><br><span class="line">		<span class="type">int</span> r = <span class="built_in">count_Full_Nodes</span>(h);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(l &lt; r)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">check_Node</span>(root,mid)) l = mid;</span><br><span class="line">			<span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> l;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h2><p> <a href="https://leetcode.cn/problems/add-two-numbers/">https://leetcode.cn/problems/add-two-numbers/</a></p>
<p>解题思路: 大数相加思想,链表递进</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by niepandou on 2024/3/3.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> <span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">     <span class="type">int</span> val;</span><br><span class="line">     ListNode *next;</span><br><span class="line">     <span class="built_in">ListNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">     <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">     <span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode *next) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">		ListNode* res = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">		ListNode* tmp = res;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> add = <span class="number">0</span>;<span class="comment">//进位数</span></span><br><span class="line">		<span class="keyword">while</span>(l1 || l2 || add)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(l1) sum += (*l1).val;</span><br><span class="line">			<span class="keyword">if</span>(l2) sum += (*l2).val;</span><br><span class="line">			sum += add;</span><br><span class="line">			add = sum / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">			(*tmp).val = sum % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(l1) l1 = (*l1).next;</span><br><span class="line">			<span class="keyword">if</span>(l2) l2 = (*l2).next;</span><br><span class="line"></span><br><span class="line">			ListNode* next = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">			(*tmp).next = next;</span><br><span class="line">			tmp = (*tmp).next;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//去末尾0</span></span><br><span class="line">		<span class="keyword">for</span>(ListNode* i = res;i != <span class="literal">nullptr</span>;i = (*i).next)</span><br><span class="line">		&#123;</span><br><span class="line">			ListNode* next = (*i).next;</span><br><span class="line">			<span class="keyword">if</span>((*next).val == <span class="number">0</span> &amp;&amp; (*next).next == <span class="literal">nullptr</span>) (*i).next = <span class="literal">nullptr</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/?envType=daily-question&envId=2024-03-04">https://leetcode.cn/problems/implement-queue-using-stacks/?envType=daily-question&amp;envId=2024-03-04</a></p>
<p>关键在于如何灵活运用好两个栈,由于进阶说明中提到:即使其中一个操作可能花费较长时间,可以推断出就是push操作进行一番推理,pop,top应该是O(1)复杂度</p>
<h3 id="3ms写法"><a href="#3ms写法" class="headerlink" title="3ms写法"></a>3ms写法</h3><p>push操作推理如下:</p>
<ul>
<li><p>我们认为q2中元素已经有多个,且q2就是我们pop等操作所使用的栈,我们可以试着将q2元素逆序放到q1中</p>
</li>
<li><p>假设q2还存在,此时想要将新push的元素放到q2栈底中</p>
</li>
<li><p>将新元素放进q1中,再逆序放回q2</p>
</li>
<li><p>此时的q2就是push后新形成的伪队列</p>
</li>
</ul>
<p><img src="/2024/02/27/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/image-20240304195147280.png" alt="image-20240304195147280"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by niepandou on 2024/3/4.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">MyQueue</span>() &#123;</span><br><span class="line">		stack&lt;<span class="type">int</span>&gt;* s1 = <span class="keyword">new</span> <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">		stack&lt;<span class="type">int</span>&gt;* s2 = <span class="keyword">new</span> <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">		q1 = s1;</span><br><span class="line">		q2 = s2;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> sz = q2-&gt;<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; sz;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			q1-&gt;<span class="built_in">push</span>(q2-&gt;<span class="built_in">top</span>());</span><br><span class="line">			q2-&gt;<span class="built_in">pop</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		q1-&gt;<span class="built_in">push</span>(x);</span><br><span class="line"></span><br><span class="line">		sz++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; sz;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			q2-&gt;<span class="built_in">push</span>(q1-&gt;<span class="built_in">top</span>());</span><br><span class="line">			q1-&gt;<span class="built_in">pop</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> res = q2-&gt;<span class="built_in">top</span>();</span><br><span class="line">		q2-&gt;<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> q2-&gt;<span class="built_in">top</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(q2-&gt;<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt;* q1;</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt;* q2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue* obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;peek();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="0ms写法"><a href="#0ms写法" class="headerlink" title="0ms写法"></a>0ms写法</h3><p>原理类似上面的,不解释了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by niepandou on 2024/3/4.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">MyQueue</span>() &#123;</span><br><span class="line">		stack&lt;<span class="type">int</span>&gt;* s1 = <span class="keyword">new</span> <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">		stack&lt;<span class="type">int</span>&gt;* s2 = <span class="keyword">new</span> <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">		q1 = s1;</span><br><span class="line">		q2 = s2;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		q1-&gt;<span class="built_in">push</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">swap</span>();</span><br><span class="line">		<span class="type">int</span> res = q2-&gt;<span class="built_in">top</span>();</span><br><span class="line">		q2-&gt;<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">swap</span>();</span><br><span class="line">		<span class="type">int</span> res = q2-&gt;<span class="built_in">top</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(q2-&gt;<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(!q1-&gt;<span class="built_in">empty</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				q2-&gt;<span class="built_in">push</span>(q1-&gt;<span class="built_in">top</span>());</span><br><span class="line">				q1-&gt;<span class="built_in">pop</span>();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> q1-&gt;<span class="built_in">empty</span>() &amp;&amp; q2-&gt;<span class="built_in">empty</span>();</span><br><span class="line">	&#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt;* q1;</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt;* q2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue* obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;peek();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h1 id="dfs区"><a href="#dfs区" class="headerlink" title="dfs区"></a>dfs区</h1><h2 id="NOIP2001-普及组-求先序排列"><a href="#NOIP2001-普及组-求先序排列" class="headerlink" title="[NOIP2001 普及组] 求先序排列"></a>[NOIP2001 普及组] 求先序排列</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给出一棵二叉树的中序与后序排列。求出它的先序排列。（约定树结点用不同的大写字母表示，且二叉树的节点个数 $ \le 8$）。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>共两行，均为大写字母组成的字符串，表示一棵二叉树的中序与后序排列。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>共一行一个字符串，表示一棵二叉树的先序。</p>
<h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h3><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">BADC</span></span><br><span class="line"><span class="attribute">BDCA</span></span><br></pre></td></tr></table></figure>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ABCD</span></span><br></pre></td></tr></table></figure>

<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p><strong>【题目来源】</strong></p>
<p>NOIP 2001 普及组第三题</p>
<h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by niepandou on 2024/2/27.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(string inorder,string postorder)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(inorder.<span class="built_in">length</span>() &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> ch = postorder[postorder.<span class="built_in">length</span>()<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">		cout&lt;&lt;ch;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//得到左右子树分割点,通过此点得到左右子树长度</span></span><br><span class="line">		<span class="comment">//左子树长度为k,右子树长度未知,在中序中通过substr分割掉根之前即可得到右子树的中序</span></span><br><span class="line">		<span class="comment">//在后序通过剪掉中序的左子树长度与根得到</span></span><br><span class="line">		<span class="type">int</span> k = inorder.<span class="built_in">find</span>(ch);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">solve</span>(inorder.<span class="built_in">substr</span>(<span class="number">0</span>,k),postorder.<span class="built_in">substr</span>(<span class="number">0</span>,k));</span><br><span class="line">		<span class="built_in">solve</span>(inorder.<span class="built_in">substr</span>(k+<span class="number">1</span>),postorder.<span class="built_in">substr</span>(k,inorder.<span class="built_in">length</span>() -(k +<span class="number">1</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string inorder,postorder;</span><br><span class="line">	std::cin &gt;&gt; inorder &gt;&gt; postorder;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">solve</span>(inorder,postorder);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h2><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">https://leetcode.cn/problems/binary-tree-inorder-traversal/</a></p>
<p>递归很简单,但迭代法我觉得应该往中等靠靠</p>
<p>递归法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by niepandou on 2024/3/4.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; left;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; right;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; in;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(root-&gt;left) left = <span class="built_in">inorderTraversal</span>(root-&gt;left);</span><br><span class="line">		<span class="keyword">if</span>(root) in.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">		<span class="keyword">if</span>(root-&gt;right) right = <span class="built_in">inorderTraversal</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(!left.<span class="built_in">empty</span>()) res.<span class="built_in">insert</span>(res.<span class="built_in">end</span>(),left.<span class="built_in">begin</span>(),left.<span class="built_in">end</span>());</span><br><span class="line">		<span class="keyword">if</span>(!in.<span class="built_in">empty</span>()) res.<span class="built_in">insert</span>(res.<span class="built_in">end</span>(),in.<span class="built_in">begin</span>(),in.<span class="built_in">end</span>());</span><br><span class="line">		<span class="keyword">if</span>(!right.<span class="built_in">empty</span>()) res.<span class="built_in">insert</span>(res.<span class="built_in">end</span>(),right.<span class="built_in">begin</span>(),right.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>迭代法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">		stack&lt;TreeNode*&gt; st;</span><br><span class="line">		TreeNode* cur = root;</span><br><span class="line">		<span class="comment">//利用栈实现非递归写法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//让节点一直往左遍历,直接左节点无法继续走</span></span><br><span class="line">		<span class="comment">//回溯到上一个根节点,因为栈里存的刚好是这个节点,让其出栈后将右节点入栈,继续上述操作</span></span><br><span class="line">		<span class="keyword">while</span>(cur || !st.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (cur)</span><br><span class="line">			&#123;</span><br><span class="line">				st.<span class="built_in">push</span>(cur);</span><br><span class="line">				cur = cur-&gt;left;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				cur = st.<span class="built_in">top</span>();</span><br><span class="line">				st.<span class="built_in">pop</span>();</span><br><span class="line">				res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line"></span><br><span class="line">				cur = cur-&gt;right;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/">https://leetcode.cn/problems/validate-binary-search-tree/</a></p>
<p>没听说过,所以学学</p>
<h3 id="二叉搜索树概念"><a href="#二叉搜索树概念" class="headerlink" title="二叉搜索树概念"></a>二叉搜索树概念</h3><p>二叉搜索树（BST，Binary Search Tree），也称<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91&spm=1001.2101.3001.7020">二叉排序树</a>或二叉查找树。<br>二叉搜索树：一棵二叉树，可以为空；如果不为空，满足以下性质：</p>
<ol>
<li><p>非空左子树的所有键值小于其根结点的键值。</p>
</li>
<li><p>非空右子树的所有键值大于其根结点的键值。</p>
</li>
<li><p>左、右子树都是二叉搜索树。</p>
</li>
<li><p>查找操作:</p>
<p>（1）查找从根结点开始，如果树为空，返回NULL<br>（2）若搜索树非空，则根结点关键字和X进行比较，并进行不同处理：<br>  ① 若X小于根结点键值，只需在左子树中继续搜索；<br>  ② 如果X大于根结点的键值，在右子树中进行继续搜索；<br>  ③若两者比较结果是相等，搜索完成，返回指向此结点的指针。</p>
</li>
</ol>
<p>尾递归查找:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TNode</span> *Position;</span><br><span class="line"><span class="keyword">typedef</span> Position BinTree; <span class="comment">/* 二叉树类型 */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TNode</span>&#123; <span class="comment">/* 树结点定义 */</span></span><br><span class="line">	ElementType Data; <span class="comment">/* 结点数据 */</span></span><br><span class="line">	BinTree Left;     <span class="comment">/* 指向左子树 */</span></span><br><span class="line">	BinTree Right;    <span class="comment">/* 指向右子树 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X,BinTree BST)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!BST) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(X &gt; BST-&gt;Data) <span class="keyword">return</span> <span class="built_in">Find</span>(X,BST-&gt;Right);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(X &lt; BST-&gt;Data) <span class="keyword">return</span> <span class="built_in">Find</span>(X,BST-&gt;Left);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>迭代法查找</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X,BinTree BST)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(BST)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(X &gt; BST-&gt;Data)</span><br><span class="line">			BST = BST-&gt;Right;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(X &lt; BST-&gt;Data)</span><br><span class="line">			BST = BST-&gt;Left;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> BST;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nullptr</span>;<span class="comment">//查找无果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="查找最大最小元素"><a href="#查找最大最小元素" class="headerlink" title="查找最大最小元素"></a>查找最大最小元素</h3><p>①最大元素一定是在树的最右分枝的端结点上。<br>②最小元素一定是在树的最左分枝的端结点上。</p>
<p>因此可以通过查找左树里查找没有左节点只有右树的节点查找最小值</p>
<p>同理找最大值,他们两个都是唯一的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代查最小</span></span><br><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(BinTree BST)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(BST)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(BST-&gt;Left) BST = BST-&gt;Left;</span><br><span class="line">		<span class="keyword">return</span> BST;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="搜索树插入"><a href="#搜索树插入" class="headerlink" title="搜索树插入"></a>搜索树插入</h3><p>二叉搜索树在插入前，肯定要找到插入的位置。所以解决这个问题的关键就是要找到元素应该插入的位置，可以采用与Find类似的方法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Position <span class="title">insert</span><span class="params">(ElementType X,BinTree BST)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!BST)</span><br><span class="line">	&#123;</span><br><span class="line">		BST = (BinTree)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> TreeNode));</span><br><span class="line">		BST-&gt;Data = X;</span><br><span class="line">		BST-&gt;Left = BST-&gt;Right = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span>(BST)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(X &gt; BST-&gt;Data)</span><br><span class="line">				BST-&gt;Right = <span class="built_in">insert</span>(X,BST-&gt;Right);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(X &lt; BST-&gt;Data)</span><br><span class="line">				BST-&gt;Left = <span class="built_in">insert</span>(X,BST-&gt;Left);</span><br><span class="line">			<span class="comment">//else 已存在,不需要做任何事</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="搜索树删除"><a href="#搜索树删除" class="headerlink" title="搜索树删除"></a>搜索树删除</h3><p>对于二叉搜索树的删除，相对来说就比较麻烦了。因为要考虑以下三种情况：<br>①要删除的是叶结点；<br>②要删除的结点只有一个孩子结点；<br>③要删除的结点有左、右两棵子树；</p>
<p><strong>情况①：</strong><br>叶结点就是左右子树都为空的结点，既然左右子树都为空，删掉它并没什么后顾之忧，所以当我们要删除的是叶结点的时候，直接删除就好了。当然不要忘记一个重要的操作——<strong>删除之后要修改其父结点指针，即置为NULL。</strong></p>
<p><strong>情况②：</strong><br>当要删除的结点只有一个孩子结点，我们删除该结点后需要考虑怎么处置它的孩子结点。因为被删除的结点的孩子无论是左孩子还是右孩子，都只会比被删除的结点的父结点小，所以我们只需要将被删除的结点的父结点的指针指向被删除的结点的孩子结点。</p>
<p>情况③：<br>当删除的结点有左、右两棵子树，我们删除该结点后需要考虑怎么处置它的孩子结点。此时最简单的办法就是用另一结点替代被删除结点，那我们要用哪一个结点呢？根据二叉搜索树的定义：每一个结点的右孩子都比自己大，左孩子都比自己小。要取哪一个结点替代被删除的结点同时又保证该特性呢？所以根据此情况，我们很快就能判断出用被删除结点的右子树的最小元素或者左子树的最大元素替代被删除结点。</p>
<p><strong>值得注意的是：当我们找到元素替代被删除的结点后，我们也要删除用来替代元素。删除该元素的方法也是按照以上3种情况分析</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(BinTree)</span></span>;</span><br><span class="line"><span class="function">BinTree <span class="title">Delete</span><span class="params">(ElementType X,BinTree BST)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Position Tmp;</span><br><span class="line">	<span class="keyword">if</span>(!BST)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(X &lt; BST-&gt;Data)</span><br><span class="line">			BST-&gt;Left = <span class="built_in">Delete</span>(X,BST-&gt;Left);<span class="comment">//赋值操作如果不理解,可以画一个树走一遍</span></span><br><span class="line">			<span class="comment">//函数中的BST改变后返回,就是重新连接的过程,没有改变就还是原来的值</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(X &gt; BST-&gt;Data)</span><br><span class="line">			BST-&gt;Right = <span class="built_in">Delete</span>(X,BST-&gt;Right);</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//找到该值</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">//如果删除的是拥有左右子树的</span></span><br><span class="line">			<span class="keyword">if</span>(BST-&gt;Left &amp;&amp; BST-&gt;Right)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//寻找右子树最小元素</span></span><br><span class="line">				Tmp = <span class="built_in">FindMin</span>(BST-&gt;Right);</span><br><span class="line">				BST-&gt;Data = Tmp-&gt;Data;</span><br><span class="line">				<span class="comment">//删除最小元素</span></span><br><span class="line">				BST-&gt;Right = <span class="built_in">Delete</span>(BST-&gt;Data,BST-&gt;Right);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				Tmp = BST;</span><br><span class="line">				<span class="comment">//有一个节点</span></span><br><span class="line">				<span class="keyword">if</span>(!BST-&gt;Left)</span><br><span class="line">					BST = BST-&gt;Right;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					BST = BST-&gt;Left;</span><br><span class="line">				<span class="built_in">free</span>(Tmp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>题目</p>
<p><a href="https://leetcode.cn/problems/validate-binary-search-tree/">https://leetcode.cn/problems/validate-binary-search-tree/</a></p>
<p>做完发现和二叉搜索树应用没啥联系</p>
<p>关键点在于理解搜索二叉树左小右大.因此我们可以通过中序遍历得到一串升序数组,判断数组里是否有降序即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by niepandou on 2024/3/5.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::stack;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">		stack&lt;TreeNode*&gt; st;</span><br><span class="line">		vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; arr;</span><br><span class="line">		TreeNode* cur = root;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(cur || !st.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(cur)</span><br><span class="line">			&#123;</span><br><span class="line">				st.<span class="built_in">push</span>(cur);</span><br><span class="line">				cur = cur-&gt;left;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				cur = st.<span class="built_in">top</span>();</span><br><span class="line">				arr.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">				st.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">				cur = cur-&gt;right;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> sz = arr.<span class="built_in">size</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; sz;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i] &lt; arr[i<span class="number">-1</span>] || arr[i] == arr[i<span class="number">-1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="恢复二叉搜索树"><a href="#恢复二叉搜索树" class="headerlink" title="恢复二叉搜索树"></a>恢复二叉搜索树</h2><p><a href="https://leetcode.cn/problems/recover-binary-search-tree/description/">99. 恢复二叉搜索树 - 力扣（LeetCode）</a></p>
<p>也是因为中序遍历后得到的升序数组有问题,和排序后的进行比较,找到不同的两者进行交换即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by niepandou on 2024/3/6.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//题目链接https://leetcode.cn/problems/recover-binary-search-tree/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::stack;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//中序遍历存入数组</span></span><br><span class="line">		stack&lt;TreeNode*&gt; st;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">		TreeNode* cur = root;</span><br><span class="line">		map&lt;<span class="type">int</span>,TreeNode*&gt; m;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(cur || !st.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(cur)</span><br><span class="line">			&#123;</span><br><span class="line">				st.<span class="built_in">push</span>(cur);</span><br><span class="line">				cur = cur-&gt;left;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				cur = st.<span class="built_in">top</span>();</span><br><span class="line">				arr.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">				m[cur-&gt;val] = cur;</span><br><span class="line">				st.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">				cur = cur-&gt;right;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//查找不对的值</span></span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; arr2 = arr;</span><br><span class="line"></span><br><span class="line">		std::<span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> dif[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> sz = arr.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; sz;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i] != arr2[i]) dif[index++] = arr[i];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//根据不同的值找到对应的地址并交换</span></span><br><span class="line">		<span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		tmp = m[dif[<span class="number">0</span>]]-&gt;val;</span><br><span class="line">		m[dif[<span class="number">0</span>]]-&gt;val = m[dif[<span class="number">1</span>]]-&gt;val;</span><br><span class="line">		m[dif[<span class="number">1</span>]]-&gt;val = tmp;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="对称二叉树-相同二叉树"><a href="#对称二叉树-相同二叉树" class="headerlink" title="对称二叉树,相同二叉树"></a>对称二叉树,相同二叉树</h2><p>一开始我是不会的,但是看了代码随想录的题解,哇,原来还能这么遍历,因此我要把这两题加进来,他们的原理是差不多的,对称二叉树是内外比较,相同二叉树就是普通的比较</p>
<p>题目链接</p>
<p><a href="https://leetcode.cn/problems/symmetric-tree/">101. 对称二叉树 - 力扣（LeetCode）</a></p>
<p>将根节点左右子树看成两个单独的树,分割开来,从根节点开始比较</p>
<p>根节点的多种情况比较完之后,将两棵树外侧根节点加入到递归,栈,队列当中(下一次比较的就是外侧根节点),接着比较内侧根节点</p>
<p>如此往复形成了递归或者迭代</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(TreeNode* left,TreeNode* right)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!left &amp;&amp; !right) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(!left || !right) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(left-&gt;val != right-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">bool</span> outside = <span class="built_in">compare</span>(left-&gt;left,right-&gt;right);</span><br><span class="line">			<span class="type">bool</span> inside = <span class="built_in">compare</span>(left-&gt;right,right-&gt;left);</span><br><span class="line">			<span class="keyword">return</span> outside &amp;&amp; inside;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">compare</span>(root-&gt;left,root-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迭代(队列)(队列和栈写法一样,都是两两取出来比较)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//队列</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(TreeNode* left,TreeNode* right)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		queue&lt;TreeNode*&gt; q;</span><br><span class="line">		q.<span class="built_in">push</span>(left);</span><br><span class="line">		q.<span class="built_in">push</span>(right);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			TreeNode* r = q.<span class="built_in">front</span>();</span><br><span class="line">			q.<span class="built_in">pop</span>();</span><br><span class="line">			TreeNode* l = q.<span class="built_in">front</span>();</span><br><span class="line">			q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">if</span>(!l &amp;&amp; !r) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(!l || !r) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(l-&gt;val != r-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				q.<span class="built_in">push</span>(l-&gt;left);</span><br><span class="line">				q.<span class="built_in">push</span>(r-&gt;right);</span><br><span class="line">				q.<span class="built_in">push</span>(l-&gt;right);</span><br><span class="line">				q.<span class="built_in">push</span>(r-&gt;left);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">compare</span>(root-&gt;left,root-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><a href="https://leetcode.cn/problems/same-tree/">100. 相同的树 - 力扣（LeetCode）</a></p>
<p>原理和对称二叉树是一样的,这次比较的同样是两棵树,但是是按照正常的左右遍历来</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!p &amp;&amp; !q) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(!p || !q) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;val != q-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">bool</span> left = <span class="built_in">isSameTree</span>(p-&gt;left,q-&gt;left);</span><br><span class="line">			<span class="type">bool</span> right = <span class="built_in">isSameTree</span>(p-&gt;right,q-&gt;right);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> left &amp;&amp; right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(p == <span class="literal">nullptr</span> || q == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span>(p == <span class="literal">nullptr</span>|| q == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		stack&lt;TreeNode*&gt; st;</span><br><span class="line"></span><br><span class="line">		st.<span class="built_in">push</span>(p);</span><br><span class="line">		st.<span class="built_in">push</span>(q);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(!st.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			TreeNode* left = st.<span class="built_in">top</span>();</span><br><span class="line">			st.<span class="built_in">pop</span>();</span><br><span class="line">			TreeNode* right = st.<span class="built_in">top</span>();</span><br><span class="line">			st.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (!left &amp;&amp; !right)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(!left || !right || (left-&gt;val != right-&gt;val)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">			st.<span class="built_in">push</span>(left-&gt;left);</span><br><span class="line">			st.<span class="built_in">push</span>(right-&gt;left);</span><br><span class="line">			st.<span class="built_in">push</span>(left-&gt;right);</span><br><span class="line">			st.<span class="built_in">push</span>(right-&gt;right);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划和记忆化搜索可以相互转换,在做动态规划时可以试着转换成记忆化搜索解答,同样的记忆化搜索也可以转换成动态规划解决</p>
<p>关键点在于: 如何把一个问题分解为多个子问题(x)</p>
<p><strong>真正的关键</strong>,<strong>true</strong> <strong>point</strong> <strong>is</strong>,<strong>动规五部曲</strong></p>
<p>没有动规五部曲,你就度过了一个失败的人生,这里有一个非常棒的讲解动规五部曲的详细教程</p>
<p>请看:<a href="https://www.programmercarl.com/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">代码随想录 (programmercarl.com)</a></p>
<p>看完之后,请随我复习一遍</p>
<p>动规五部曲步骤:</p>
<p>1.确定dp定义,写出dp数组</p>
<p>2.确定递推公式,状态转移方程</p>
<p>3.初始化数组</p>
<p>4.确定遍历顺序</p>
<p>5.推导dp数组,打印确认是否有误</p>
<ul>
<li>下面一题是初期按照第一法得来的,可以不看,再下一页我会用动规五部曲解释</li>
</ul>
<p><a href="https://leetcode.cn/problems/perfect-squares/?envType=study-plan-v2&envId=top-100-liked">279. 完全平方数 - 力扣（LeetCode）</a></p>
<p>例如此题: 该问题是如何得到方案数最小的完全平方数和方案,我们可以设想一下答案的上一次是什么情况</p>
<p>例如13,他的上一个数必定是由一个数加一个平方数得到的</p>
<p>因此我们可以通过减去这个平方数得到上一个数,得到上一个数的方案数</p>
<p>依次类推就是分解为了多个子问题,从最小不能再小的子问题1开始计算,</p>
<p>得到最终大问题的答案</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by niepandou on 2024/3/17.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//子问题: n - 1? x  去除一个平方的上一个答案方案数</span></span><br><span class="line">		<span class="comment">//例如12, 12 -&gt; 9 - &gt; 1 1 1? x  12 -&gt; 4 4 4</span></span><br><span class="line">		<span class="comment">//13 -&gt; 12 + 1? x 13-&gt;9-&gt; 4</span></span><br><span class="line">		<span class="comment">//状态转移方程: dp[i] = dp[i - j*j]</span></span><br><span class="line">		<span class="comment">//方案数为最小,那么计算完加1,取min</span></span><br><span class="line">		<span class="type">int</span> dp[N];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> min = INT_MAX;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j * j &lt;= i;++j)</span><br><span class="line">			&#123;</span><br><span class="line">				min = std::<span class="built_in">min</span>(min,dp[i - j*j]);</span><br><span class="line">			&#125;</span><br><span class="line">			dp[i] = min + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> dp[n];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="一维dp-普通dp"><a href="#一维dp-普通dp" class="headerlink" title="一维dp,普通dp"></a>一维dp,普通dp</h2><h3 id="完全平方数"><a href="#完全平方数" class="headerlink" title="完全平方数"></a>完全平方数</h3><p><a href="https://leetcode.cn/problems/perfect-squares/description/?envType=study-plan-v2&envId=top-100-liked">279. 完全平方数 - 力扣（LeetCode）</a></p>
<ol>
<li><p>轻易得知,dp数组存的一定是当前下标i对应的完全平方数的最少数量</p>
</li>
<li><p>让我们随机挑一个数,例如59,我们可以在此基础上减去一个平方数,</p>
<p>例如59-4 &#x3D; 55,假设我们已经算出来了55的最少完全平方数(实际运算到59时也是已知的),那么dp[59] &#x3D; std::min(dp[59],dp[55] + 1)(关键最少所以选min)</p>
<p>推出状态转移方程为dp[i] &#x3D; std::min(dp[i],dp[i-j * j] + 1);&#x2F;&#x2F;j从0-i中选,且j*j &lt;&#x3D; i;</p>
</li>
<li><p>得到了递推关系式,我们也就能根据此来进行初始化</p>
</li>
</ol>
<p>​		我们现在需要初始化的仅有dp[0],让其 &#x3D; 0, 此时我们算得的dp[1] &#x3D; 1,dp[4] &#x3D; 1,等等</p>
<ol start="4">
<li>遍历顺序0-i,j-i</li>
<li>推导方程,检验</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="comment">//dp记录的是数值为i时所需的最少完全平方数数量</span></span><br><span class="line"></span><br><span class="line">		dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			dp[i] = INT_MAX;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j * j &lt;= i;++j)</span><br><span class="line">			&#123;</span><br><span class="line">				dp[i] = std::<span class="built_in">min</span>(dp[i],dp[i- j * j] + <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dp[n];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="斐波那契"><a href="#斐波那契" class="headerlink" title="斐波那契"></a>斐波那契</h2><h3 id="dp入门-斐波那契数列"><a href="#dp入门-斐波那契数列" class="headerlink" title="dp入门,斐波那契数列"></a>dp入门,斐波那契数列</h3><p><a href="https://leetcode.cn/problems/fibonacci-number/description/?envType=study-plan-v2&envId=dynamic-programming">509. 斐波那契数 - 力扣（LeetCode）</a></p>
<p>dp的入门必做一题,想必大家都会了</p>
<p>现在我们用五部曲的思路顺一遍</p>
<ol>
<li>定义dp数组</li>
</ol>
<p>​	显而易见,dp根据下标i存储对应的斐波那契数</p>
<ol start="2">
<li><p>递推公式</p>
<p>这个题目已经告诉你了,也是为什么这道题如此简单的原因</p>
<p>dp[i] &#x3D; dp[i-1] + dp[i-2];</p>
</li>
<li><p>初始化数组</p>
<p>首先我们根据递推公式,每次计算都需要前两个数的状态,那么初始化必定需要初始化0和1</p>
</li>
<li><p>遍历顺序应当从2开始,0和1都无法使用这条递推公式</p>
</li>
<li><p>检验一遍,并考虑到n &#x3D;&#x3D; 0时,初始化1无法进行,因为发生了数组越界,</p>
<p>因此我们可以在n &#x3D;&#x3D; 0时直接返回结果</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;++i) dp[i] = dp[i<span class="number">-1</span>] + dp[i<span class="number">-2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="最小花费"><a href="#最小花费" class="headerlink" title="最小花费"></a>最小花费</h3><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/description/?envType=study-plan-v2&envId=dynamic-programming">746. 使用最小花费爬楼梯 - 力扣（LeetCode）</a></p>
<p>这一次是入门状态转移的经典,我们通过之前的状态来得到当前状态的最佳方案</p>
<ol>
<li>确定dp数组</li>
</ol>
<p>​	dp[i]表示的就是在到达i阶楼梯时的最小花费</p>
<ol start="2">
<li><p>dp[i] &#x3D; std::min(dp[i-1] + cost[i-1],dp[i-2] + cost[i-2])</p>
<p>根据题意很容易得出来</p>
</li>
<li><p>初始化dp[0] &#x3D; 0,dp[1] &#x3D; 0,因为我们每次更新dp都需要前两次状态,且我们可以选择从0或者从1出发</p>
</li>
<li><p>从前到后遍历</p>
</li>
<li><p>检验没有其余特殊情况</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(cost.size() + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">2</span>;i &lt;= cost.<span class="built_in">size</span>();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>] + cost[i<span class="number">-1</span>],dp[i<span class="number">-2</span>] + cost[i<span class="number">-2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[cost.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
