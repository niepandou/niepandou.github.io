<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/11/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>杨辉三角形</title>
    <url>/2023/11/15/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BB%8F%E5%85%B8%E6%95%B0%E5%AD%A6%E9%A2%98%E3%80%91%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
    <content><![CDATA[<h1 id="杨辉三角一图览"><a href="#杨辉三角一图览" class="headerlink" title="杨辉三角一图览"></a>杨辉三角一图览</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line">			  			<span class="attribute">1</span></span><br><span class="line">					<span class="attribute">1</span>		<span class="number">1</span></span><br><span class="line">				<span class="attribute">1</span>		<span class="number">2</span>      <span class="number">1</span></span><br><span class="line">			<span class="attribute">1</span>       <span class="number">3</span>	    <span class="number">3</span>      <span class="number">1</span></span><br><span class="line">		<span class="attribute">1</span>		<span class="number">4</span>		<span class="number">6</span>		<span class="number">4</span> 		<span class="number">1</span></span><br><span class="line">	<span class="attribute">1</span>		<span class="number">5</span>		<span class="number">10</span>		<span class="number">10</span>		<span class="number">5</span>		<span class="number">1</span></span><br><span class="line"><span class="attribute">1</span>		<span class="number">6</span>		<span class="number">15</span>		<span class="number">20</span>		<span class="number">15</span>		<span class="number">6</span>		<span class="number">1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由图可知杨辉三角具有对称性，很多时候可以折半计算，节省时间<br>同时我们可以以排列组合的方式将杨辉三角展现出来</p>
</blockquote>
<p>借个图先<br><img src="https://img-blog.csdnimg.cn/d2a520baba134d9a9f429c858315b96d.png" alt="在这里插入图片描述"></p>
<blockquote>
<h1 id="求杨辉三角任意一行"><a href="#求杨辉三角任意一行" class="headerlink" title="求杨辉三角任意一行"></a>求杨辉三角任意一行</h1><p>我们在编程界中经常把排列组合中的公式用A（a,b），C(a,b)表示<br>比如C（5,2） &#x3D; 10<br>那么对n-1行的公式可以写成<br>C（n，r） &#x3D; （n-r + 1）&#x2F; r * C(n,r-1);<br> 杨辉三角的每一行初始值为C(n,0) &#x3D; 1</p>
</blockquote>
<p> 又根据杨辉三角的对称性，我们可以折半计算，在计算中心轴左边的值的同时也能将右边的值算出来</p>
<p>该公式的应用<br><a href="https://www.luogu.com.cn/problem/P1118">lP1118 [USACO06FEB]Backward Digit Sums G&#x2F;S</a></p>
<p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,sum;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> delta[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getdelta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	delta[<span class="number">0</span>] = delta[n<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(n &gt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i*<span class="number">2</span> &lt;= n;++i)</span><br><span class="line">			delta[i] = delta[n-i<span class="number">-1</span>] = (n-i) * delta[i<span class="number">-1</span>]/i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> num,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(v &gt; sum) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(u == n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(v == sum)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u] = num;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	st[num] = <span class="literal">true</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!st[i] &amp;&amp; <span class="built_in">dfs</span>(u + <span class="number">1</span>,i,v + delta[u] * i))</span><br><span class="line">		&#123;</span><br><span class="line">			a[u] = num;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	st[num] = <span class="literal">false</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;sum;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">getdelta</span>();<span class="comment">//得到第n层杨辉三角 </span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)) <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h1 id="求杨辉三角某一值起始位置"><a href="#求杨辉三角某一值起始位置" class="headerlink" title="求杨辉三角某一值起始位置"></a>求杨辉三角某一值起始位置</h1><p>经过多数人的研究，已经找到了一种非常精妙的方法来快速确定任意值的起始位置，所耗时间只需4ms</p>
</blockquote>
<p>首先再看一次图</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line">			  			<span class="attribute">1</span></span><br><span class="line">					<span class="attribute">1</span>		<span class="number">1</span></span><br><span class="line">				<span class="attribute">1</span>		<span class="number">2</span>      <span class="number">1</span></span><br><span class="line">			<span class="attribute">1</span>       <span class="number">3</span>	    <span class="number">3</span>      <span class="number">1</span></span><br><span class="line">		<span class="attribute">1</span>		<span class="number">4</span>		<span class="number">6</span>		<span class="number">4</span> 		<span class="number">1</span></span><br><span class="line">	<span class="attribute">1</span>		<span class="number">5</span>		<span class="number">10</span>		<span class="number">10</span>		<span class="number">5</span>		<span class="number">1</span></span><br><span class="line"><span class="attribute">1</span>		<span class="number">6</span>		<span class="number">15</span>		<span class="number">20</span>		<span class="number">15</span>		<span class="number">6</span>		<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>我们可以将杨辉三角的右半边删掉，因为杨辉三角的对称性，显而易见我们能推导出任意值的起始位置一定在左半边</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line">			  			<span class="attribute">1</span></span><br><span class="line">					<span class="attribute">1</span>		</span><br><span class="line">				<span class="attribute">1</span>		<span class="number">2</span>      </span><br><span class="line">			<span class="attribute">1</span>       <span class="number">3</span>	    </span><br><span class="line">		<span class="attribute">1</span>		<span class="number">4</span>		<span class="number">6</span>		</span><br><span class="line">	<span class="attribute">1</span>		<span class="number">5</span>		<span class="number">10</span>	</span><br><span class="line"><span class="attribute">1</span>		<span class="number">6</span>		<span class="number">15</span>		<span class="number">20</span>	</span><br></pre></td></tr></table></figure>
<p>得到该图后我们发现，我们可以通过斜行位置与行位置来确定某一值<br>假设起始行数与斜行都为0<br>比如我们求C（6,3），组合数C（6,3） &#x3D; 20<br>该过程代码</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">//C(a,b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a, j = <span class="number">1</span>;j &lt;= b;--i, ++j)</span><br><span class="line">	&#123;</span><br><span class="line">			res = res * i / j;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>同时我们可以确定，这一斜行找到的值的位置，总会比他上面一个斜行找到同一值的位置要小<br>因此我们可以倒着枚举每一斜行来寻找某一值，找到的位置一定是起始位置</p>
<p>而且每一斜行k的起始行数n，总有一种规律 2*k &#x3D; n</p>
<p>现在我们总结一下前面找到的规律<br>1.通过斜行与行的位置可以推断某一值<br>2.倒着枚举每一斜行可以找到该值的第一次出现位置<br>3.斜行k * 2 &#x3D; 斜行起始行数n<br>4.由123点我们可以通过二分查找行来寻找该值，起始行为2*k，终点行为n（选择n是因为n足够大）<br>补充一点，如果已知某一行数n，可以推断该行之前总共有C（n，2）个数，在把斜行看做列，即可得到某一值的位置公式</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pos</span> = (n + <span class="number">1</span>）*n / <span class="number">2</span> + k +<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>例题<br><a href="https://www.luogu.com.cn/problem/P8749">P8749 [蓝桥杯 2021 省 B] 杨辉三角形</a><br>实现代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">//C(a,b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a, j = <span class="number">1</span>;j &lt;= b;--i, ++j)</span><br><span class="line">	&#123;</span><br><span class="line">		res = res * i / j;</span><br><span class="line">		<span class="keyword">if</span> (res &gt; n) <span class="keyword">return</span> res;<span class="comment">//防止超过n直接爆long long，提前退出</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>)<span class="comment">//因为C（2,1）不存在，需要特判</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">16</span>;i &gt;= <span class="number">1</span>;--i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> l = <span class="number">2</span> * i, r = <span class="built_in">max</span>(l, n);<span class="comment">//有可能l比n大</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (l &lt; r)<span class="comment">//二分查找左端点</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">long</span> <span class="type">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">C</span>(mid, i) &lt; n) l = mid + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> r = mid;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">C</span>(l, i) == n)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; (l + <span class="number">1</span>) * l / <span class="number">2</span> + i + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>c语言后期笔记</title>
    <url>/2023/11/16/c%E7%AC%94%E8%AE%B0%E7%BB%AD./</url>
    <content><![CDATA[<h2 id="字符函数-内存函数使用"><a href="#字符函数-内存函数使用" class="headerlink" title="字符函数&amp;内存函数使用"></a>字符函数&amp;内存函数使用</h2><h3 id="0-NULL-–-空指针"><a href="#0-NULL-–-空指针" class="headerlink" title="0.NULL – 空指针"></a>0.NULL – 空指针</h3><h3 id="NUL-Null-–-‘-0’"><a href="#NUL-Null-–-‘-0’" class="headerlink" title="NUL,Null    – ‘\0’"></a>NUL,Null    – ‘\0’</h3><h3 id="1-strtok函数"><a href="#1-strtok函数" class="headerlink" title="1.strtok函数"></a>1.strtok函数</h3><p>样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">	<span class="type">char</span>* p = <span class="string">&quot;.,&quot;</span>;</span><br><span class="line">	<span class="type">char</span>* ret = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span>(ret = strtok(str,p);ret != <span class="literal">NULL</span>;ret = strtok(<span class="literal">NULL</span>,p))</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ret);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>1.1 函数的作用</p>
<p>​		将字符数组以特定字符分隔开，字符可以是任意几个特定的字符</p>
<p>​		1.2 函数参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">strtok</span><span class="params">(<span class="type">char</span> * str,<span class="type">const</span> <span class="type">char</span> * sep)</span></span><br></pre></td></tr></table></figure>

<p>​		1.3 如果找到特定字符，会直接将原字符数组的该位置字符改为 ‘&#x2F;0’	</p>
<p>​		1.4 传入的str不为空指针NULL，strtok将找到str的第一个标记，并保存他在字符串中的位置</p>
<p>​		1.5 传入的str为空指针NULL，函数将在同一个字符串中被保存的位置开始，查找下一个标记</p>
<p>​		1.6 如果传入的str中有sep函数中两个至多个字符连续存在的情况，也会分隔，而不是空出一个位置</p>
<h3 id="2-strerror函数"><a href="#2-strerror函数" class="headerlink" title="2.strerror函数"></a>2.strerror函数</h3><p>样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// errno是什么和strerror怎么用</span></span><br><span class="line">	<span class="type">char</span>* str = strerror(errno); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//strerror的应用</span></span><br><span class="line">	FILE* pf = fopen(<span class="string">&quot;test.c&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="comment">//以可读方式打开test.c文件 </span></span><br><span class="line">	<span class="keyword">if</span>(pf == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));<span class="comment">//报告错误信息</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,pf);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2.1 函数作用</p>
<p>​	返回错误码所对应的信息,即将错误码转换成一个字符串并返回，告诉程序员报错信息</p>
<p>2.2 errno</p>
<p>​	一个全局变量，即错误码</p>
<p>​	当程序执行过程中出现了错误，就会把对应的错误码赋值到errno中</p>
<p>2.3 对应信息</p>
<p>​	错误码	对应信息</p>
<p>​	0 	– 	NO ERROR 无错误</p>
<p>​	1 	– 	Operation not permitted</p>
<p>​	2 	– 	No such file or directory</p>
<p>​	…</p>
<h3 id="3-字符分类函数"><a href="#3-字符分类函数" class="headerlink" title="3. 字符分类函数"></a>3. 字符分类函数</h3><p>样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">	<span class="type">int</span> st = <span class="built_in">islower</span>(ch);</span><br><span class="line">	<span class="keyword">if</span>(st) <span class="built_in">printf</span>(<span class="string">&quot;是小写字母&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;不是小写字母&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3.1 </p>
<p>函数			如果他的参数符合下列条件就返回真<br>iscntrl			任何控制字符<br>isspace		空白字符:空格’ ‘，换页’\f’，换行’\n’，回车‘\r’，制表符’t’或者垂直制表符’\v’<br>isdigit			十进制数字0-9<br>isxdigit		十六进制数字，包括所有十进制数字，小写字母a<del>f大写字母A</del>F<br>islower		小写字母a-z<br>isupper		大写字母A<del>Z<br>isalpha		字母a</del>z或A<del>Z<br>isalnum		字母或者数字，a</del>z,A<del>Z,0</del>9<br>ispunct		标点符号，任何不属于数字或者字母的图形字符（可打印)<br>isgraph		任何图形字符<br>isprint		任何可打印字符，包括图形字符和空白字符</p>
<p>3.2 字符转换函数</p>
<p>样例 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">	ch = <span class="built_in">toupper</span>(ch);</span><br><span class="line">	<span class="built_in">putchar</span>(ch);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​	tolower函数：转为小写字母</p>
<p>​	toupper函数：转为大写字母</p>
<h3 id="4-strlen函数的返回值为size-t，为无符号数"><a href="#4-strlen函数的返回值为size-t，为无符号数" class="headerlink" title="4.strlen函数的返回值为size_t，为无符号数"></a>4.strlen函数的返回值为size_t，为无符号数</h3><h3 id="5-strcmp-arr1-arr2-比较字符串函数"><a href="#5-strcmp-arr1-arr2-比较字符串函数" class="headerlink" title="5.strcmp(arr1,arr2)比较字符串函数"></a>5.strcmp(arr1,arr2)比较字符串函数</h3><h3 id="6-strncmp函数"><a href="#6-strncmp函数" class="headerlink" title="6.strncmp函数"></a>6.strncmp函数</h3><p>样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* string1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* string2 = <span class="string">&quot;abcefg&quot;</span>;</span><br><span class="line">	<span class="type">int</span> ret = <span class="built_in">strncmp</span>(string1,string2,<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ret);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>6.1 作用</p>
<p>指定前n个长度的字符串比较</p>
<p>6.2 函数参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">strncmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* string1,<span class="type">const</span> <span class="type">char</span>* <span class="built_in">string</span> <span class="number">2</span>, <span class="type">size_t</span> count)</span></span><br></pre></td></tr></table></figure>



<h3 id="7-strstr函数"><a href="#7-strstr函数" class="headerlink" title="7.strstr函数"></a>7.strstr函数</h3><p>样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span>* str1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">	<span class="type">char</span>* str2 = <span class="string">&quot;def&quot;</span>;</span><br><span class="line">	<span class="type">char</span>* ret = <span class="built_in">strstr</span>(str1,str2);</span><br><span class="line">	<span class="keyword">if</span>(ret == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;未找到&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;找到了，接下来的字符串是%s&quot;</span>,ret);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7.1 作用</p>
<p>查找指定字符串，如果找到则返回首字符的地址，如果没找到则返回NULL</p>
<h2 id="内存操作函数-同样需要string-h库函数"><a href="#内存操作函数-同样需要string-h库函数" class="headerlink" title="内存操作函数(同样需要string.h库函数)"></a>内存操作函数(同样需要string.h库函数)</h2><p>样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr1[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">	<span class="type">int</span> arr2[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">memcpy</span>(arr2,arr1,<span class="keyword">sizeof</span>(arr2));</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">5</span>;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr2[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-memcpy内存拷贝函数"><a href="#1-memcpy内存拷贝函数" class="headerlink" title="1. memcpy内存拷贝函数"></a>1. memcpy内存拷贝函数</h3><p>​		1.1 作用</p>
<p>​		处理不重叠的数组拷贝</p>
<h3 id="2-memmove内存拷贝函数"><a href="#2-memmove内存拷贝函数" class="headerlink" title="2.memmove内存拷贝函数"></a>2.memmove内存拷贝函数</h3><p>​	2.1作用</p>
<p>​	处理重叠的数组拷贝</p>
<h3 id="3-两者区别的具体解释"><a href="#3-两者区别的具体解释" class="headerlink" title="3.两者区别的具体解释"></a>3.两者区别的具体解释</h3><p>​	如果从低地址开始拷贝，那么源数据在使用前会被覆盖。除了这种情况，其他情况下都可以保证memcpy拷贝正确。</p>
<p>​	memmove是在memcpy的基础上对所有可能的情况都做了处理；</p>
<p>​	简单的说就是在内存重叠且源数据会被覆盖的情况下选择从高地址开始拷贝，而其他情况下选择从低地址开始拷贝。</p>
<p>​	</p>
]]></content>
  </entry>
  <entry>
    <title>快速排序算法</title>
    <url>/2023/11/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%801%EF%BC%9A%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="1-快排"><a href="#1-快排" class="headerlink" title="1. 快排"></a>1. 快排</h3><p>​		确定一组数据 ，即q数组</p>
<p>​		左端点为了，右端点为r</p>
<p>​		（1）确定分界点</p>
<p>​			q[l] 或 q[ (l + r) &#x2F; 2] 或 q[r] 或任意一个数 作为分界点，分界点数为x</p>
<p>​		（2）调整区间 （重点）</p>
<p>​			使 &lt;&#x3D;  x的数放在左半边，使 &gt;&#x3D; x 的数放在右半边，两边的数可以乱序，暂时不用排序</p>
<p>​		（3）利用递归处理左右两端 ，进行排序</p>
<p>​	暴力法</p>
<p>​	（1）开两个额外数组a，b</p>
<p>​	（2）扫描 l 到 r 的所有数，将  &lt;&#x3D; x 的值放到a中，将 &gt;&#x3D; x的数放到b中</p>
<p>​	（3）将a，b排序后放到q数组中 a[ ] -&gt; q[ ], b[ ]-&gt;q[ ];</p>
<p>​	（4）弊端：额外开辟空间，占用内存</p>
<p>​	简便方法（指针）</p>
<p>​	用两个指针i，j指向左端与右端的数</p>
<p>​		（1）判断指针i所指向的数是否小于x，符合条件时往右移一位，当大于等于x时指针i停下</p>
<p>​		（2）判断指针j所指向的数是否大于x，符合条件时往左移一位，当小于等于x时指针停下</p>
<p>​		（3）将i与j指针所指向的数交换，并再次重复1，2，3，直到i，j走到中间位置</p>
<p>​		（4）两边排序</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">// scanf和printf也在iostream里面 ，但cstdio更快一些</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> <span class="comment">//使用swap函数</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> q[ ], <span class="type">int</span> l, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> ; <span class="comment">// 返回一个随机值，该return只是起到一个中止的作用，无需返回特定值</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> x = q[l], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>,;</span><br><span class="line">    <span class="comment">//x = q[(l+r+1 )/2	一定不能取到边界上，上面的x只是举例</span></span><br><span class="line">    <span class="comment">// x = q[l + r &gt;&gt; 1]会更快,以后再理解</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			i++;</span><br><span class="line">		&#125; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			j--;</span><br><span class="line">		&#125; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (i &lt; j) swap(q[i],q[j]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(l &lt; j )quick_sort(q, l, j);<span class="comment">//左半部分</span></span><br><span class="line">	<span class="keyword">if</span>(i &lt; r)quick_sort(q, j + <span class="number">1</span>, r);<span class="comment">//右半部分</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">	quick_sort(q, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>如何运用strcpy函数</title>
    <url>/2023/11/15/%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89%E5%A6%82%E4%BD%95%E8%BF%90%E7%94%A8strcpy%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="如何运用strcpy函数"><a href="#如何运用strcpy函数" class="headerlink" title="如何运用strcpy函数"></a>如何运用strcpy函数</h1><h2 id="1-strcpy所需要的库函数"><a href="#1-strcpy所需要的库函数" class="headerlink" title="1.strcpy所需要的库函数"></a>1.strcpy所需要的库函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="2-strcpy函数的基本格式与注意事项"><a href="#2-strcpy函数的基本格式与注意事项" class="headerlink" title="2.strcpy函数的基本格式与注意事项"></a>2.strcpy函数的基本格式与注意事项</h2><ul>
<li><p><a href="https://legacy.cplusplus.com/reference/cstring/strcpy/?kw=strcpy">cplusplus对strcpy的描述</a></p>
</li>
<li><p>本人理解<br> strcpy全称为string copy，即字符串拷贝<br>  strcpy的基本格式为strpy（目的地即被拷贝者，源头即拷贝者）<br>  他所代表的含义为：将strcpy函数中源头（即后者）拷贝给相应的目的地（即前者）</p>
</li>
<li><p>举例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> arr1[] = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">	<span class="type">char</span> arr2[] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">	<span class="built_in">strcpy</span>(arr2,arr1);<span class="comment">//strcpy(目的地被复制者，复制源头复制者) </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,arr2)； </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;`</span><br></pre></td></tr></table></figure></li>
</ul>
<p>其输出结果应当为abcde，其中fg为被打印的原因为：在strcpy函数中，arr1拷贝给arr2时，arr1中末尾存在\0，在拷贝后arr2的字符串为”abcde\0fg“，\0代表了终止符，于是打印arr2仅能打印到e。</p>
]]></content>
  </entry>
  <entry>
    <title>高精度算法</title>
    <url>/2023/11/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%EF%BC%9A%E8%BD%BB%E6%9D%BE%E6%90%9E%E6%87%82%E9%AB%98%E7%B2%BE%E5%BA%A6%EF%BC%88%E5%8E%9F%E7%90%86+%E5%8F%AF%E5%A5%97%E7%94%A8%E6%A8%A1%E6%9D%BF%EF%BC%89/</url>
    <content><![CDATA[<h3 id="1-高精度加法"><a href="#1-高精度加法" class="headerlink" title="1.高精度加法"></a>1.高精度加法</h3><p>​		思想：分别用两个数组逆存储两个整数的值，数组下标为0的值存储个位，为1存在十位，以此类推；</p>
<p>​					再通过模拟加法进位来将得到的值的每一位存储的新数组当中，得到相加数</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; &amp;B)</span><span class="comment">//传址调用，节省占用，无需再另拷贝新数组</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; A.size() || i &lt; B.size();++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; A.size()) t += A[i];</span><br><span class="line">		<span class="keyword">if</span> (i &lt; B.size()) t += B[i];</span><br><span class="line">		C.push_back(t % <span class="number">10</span>);</span><br><span class="line">		t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t) C.push_back(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> a, b;</span><br><span class="line">	<span class="built_in">vector</span> &lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;<span class="comment">// a = &quot;123456&quot;</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.size( )<span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);<span class="comment">//&#123;6,5,4,3,2,1&#125;</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = b.size( )<span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i) B.push_back(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> C = add(A, B);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = C.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-高精度减法"><a href="#2-高精度减法" class="headerlink" title="2.高精度减法"></a>2.高精度减法</h3><p>​	思想：分别用两个数组逆存储两个整数的值，数组下标为0的值存储个位，为1存在十位，以此类推；</p>
<p>​			提前判断A，B的谁大谁小，使得最终能够大数减小数，如果是B-A，还要提前打印一个负号</p>
<p>​			再通过模拟减法运算，将得到的值的每一位存储的新数组当中，得到相减数，最后注意前导0的存在</p>
<h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; B)</span><span class="comment">//判断A是否大于等于B</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (A.size() != B.size()) <span class="keyword">return</span> A.size() &gt; B.size();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = A.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (A[i] != B[i]) <span class="keyword">return</span> A[i]&gt;B[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">Sub</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; B)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; A.size();++i)</span><br><span class="line">	&#123;</span><br><span class="line">		t = A[i] - t;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; B.size()) t -= B[i];<span class="comment">// 检测B是否越界</span></span><br><span class="line">		C.push_back((t + <span class="number">10</span>) % <span class="number">10</span>);<span class="comment">//t为正数与t为负数两种情况判断</span></span><br><span class="line">        <span class="comment">// 比如7-8 是负数，模拟减法后则为10+7-8，之后也要后面一位减1</span></span><br><span class="line">		<span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back(); <span class="comment">//防止前导0的存在，需要去0</span></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> a, b;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = b.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) B.push_back(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (cmp(A, B))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> C = Sub(A, B);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = C.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) <span class="built_in">cout</span> &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> C = Sub(B, A);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = C.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) <span class="built_in">cout</span> &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-高精度相乘-（大整数x小整数）"><a href="#3-高精度相乘-（大整数x小整数）" class="headerlink" title="3.高精度相乘 （大整数x小整数）"></a>3.高精度相乘 （大整数x小整数）</h3><p>​		思想：用一个数组逆存储一个整数的值，数组下标为0的值存储个位，为1存在十位，以此类推；用int 存储一个较小数</p>
<p>​			通过将大数每一位的值与B相乘，并且每次运算只把算得的个位传给C，下一次将上次除去个位的数加上这一次相乘的值，最后将留下来的未能放进C的数再放进C中，得到最终的相乘数</p>
<h3 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">Mul</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> &amp;b)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; A.size();++i)</span><br><span class="line">	&#123;</span><br><span class="line">		t += A[i] * b;</span><br><span class="line">		C.push_back(t % <span class="number">10</span>);<span class="comment">//只往C中传个位数，其余位数暂时保留</span></span><br><span class="line">		t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (t)<span class="comment">//排除前导0</span></span><br><span class="line">	&#123;</span><br><span class="line">		C.push_back(t % <span class="number">10</span>);</span><br><span class="line">			t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> a;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.size()<span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> C = Mul(A, b);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = C.size()<span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i) <span class="built_in">cout</span> &lt;&lt; C[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-高精度相除（大整数-小整数）"><a href="#4-高精度相除（大整数-小整数）" class="headerlink" title="4.高精度相除（大整数&#x2F;小整数）"></a>4.高精度相除（大整数&#x2F;小整数）</h3><p>​	思想：用一个数组逆存储一个整数的值，数组下标为0的值存储个位，为1存在十位，以此类推；用int 存储一个较小数</p>
<p>​	和之前一样，但这次是从高位到低位，目的是模拟除法。并通过每次的余数来推演下一次的运算，比如算1234&#x2F;11，第一位得到的余数r是1，</p>
<p>然后通过将余数r*10+下一位的数，得到12，12&#x2F;11得到余数1，以此类推，最后得到的就是两数之商，同时也可得到最终的余数</p>
<h3 id="模板-3"><a href="#模板-3" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">Div</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> &amp;b, <span class="type">int</span> &amp;r)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = A.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">	&#123;</span><br><span class="line">		r = r * <span class="number">10</span> + A[i];<span class="comment">//上一次的余数*10+这一次要除的数，模拟除法</span></span><br><span class="line">		C.push_back(r / b);<span class="comment">//每一位的商</span></span><br><span class="line">		r %= b;<span class="comment">//余数</span></span><br><span class="line">	&#125;</span><br><span class="line">	reverse(C.begin(), C.end());<span class="comment">//得到的商是正过来的，而我们想要倒着输出，因此就要让商再倒过来</span></span><br><span class="line">	<span class="keyword">while</span> (C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();<span class="comment">//排除前导0</span></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="type">int</span> r;</span><br><span class="line">	<span class="keyword">auto</span> C = Div(A, b,r);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = C.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) <span class="built_in">cout</span> &lt;&lt; C[i];<span class="comment">//商</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; r;<span class="comment">//余数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="小注"><a href="#小注" class="headerlink" title="小注"></a>小注</h2><p>​	位数最大为1e6(10 的6 次方)</p>
<p>​	加减乘除四种存储方式是相同的</p>
]]></content>
  </entry>
  <entry>
    <title>幸运数的定义与判断</title>
    <url>/2023/11/16/%E5%B9%B8%E8%BF%90%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%85%B6%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h1 id="幸运数的定义与判断"><a href="#幸运数的定义与判断" class="headerlink" title="幸运数的定义与判断"></a>幸运数的定义与判断</h1><hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天作为我校一场比赛的压轴题出场，但可以通过<strong>骗分</strong>得到可观的分数，本人所用方法虽不是骗分，但本质上也是骗过系统得分。</p>
<ul>
<li>原题链接：<a href="https://ac.nowcoder.com/acm/contest/44011/J">牛客网幸运数</a></li>
<li><strong>幸运数的定义</strong>：<br> 1、对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>2、然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>3、如果这个过程 结果为 1，那么这个数就是幸运数。</li>
</ul>
<p><strong>e.g:</strong> </p>
<p> 19–&gt;1,9<br> 1²+9²&#x3D;82<br> 82–&gt;8,2<br> 8²+2²&#x3D;68<br> 68–&gt;6,8<br> 6²+8²&#x3D;100<br> 100–&gt;1,0,0<br> 1²+0²+0²&#x3D;1<br> 此时和为1，无需再往下运算，可认为19为幸运数</p>
<p> <strong>判断思路</strong><br> 1.在输入相应的n值后，利用while循环以及<strong>计数器</strong>算出该数为几位数<br>         2.利用<strong>数组</strong>a[some]存放该数的每一位<br>         3.通过for循环将此时的各位数平方求和，同时讲该值赋给n，让n进入下一次循环（<strong>在赋给n的同时定义的求和sum也要清零</strong>）<br>         4.</p>
<ul>
<li>在每次循环结束前判断n是否为1，若为1则停止循环，输出true</li>
<li>若不为幸运数，则需要在进行无数次循环后跳出循环，所以我们要引入新的计数器cnt2来记录循环次数，在计数器达到某一特定值时选择终止循环，并输出false，<strong>该方法仅适用于一些数比较小的情况</strong>。</li>
</ul>
<h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-引入库"><a href="#1-引入库" class="headerlink" title="1.引入库"></a>1.引入库</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="2-读入数据"><a href="#2-读入数据" class="headerlink" title="2.读入数据"></a>2.读入数据</h2><p>代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>,cnt2 = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(n != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cnt2++;</span><br><span class="line">		<span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a[cnt++] = n%<span class="number">10</span>;</span><br><span class="line">			n /= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> i;</span><br><span class="line">		<span class="keyword">for</span>(i =<span class="number">0</span>;i &lt; cnt;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			sum += a[i]*a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		n = sum;</span><br><span class="line">		sum = <span class="number">0</span>;</span><br><span class="line">		cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>( n == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(cnt2==<span class="number">30</span>)</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(cnt2==<span class="number">30</span>)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 通过骗过系统的测试点来得到分，虽无耻，但有用</p>
<p> <img src="https://img-blog.csdnimg.cn/01f9aceed70746fa89e2a19d40a6bbb3.jpeg#pic_center" alt="胸针骗过世界来到石头门线，我骗过系统拿到满分，本质不是一样的嘛"></p>
]]></content>
  </entry>
</search>
